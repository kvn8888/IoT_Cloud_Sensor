
weatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003a60  08003a60  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab4  08003ab4  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ab4  08003ab4  00004ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003abc  08003abc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003abc  08003abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ac0  08003ac0  00004ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ac4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003b2c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003b2c  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6e9  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a9  00000000  00000000  0000f781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00011130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000732  00000000  00000000  00011aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002665e  00000000  00000000  000121da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acbc  00000000  00000000  00038838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e93f5  00000000  00000000  000434f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c8e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be8  00000000  00000000  0012c92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012f514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a48 	.word	0x08003a48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08003a48 	.word	0x08003a48

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	return HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	b29a      	uxth	r2, r3
 8000504:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <_write+0x28>)
 800050c:	f002 f892 	bl	8002634 <HAL_UART_Transmit>
 8000510:	4603      	mov	r3, r0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000084 	.word	0x20000084

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fa13 	bl	800094e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f80c 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f880 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f84e 	bl	80005d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  printf("hello world\n");
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <main+0x20>)
 8000536:	f002 fef3 	bl	8003320 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	bf00      	nop
 800053c:	e7fd      	b.n	800053a <main+0x1a>
 800053e:	bf00      	nop
 8000540:	08003a60 	.word	0x08003a60

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	@ 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2244      	movs	r2, #68	@ 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 feec 	bl	8003330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000566:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800056a:	f000 fd03 	bl	8000f74 <HAL_PWREx_ControlVoltageScaling>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000574:	f000 f874 	bl	8000660 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000578:	2310      	movs	r3, #16
 800057a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	@ 0x60
 8000586:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000588:	2300      	movs	r3, #0
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fd45 	bl	8001020 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800059c:	f000 f860 	bl	8000660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f90d 	bl	80017d8 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c4:	f000 f84c 	bl	8000660 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	@ 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	@ (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	f001 ffc0 	bl	8002598 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061e:	f000 f81f 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000084 	.word	0x20000084
 800062c:	40004400 	.word	0x40004400

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_GPIO_Init+0x2c>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	4a08      	ldr	r2, [pc, #32]	@ (800065c <MX_GPIO_Init+0x2c>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_GPIO_Init+0x2c>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <Error_Handler+0x8>

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <HAL_MspInit+0x44>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000676:	4a0e      	ldr	r2, [pc, #56]	@ (80006b0 <HAL_MspInit+0x44>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6613      	str	r3, [r2, #96]	@ 0x60
 800067e:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <HAL_MspInit+0x44>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <HAL_MspInit+0x44>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800068e:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <HAL_MspInit+0x44>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000694:	6593      	str	r3, [r2, #88]	@ 0x58
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <HAL_MspInit+0x44>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800069a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0ac      	sub	sp, #176	@ 0xb0
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2288      	movs	r2, #136	@ 0x88
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fe2b 	bl	8003330 <memset>
  if(huart->Instance==USART2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <HAL_UART_MspInit+0xb0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d13b      	bne.n	800075c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fa95 	bl	8001c20 <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80006fc:	f7ff ffb0 	bl	8000660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <HAL_UART_MspInit+0xb4>)
 8000702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000704:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <HAL_UART_MspInit+0xb4>)
 8000706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070a:	6593      	str	r3, [r2, #88]	@ 0x58
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <HAL_UART_MspInit+0xb4>)
 800070e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <HAL_UART_MspInit+0xb4>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071c:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <HAL_UART_MspInit+0xb4>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <HAL_UART_MspInit+0xb4>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000730:	230c      	movs	r3, #12
 8000732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000748:	2307      	movs	r3, #7
 800074a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000752:	4619      	mov	r1, r3
 8000754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000758:	f000 fa54 	bl	8000c04 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800075c:	bf00      	nop
 800075e:	37b0      	adds	r7, #176	@ 0xb0
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40004400 	.word	0x40004400
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <NMI_Handler+0x4>

08000774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <MemManage_Handler+0x4>

08000784 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <UsageFault_Handler+0x4>

08000794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c2:	f000 f919 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e00a      	b.n	80007f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007dc:	f3af 8000 	nop.w
 80007e0:	4601      	mov	r1, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	60ba      	str	r2, [r7, #8]
 80007e8:	b2ca      	uxtb	r2, r1
 80007ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	dbf0      	blt.n	80007dc <_read+0x12>
  }

  return len;
 80007fa:	687b      	ldr	r3, [r7, #4]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800080c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800082c:	605a      	str	r2, [r3, #4]
  return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <_isatty>:

int _isatty(int file)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000844:	2301      	movs	r3, #1
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f002 fd50 	bl	8003340 <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20018000 	.word	0x20018000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	2000010c 	.word	0x2000010c
 80008d4:	20000260 	.word	0x20000260

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000934 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f002 fd0f 	bl	800334c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092e:	f7ff fdf7 	bl	8000520 <main>

08000932 <LoopForever>:

LoopForever:
    b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000934:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000940:	08003ac4 	.word	0x08003ac4
  ldr r2, =_sbss
 8000944:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000948:	20000260 	.word	0x20000260

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>

0800094e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f91f 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f80e 	bl	8000980 <HAL_InitTick>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e001      	b.n	8000974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000970:	f7ff fe7c 	bl	800066c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000974:	79fb      	ldrb	r3, [r7, #7]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <HAL_InitTick+0x6c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d023      	beq.n	80009dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <HAL_InitTick+0x70>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f91d 	bl	8000bea <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10f      	bne.n	80009d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d809      	bhi.n	80009d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009c4:	f000 f8f5 	bl	8000bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_InitTick+0x74>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e007      	b.n	80009e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e004      	b.n	80009e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e001      	b.n	80009e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000110 	.word	0x20000110

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000110 	.word	0x20000110

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	@ (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	@ (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff47 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff5c 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb0 	bl	8000b58 <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e17f      	b.n	8000f14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8171 	beq.w	8000f0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 0201 	and.w	r2, r3, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d118      	bne.n	8000ce4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	f003 0201 	and.w	r2, r3, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d017      	beq.n	8000d20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d123      	bne.n	8000d74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	6939      	ldr	r1, [r7, #16]
 8000d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0203 	and.w	r2, r3, #3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80ac 	beq.w	8000f0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f34 <HAL_GPIO_Init+0x330>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	4a5e      	ldr	r2, [pc, #376]	@ (8000f34 <HAL_GPIO_Init+0x330>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f34 <HAL_GPIO_Init+0x330>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dce:	4a5a      	ldr	r2, [pc, #360]	@ (8000f38 <HAL_GPIO_Init+0x334>)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000df8:	d025      	beq.n	8000e46 <HAL_GPIO_Init+0x242>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d01f      	beq.n	8000e42 <HAL_GPIO_Init+0x23e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4e      	ldr	r2, [pc, #312]	@ (8000f40 <HAL_GPIO_Init+0x33c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d019      	beq.n	8000e3e <HAL_GPIO_Init+0x23a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f44 <HAL_GPIO_Init+0x340>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0x236>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4c      	ldr	r2, [pc, #304]	@ (8000f48 <HAL_GPIO_Init+0x344>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <HAL_GPIO_Init+0x232>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f4c <HAL_GPIO_Init+0x348>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d007      	beq.n	8000e32 <HAL_GPIO_Init+0x22e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4a      	ldr	r2, [pc, #296]	@ (8000f50 <HAL_GPIO_Init+0x34c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_GPIO_Init+0x22a>
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	e00c      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00a      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e32:	2305      	movs	r3, #5
 8000e34:	e008      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e36:	2304      	movs	r3, #4
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e004      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e46:	2300      	movs	r3, #0
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	f002 0203 	and.w	r2, r2, #3
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e58:	4937      	ldr	r1, [pc, #220]	@ (8000f38 <HAL_GPIO_Init+0x334>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e66:	4b3b      	ldr	r3, [pc, #236]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e8a:	4a32      	ldr	r2, [pc, #200]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e90:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eb4:	4a27      	ldr	r2, [pc, #156]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ede:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f08:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f47f ae78 	bne.w	8000c14 <HAL_GPIO_Init+0x10>
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000800 	.word	0x48000800
 8000f44:	48000c00 	.word	0x48000c00
 8000f48:	48001000 	.word	0x48001000
 8000f4c:	48001400 	.word	0x48001400
 8000f50:	48001800 	.word	0x48001800
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40007000 	.word	0x40007000

08000f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f82:	d130      	bne.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f84:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f90:	d038      	beq.n	8001004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2232      	movs	r2, #50	@ 0x32
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fae:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb2:	0c9b      	lsrs	r3, r3, #18
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb8:	e002      	b.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fcc:	d102      	bne.n	8000fd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f2      	bne.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fe0:	d110      	bne.n	8001004 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e00f      	b.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ff2:	d007      	beq.n	8001004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ffc:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001002:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40007000 	.word	0x40007000
 8001018:	20000000 	.word	0x20000000
 800101c:	431bde83 	.word	0x431bde83

08001020 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e3ca      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001032:	4b97      	ldr	r3, [pc, #604]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800103c:	4b94      	ldr	r3, [pc, #592]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80e4 	beq.w	800121c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <HAL_RCC_OscConfig+0x4a>
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	f040 808b 	bne.w	8001178 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b01      	cmp	r3, #1
 8001066:	f040 8087 	bne.w	8001178 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800106a:	4b89      	ldr	r3, [pc, #548]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_RCC_OscConfig+0x62>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e3a2      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1a      	ldr	r2, [r3, #32]
 8001086:	4b82      	ldr	r3, [pc, #520]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <HAL_RCC_OscConfig+0x7c>
 8001092:	4b7f      	ldr	r3, [pc, #508]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800109a:	e005      	b.n	80010a8 <HAL_RCC_OscConfig+0x88>
 800109c:	4b7c      	ldr	r3, [pc, #496]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 800109e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d223      	bcs.n	80010f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fd55 	bl	8001b60 <RCC_SetFlashLatencyFromMSIRange>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e383      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c0:	4b73      	ldr	r3, [pc, #460]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a72      	ldr	r2, [pc, #456]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b70      	ldr	r3, [pc, #448]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	496d      	ldr	r1, [pc, #436]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010de:	4b6c      	ldr	r3, [pc, #432]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	4968      	ldr	r1, [pc, #416]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	604b      	str	r3, [r1, #4]
 80010f2:	e025      	b.n	8001140 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f4:	4b66      	ldr	r3, [pc, #408]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a65      	ldr	r2, [pc, #404]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b63      	ldr	r3, [pc, #396]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4960      	ldr	r1, [pc, #384]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001112:	4b5f      	ldr	r3, [pc, #380]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	495b      	ldr	r1, [pc, #364]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d109      	bne.n	8001140 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fd15 	bl	8001b60 <RCC_SetFlashLatencyFromMSIRange>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e343      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001140:	f000 fc4a 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001144:	4602      	mov	r2, r0
 8001146:	4b52      	ldr	r3, [pc, #328]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	4950      	ldr	r1, [pc, #320]	@ (8001294 <HAL_RCC_OscConfig+0x274>)
 8001152:	5ccb      	ldrb	r3, [r1, r3]
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	4a4e      	ldr	r2, [pc, #312]	@ (8001298 <HAL_RCC_OscConfig+0x278>)
 800115e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001160:	4b4e      	ldr	r3, [pc, #312]	@ (800129c <HAL_RCC_OscConfig+0x27c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fc0b 	bl	8000980 <HAL_InitTick>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d052      	beq.n	800121a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	e327      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d032      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001180:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a42      	ldr	r2, [pc, #264]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800118c:	f7ff fc48 	bl	8000a20 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001194:	f7ff fc44 	bl	8000a20 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e310      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b2:	4b37      	ldr	r3, [pc, #220]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a36      	ldr	r2, [pc, #216]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b34      	ldr	r3, [pc, #208]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4931      	ldr	r1, [pc, #196]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	492c      	ldr	r1, [pc, #176]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e01a      	b.n	800121c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc15 	bl	8000a20 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc11 	bl	8000a20 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e2dd      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x1da>
 8001218:	e000      	b.n	800121c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800121a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d074      	beq.n	8001312 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b08      	cmp	r3, #8
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x21a>
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b0c      	cmp	r3, #12
 8001232:	d10e      	bne.n	8001252 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d10b      	bne.n	8001252 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d064      	beq.n	8001310 <HAL_RCC_OscConfig+0x2f0>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d160      	bne.n	8001310 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e2ba      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x24a>
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0b      	ldr	r2, [pc, #44]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e026      	b.n	80012b8 <HAL_RCC_OscConfig+0x298>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001272:	d115      	bne.n	80012a0 <HAL_RCC_OscConfig+0x280>
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 800127a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a02      	ldr	r2, [pc, #8]	@ (8001290 <HAL_RCC_OscConfig+0x270>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e014      	b.n	80012b8 <HAL_RCC_OscConfig+0x298>
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	08003a6c 	.word	0x08003a6c
 8001298:	20000000 	.word	0x20000000
 800129c:	20000004 	.word	0x20000004
 80012a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a9c      	ldr	r2, [pc, #624]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fbae 	bl	8000a20 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fbaa 	bl	8000a20 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	@ 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e276      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012da:	4b92      	ldr	r3, [pc, #584]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x2a8>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb9a 	bl	8000a20 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fb96 	bl	8000a20 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	@ 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e262      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001302:	4b88      	ldr	r3, [pc, #544]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x2d0>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d060      	beq.n	80013e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d005      	beq.n	8001330 <HAL_RCC_OscConfig+0x310>
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2b0c      	cmp	r3, #12
 8001328:	d119      	bne.n	800135e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d116      	bne.n	800135e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001330:	4b7c      	ldr	r3, [pc, #496]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x328>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e23f      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b76      	ldr	r3, [pc, #472]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	4973      	ldr	r1, [pc, #460]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135c:	e040      	b.n	80013e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d023      	beq.n	80013ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001366:	4b6f      	ldr	r3, [pc, #444]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a6e      	ldr	r2, [pc, #440]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001372:	f7ff fb55 	bl	8000a20 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fb51 	bl	8000a20 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e21d      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138c:	4b65      	ldr	r3, [pc, #404]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	4b62      	ldr	r3, [pc, #392]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	061b      	lsls	r3, r3, #24
 80013a6:	495f      	ldr	r1, [pc, #380]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
 80013ac:	e018      	b.n	80013e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80013b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb31 	bl	8000a20 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fb2d 	bl	8000a20 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1f9      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d4:	4b53      	ldr	r3, [pc, #332]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d03c      	beq.n	8001466 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01c      	beq.n	800142e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fb0c 	bl	8000a20 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fb08 	bl	8000a20 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1d4      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141e:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0ef      	beq.n	800140c <HAL_RCC_OscConfig+0x3ec>
 800142c:	e01b      	b.n	8001466 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142e:	4b3d      	ldr	r3, [pc, #244]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001434:	4a3b      	ldr	r2, [pc, #236]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff faef 	bl	8000a20 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff faeb 	bl	8000a20 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1b7      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 800145a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ef      	bne.n	8001446 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80a6 	beq.w	80015c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10d      	bne.n	80014a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001488:	4a26      	ldr	r2, [pc, #152]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 800148a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001490:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149c:	2301      	movs	r3, #1
 800149e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_RCC_OscConfig+0x508>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d118      	bne.n	80014de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_RCC_OscConfig+0x508>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <HAL_RCC_OscConfig+0x508>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b8:	f7ff fab2 	bl	8000a20 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c0:	f7ff faae 	bl	8000a20 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e17a      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_RCC_OscConfig+0x508>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4d8>
 80014e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80014e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014f6:	e029      	b.n	800154c <HAL_RCC_OscConfig+0x52c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d115      	bne.n	800152c <HAL_RCC_OscConfig+0x50c>
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001506:	4a07      	ldr	r2, [pc, #28]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001516:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <HAL_RCC_OscConfig+0x504>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x52c>
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	40007000 	.word	0x40007000
 800152c:	4b9c      	ldr	r3, [pc, #624]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001532:	4a9b      	ldr	r2, [pc, #620]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800153c:	4b98      	ldr	r3, [pc, #608]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 800153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001542:	4a97      	ldr	r2, [pc, #604]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d016      	beq.n	8001582 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fa64 	bl	8000a20 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff fa60 	bl	8000a20 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e12a      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001572:	4b8b      	ldr	r3, [pc, #556]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ed      	beq.n	800155c <HAL_RCC_OscConfig+0x53c>
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff fa4d 	bl	8000a20 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff fa49 	bl	8000a20 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e113      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a0:	4b7f      	ldr	r3, [pc, #508]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ed      	bne.n	800158a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b4:	4b7a      	ldr	r3, [pc, #488]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	4a79      	ldr	r2, [pc, #484]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80015ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80fe 	beq.w	80017c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	f040 80d0 	bne.w	8001774 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015d4:	4b72      	ldr	r3, [pc, #456]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d130      	bne.n	800164a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	3b01      	subs	r3, #1
 80015f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d127      	bne.n	800164a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001604:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d11f      	bne.n	800164a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001614:	2a07      	cmp	r2, #7
 8001616:	bf14      	ite	ne
 8001618:	2201      	movne	r2, #1
 800161a:	2200      	moveq	r2, #0
 800161c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800161e:	4293      	cmp	r3, r2
 8001620:	d113      	bne.n	800164a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d109      	bne.n	800164a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d06e      	beq.n	8001728 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d069      	beq.n	8001724 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001650:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800165c:	4b50      	ldr	r3, [pc, #320]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0ad      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800166c:	4b4c      	ldr	r3, [pc, #304]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4b      	ldr	r2, [pc, #300]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001676:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001678:	f7ff f9d2 	bl	8000a20 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff f9ce 	bl	8000a20 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e09a      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001692:	4b43      	ldr	r3, [pc, #268]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169e:	4b40      	ldr	r3, [pc, #256]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	4b40      	ldr	r3, [pc, #256]	@ (80017a4 <HAL_RCC_OscConfig+0x784>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016ae:	3a01      	subs	r2, #1
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	4311      	orrs	r1, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016b8:	0212      	lsls	r2, r2, #8
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016c0:	0852      	lsrs	r2, r2, #1
 80016c2:	3a01      	subs	r2, #1
 80016c4:	0552      	lsls	r2, r2, #21
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016cc:	0852      	lsrs	r2, r2, #1
 80016ce:	3a01      	subs	r2, #1
 80016d0:	0652      	lsls	r2, r2, #25
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016d8:	0912      	lsrs	r2, r2, #4
 80016da:	0452      	lsls	r2, r2, #17
 80016dc:	430a      	orrs	r2, r1
 80016de:	4930      	ldr	r1, [pc, #192]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016e4:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2d      	ldr	r2, [pc, #180]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80016ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016f0:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a2a      	ldr	r2, [pc, #168]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 80016f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016fc:	f7ff f990 	bl	8000a20 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff f98c 	bl	8000a20 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e058      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001722:	e050      	b.n	80017c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e04f      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d148      	bne.n	80017c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 800173a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a16      	ldr	r2, [pc, #88]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800174c:	f7ff f968 	bl	8000a20 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff f964 	bl	8000a20 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e030      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x734>
 8001772:	e028      	b.n	80017c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <HAL_RCC_OscConfig+0x780>)
 8001780:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff f94b 	bl	8000a20 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	e00c      	b.n	80017a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff f947 	bl	8000a20 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d905      	bls.n	80017a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e013      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HAL_RCC_OscConfig+0x7b0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ec      	bne.n	800178e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_OscConfig+0x7b0>)
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	4905      	ldr	r1, [pc, #20]	@ (80017d0 <HAL_RCC_OscConfig+0x7b0>)
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_RCC_OscConfig+0x7b4>)
 80017bc:	4013      	ands	r3, r2
 80017be:	60cb      	str	r3, [r1, #12]
 80017c0:	e001      	b.n	80017c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	feeefffc 	.word	0xfeeefffc

080017d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0e7      	b.n	80019bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b75      	ldr	r3, [pc, #468]	@ (80019c4 <HAL_RCC_ClockConfig+0x1ec>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d910      	bls.n	800181c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b72      	ldr	r3, [pc, #456]	@ (80019c4 <HAL_RCC_ClockConfig+0x1ec>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 0207 	bic.w	r2, r3, #7
 8001802:	4970      	ldr	r1, [pc, #448]	@ (80019c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b6e      	ldr	r3, [pc, #440]	@ (80019c4 <HAL_RCC_ClockConfig+0x1ec>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cf      	b.n	80019bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d010      	beq.n	800184a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	4b66      	ldr	r3, [pc, #408]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001834:	429a      	cmp	r2, r3
 8001836:	d908      	bls.n	800184a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b63      	ldr	r3, [pc, #396]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4960      	ldr	r1, [pc, #384]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d04c      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	4b5a      	ldr	r3, [pc, #360]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d121      	bne.n	80018ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0a6      	b.n	80019bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	4b54      	ldr	r3, [pc, #336]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d115      	bne.n	80018ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e09a      	b.n	80019bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188e:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e08e      	b.n	80019bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189e:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e086      	b.n	80019bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ae:	4b46      	ldr	r3, [pc, #280]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4943      	ldr	r1, [pc, #268]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c0:	f7ff f8ae 	bl	8000a20 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	e00a      	b.n	80018de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff f8aa 	bl	8000a20 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e06e      	b.n	80019bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 020c 	and.w	r2, r3, #12
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1eb      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d010      	beq.n	800191e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001908:	429a      	cmp	r2, r3
 800190a:	d208      	bcs.n	800191e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	492b      	ldr	r1, [pc, #172]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800191e:	4b29      	ldr	r3, [pc, #164]	@ (80019c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d210      	bcs.n	800194e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192c:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <HAL_RCC_ClockConfig+0x1ec>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0207 	bic.w	r2, r3, #7
 8001934:	4923      	ldr	r1, [pc, #140]	@ (80019c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193c:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <HAL_RCC_ClockConfig+0x1ec>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e036      	b.n	80019bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195a:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	4918      	ldr	r1, [pc, #96]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4910      	ldr	r1, [pc, #64]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800198c:	f000 f824 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	490b      	ldr	r1, [pc, #44]	@ (80019cc <HAL_RCC_ClockConfig+0x1f4>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	4a09      	ldr	r2, [pc, #36]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f8>)
 80019aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_RCC_ClockConfig+0x1fc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe ffe5 	bl	8000980 <HAL_InitTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80019ba:	7afb      	ldrb	r3, [r7, #11]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08003a6c 	.word	0x08003a6c
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x34>
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d121      	bne.n	8001a4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d11e      	bne.n	8001a4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a18:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e005      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10d      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a50:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	e004      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a5c:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x114>)
 8001a5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d134      	bne.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0xa6>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d003      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0xac>
 8001a7c:	e005      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a80:	617b      	str	r3, [r7, #20]
      break;
 8001a82:	e005      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x114>)
 8001a86:	617b      	str	r3, [r7, #20]
      break;
 8001a88:	e002      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	617b      	str	r3, [r7, #20]
      break;
 8001a8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	fb03 f202 	mul.w	r2, r3, r2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	0e5b      	lsrs	r3, r3, #25
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	@ 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08003a84 	.word	0x08003a84
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	007a1200 	.word	0x007a1200

08001af0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4904      	ldr	r1, [pc, #16]	@ (8001b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08003a7c 	.word	0x08003a7c

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b38:	f7ff ffda 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0adb      	lsrs	r3, r3, #11
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4904      	ldr	r1, [pc, #16]	@ (8001b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08003a7c 	.word	0x08003a7c

08001b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b78:	f7ff f9ee 	bl	8000f58 <HAL_PWREx_GetVoltageRange>
 8001b7c:	6178      	str	r0, [r7, #20]
 8001b7e:	e014      	b.n	8001baa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	4a24      	ldr	r2, [pc, #144]	@ (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8c:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b98:	f7ff f9de 	bl	8000f58 <HAL_PWREx_GetVoltageRange>
 8001b9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb0:	d10b      	bne.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b80      	cmp	r3, #128	@ 0x80
 8001bb6:	d919      	bls.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bbc:	d902      	bls.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	e013      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e010      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	d902      	bls.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e00a      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b80      	cmp	r3, #128	@ 0x80
 8001bda:	d102      	bne.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bdc:	2302      	movs	r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e004      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b70      	cmp	r3, #112	@ 0x70
 8001be6:	d101      	bne.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001be8:	2301      	movs	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 0207 	bic.w	r2, r3, #7
 8001bf4:	4909      	ldr	r1, [pc, #36]	@ (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bfc:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c28:	2300      	movs	r3, #0
 8001c2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d041      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c44:	d02a      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c46:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c4a:	d824      	bhi.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c50:	d008      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c56:	d81e      	bhi.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00a      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c60:	d010      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c62:	e018      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c64:	4b86      	ldr	r3, [pc, #536]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a85      	ldr	r2, [pc, #532]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c70:	e015      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fabb 	bl	80021f4 <RCCEx_PLLSAI1_Config>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c82:	e00c      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3320      	adds	r3, #32
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fba6 	bl	80023dc <RCCEx_PLLSAI2_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c94:	e003      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	74fb      	strb	r3, [r7, #19]
      break;
 8001c9a:	e000      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca4:	4b76      	ldr	r3, [pc, #472]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001caa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cb2:	4973      	ldr	r1, [pc, #460]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001cba:	e001      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cbc:	7cfb      	ldrb	r3, [r7, #19]
 8001cbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d041      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001cd4:	d02a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001cd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001cda:	d824      	bhi.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ce0:	d008      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ce2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ce6:	d81e      	bhi.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cf2:	e018      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cf4:	4b62      	ldr	r3, [pc, #392]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a61      	ldr	r2, [pc, #388]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d00:	e015      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fa73 	bl	80021f4 <RCCEx_PLLSAI1_Config>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d12:	e00c      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3320      	adds	r3, #32
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fb5e 	bl	80023dc <RCCEx_PLLSAI2_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d24:	e003      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	74fb      	strb	r3, [r7, #19]
      break;
 8001d2a:	e000      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d2e:	7cfb      	ldrb	r3, [r7, #19]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d34:	4b52      	ldr	r3, [pc, #328]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d42:	494f      	ldr	r1, [pc, #316]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d4a:	e001      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a0 	beq.w	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d62:	4b47      	ldr	r3, [pc, #284]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	4a40      	ldr	r2, [pc, #256]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d84:	4b3e      	ldr	r3, [pc, #248]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d94:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3a      	ldr	r2, [pc, #232]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001da0:	f7fe fe3e 	bl	8000a20 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da6:	e009      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7fe fe3a 	bl	8000a20 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d902      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	74fb      	strb	r3, [r7, #19]
        break;
 8001dba:	e005      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dbc:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ef      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001dc8:	7cfb      	ldrb	r3, [r7, #19]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d15c      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dce:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01f      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d019      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001df8:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfe:	4a20      	ldr	r2, [pc, #128]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e18:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d016      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fdf9 	bl	8000a20 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e30:	e00b      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe fdf5 	bl	8000a20 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d902      	bls.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	74fb      	strb	r3, [r7, #19]
            break;
 8001e48:	e006      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ec      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e6e:	4904      	ldr	r1, [pc, #16]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e76:	e009      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e78:	7cfb      	ldrb	r3, [r7, #19]
 8001e7a:	74bb      	strb	r3, [r7, #18]
 8001e7c:	e006      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e8c:	7c7b      	ldrb	r3, [r7, #17]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b9e      	ldr	r3, [pc, #632]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	4a9d      	ldr	r2, [pc, #628]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eaa:	4b98      	ldr	r3, [pc, #608]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb8:	4994      	ldr	r1, [pc, #592]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ecc:	4b8f      	ldr	r3, [pc, #572]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed2:	f023 020c 	bic.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eda:	498c      	ldr	r1, [pc, #560]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eee:	4b87      	ldr	r3, [pc, #540]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	4983      	ldr	r1, [pc, #524]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f10:	4b7e      	ldr	r3, [pc, #504]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	497b      	ldr	r1, [pc, #492]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f32:	4b76      	ldr	r3, [pc, #472]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f40:	4972      	ldr	r1, [pc, #456]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f54:	4b6d      	ldr	r3, [pc, #436]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	496a      	ldr	r1, [pc, #424]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f76:	4b65      	ldr	r3, [pc, #404]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	4961      	ldr	r1, [pc, #388]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f98:	4b5c      	ldr	r3, [pc, #368]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	4959      	ldr	r1, [pc, #356]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fba:	4b54      	ldr	r3, [pc, #336]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc8:	4950      	ldr	r1, [pc, #320]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fea:	4948      	ldr	r1, [pc, #288]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ffe:	4b43      	ldr	r3, [pc, #268]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002004:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	493f      	ldr	r1, [pc, #252]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d028      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002020:	4b3a      	ldr	r3, [pc, #232]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800202e:	4937      	ldr	r1, [pc, #220]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800203a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800203e:	d106      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002040:	4b32      	ldr	r3, [pc, #200]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a31      	ldr	r2, [pc, #196]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800204a:	60d3      	str	r3, [r2, #12]
 800204c:	e011      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002056:	d10c      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f8c8 	bl	80021f4 <RCCEx_PLLSAI1_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d028      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800207e:	4b23      	ldr	r3, [pc, #140]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002084:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208c:	491f      	ldr	r1, [pc, #124]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800209c:	d106      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800209e:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a1a      	ldr	r2, [pc, #104]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020a8:	60d3      	str	r3, [r2, #12]
 80020aa:	e011      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2101      	movs	r1, #1
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f899 	bl	80021f4 <RCCEx_PLLSAI1_Config>
 80020c2:	4603      	mov	r3, r0
 80020c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020c6:	7cfb      	ldrb	r3, [r7, #19]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d02b      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ea:	4908      	ldr	r1, [pc, #32]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020fa:	d109      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a02      	ldr	r2, [pc, #8]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002106:	60d3      	str	r3, [r2, #12]
 8002108:	e014      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002118:	d10c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f867 	bl	80021f4 <RCCEx_PLLSAI1_Config>
 8002126:	4603      	mov	r3, r0
 8002128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d02f      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002140:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800214e:	4928      	ldr	r1, [pc, #160]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800215a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800215e:	d10d      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	2102      	movs	r1, #2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f844 	bl	80021f4 <RCCEx_PLLSAI1_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d014      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	74bb      	strb	r3, [r7, #18]
 800217a:	e011      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3320      	adds	r3, #32
 800218a:	2102      	movs	r1, #2
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f925 	bl	80023dc <RCCEx_PLLSAI2_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021ac:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021ba:	490d      	ldr	r1, [pc, #52]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021de:	4904      	ldr	r1, [pc, #16]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000

080021f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002202:	4b75      	ldr	r3, [pc, #468]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d018      	beq.n	8002240 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800220e:	4b72      	ldr	r3, [pc, #456]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f003 0203 	and.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d10d      	bne.n	800223a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
       ||
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002226:	4b6c      	ldr	r3, [pc, #432]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
       ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d047      	beq.n	80022ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	e044      	b.n	80022ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d018      	beq.n	800227a <RCCEx_PLLSAI1_Config+0x86>
 8002248:	2b03      	cmp	r3, #3
 800224a:	d825      	bhi.n	8002298 <RCCEx_PLLSAI1_Config+0xa4>
 800224c:	2b01      	cmp	r3, #1
 800224e:	d002      	beq.n	8002256 <RCCEx_PLLSAI1_Config+0x62>
 8002250:	2b02      	cmp	r3, #2
 8002252:	d009      	beq.n	8002268 <RCCEx_PLLSAI1_Config+0x74>
 8002254:	e020      	b.n	8002298 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002256:	4b60      	ldr	r3, [pc, #384]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11d      	bne.n	800229e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002266:	e01a      	b.n	800229e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002268:	4b5b      	ldr	r3, [pc, #364]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d116      	bne.n	80022a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002278:	e013      	b.n	80022a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800227a:	4b57      	ldr	r3, [pc, #348]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002286:	4b54      	ldr	r3, [pc, #336]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002296:	e006      	b.n	80022a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e004      	b.n	80022a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800229e:	bf00      	nop
 80022a0:	e002      	b.n	80022a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a2:	bf00      	nop
 80022a4:	e000      	b.n	80022a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022ae:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	430b      	orrs	r3, r1
 80022c4:	4944      	ldr	r1, [pc, #272]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d17d      	bne.n	80023cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022d0:	4b41      	ldr	r3, [pc, #260]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a40      	ldr	r2, [pc, #256]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022dc:	f7fe fba0 	bl	8000a20 <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022e2:	e009      	b.n	80022f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022e4:	f7fe fb9c 	bl	8000a20 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d902      	bls.n	80022f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	73fb      	strb	r3, [r7, #15]
        break;
 80022f6:	e005      	b.n	8002304 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022f8:	4b37      	ldr	r3, [pc, #220]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ef      	bne.n	80022e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d160      	bne.n	80023cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d111      	bne.n	8002334 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002310:	4b31      	ldr	r3, [pc, #196]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6892      	ldr	r2, [r2, #8]
 8002320:	0211      	lsls	r1, r2, #8
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68d2      	ldr	r2, [r2, #12]
 8002326:	0912      	lsrs	r2, r2, #4
 8002328:	0452      	lsls	r2, r2, #17
 800232a:	430a      	orrs	r2, r1
 800232c:	492a      	ldr	r1, [pc, #168]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	610b      	str	r3, [r1, #16]
 8002332:	e027      	b.n	8002384 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d112      	bne.n	8002360 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800233a:	4b27      	ldr	r3, [pc, #156]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002342:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6892      	ldr	r2, [r2, #8]
 800234a:	0211      	lsls	r1, r2, #8
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6912      	ldr	r2, [r2, #16]
 8002350:	0852      	lsrs	r2, r2, #1
 8002352:	3a01      	subs	r2, #1
 8002354:	0552      	lsls	r2, r2, #21
 8002356:	430a      	orrs	r2, r1
 8002358:	491f      	ldr	r1, [pc, #124]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	610b      	str	r3, [r1, #16]
 800235e:	e011      	b.n	8002384 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002368:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6892      	ldr	r2, [r2, #8]
 8002370:	0211      	lsls	r1, r2, #8
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6952      	ldr	r2, [r2, #20]
 8002376:	0852      	lsrs	r2, r2, #1
 8002378:	3a01      	subs	r2, #1
 800237a:	0652      	lsls	r2, r2, #25
 800237c:	430a      	orrs	r2, r1
 800237e:	4916      	ldr	r1, [pc, #88]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a13      	ldr	r2, [pc, #76]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800238e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7fe fb46 	bl	8000a20 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002396:	e009      	b.n	80023ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002398:	f7fe fb42 	bl	8000a20 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d902      	bls.n	80023ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	73fb      	strb	r3, [r7, #15]
          break;
 80023aa:	e005      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023ac:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ef      	beq.n	8002398 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	4904      	ldr	r1, [pc, #16]	@ (80023d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000

080023dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d018      	beq.n	8002428 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80023f6:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d10d      	bne.n	8002422 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
       ||
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800240e:	4b61      	ldr	r3, [pc, #388]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
       ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d047      	beq.n	80024b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	e044      	b.n	80024b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d018      	beq.n	8002462 <RCCEx_PLLSAI2_Config+0x86>
 8002430:	2b03      	cmp	r3, #3
 8002432:	d825      	bhi.n	8002480 <RCCEx_PLLSAI2_Config+0xa4>
 8002434:	2b01      	cmp	r3, #1
 8002436:	d002      	beq.n	800243e <RCCEx_PLLSAI2_Config+0x62>
 8002438:	2b02      	cmp	r3, #2
 800243a:	d009      	beq.n	8002450 <RCCEx_PLLSAI2_Config+0x74>
 800243c:	e020      	b.n	8002480 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800243e:	4b55      	ldr	r3, [pc, #340]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11d      	bne.n	8002486 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244e:	e01a      	b.n	8002486 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002450:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d116      	bne.n	800248a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002460:	e013      	b.n	800248a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002462:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800247e:	e006      	b.n	800248e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e004      	b.n	8002490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800248e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002496:	4b3f      	ldr	r3, [pc, #252]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	430b      	orrs	r3, r1
 80024ac:	4939      	ldr	r1, [pc, #228]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d167      	bne.n	8002588 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024b8:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a35      	ldr	r2, [pc, #212]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe faac 	bl	8000a20 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024ca:	e009      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024cc:	f7fe faa8 	bl	8000a20 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d902      	bls.n	80024e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	73fb      	strb	r3, [r7, #15]
        break;
 80024de:	e005      	b.n	80024ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ef      	bne.n	80024cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d14a      	bne.n	8002588 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024f8:	4b26      	ldr	r3, [pc, #152]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6892      	ldr	r2, [r2, #8]
 8002508:	0211      	lsls	r1, r2, #8
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68d2      	ldr	r2, [r2, #12]
 800250e:	0912      	lsrs	r2, r2, #4
 8002510:	0452      	lsls	r2, r2, #17
 8002512:	430a      	orrs	r2, r1
 8002514:	491f      	ldr	r1, [pc, #124]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	614b      	str	r3, [r1, #20]
 800251a:	e011      	b.n	8002540 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002524:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6892      	ldr	r2, [r2, #8]
 800252c:	0211      	lsls	r1, r2, #8
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6912      	ldr	r2, [r2, #16]
 8002532:	0852      	lsrs	r2, r2, #1
 8002534:	3a01      	subs	r2, #1
 8002536:	0652      	lsls	r2, r2, #25
 8002538:	430a      	orrs	r2, r1
 800253a:	4916      	ldr	r1, [pc, #88]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800253c:	4313      	orrs	r3, r2
 800253e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a13      	ldr	r2, [pc, #76]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe fa68 	bl	8000a20 <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002552:	e009      	b.n	8002568 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002554:	f7fe fa64 	bl	8000a20 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	73fb      	strb	r3, [r7, #15]
          break;
 8002566:	e005      	b.n	8002574 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ef      	beq.n	8002554 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4904      	ldr	r1, [pc, #16]	@ (8002594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002584:	4313      	orrs	r3, r2
 8002586:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e040      	b.n	800262c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe f87a 	bl	80006b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	@ 0x24
 80025c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fb6a 	bl	8002cb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8af 	bl	8002748 <UART_SetConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e01b      	b.n	800262c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fbe9 	bl	8002dfc <UART_CheckIdleState>
 800262a:	4603      	mov	r3, r0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002648:	2b20      	cmp	r3, #32
 800264a:	d177      	bne.n	800273c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_UART_Transmit+0x24>
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e070      	b.n	800273e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2221      	movs	r2, #33	@ 0x21
 8002668:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800266a:	f7fe f9d9 	bl	8000a20 <HAL_GetTick>
 800266e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002688:	d108      	bne.n	800269c <HAL_UART_Transmit+0x68>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d104      	bne.n	800269c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	e003      	b.n	80026a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026a4:	e02f      	b.n	8002706 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2180      	movs	r1, #128	@ 0x80
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fc4b 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e03b      	b.n	800273e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	881a      	ldrh	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026d8:	b292      	uxth	r2, r2
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	3302      	adds	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e007      	b.n	80026f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3301      	adds	r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1c9      	bne.n	80026a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	2140      	movs	r1, #64	@ 0x40
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fc15 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e005      	b.n	800273e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800273c:	2302      	movs	r3, #2
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800274c:	b08a      	sub	sp, #40	@ 0x28
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	431a      	orrs	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	431a      	orrs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	4313      	orrs	r3, r2
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4ba4      	ldr	r3, [pc, #656]	@ (8002a08 <UART_SetConfig+0x2c0>)
 8002778:	4013      	ands	r3, r2
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002780:	430b      	orrs	r3, r1
 8002782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a99      	ldr	r2, [pc, #612]	@ (8002a0c <UART_SetConfig+0x2c4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b0:	4313      	orrs	r3, r2
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a90      	ldr	r2, [pc, #576]	@ (8002a10 <UART_SetConfig+0x2c8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d126      	bne.n	8002820 <UART_SetConfig+0xd8>
 80027d2:	4b90      	ldr	r3, [pc, #576]	@ (8002a14 <UART_SetConfig+0x2cc>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d81b      	bhi.n	8002818 <UART_SetConfig+0xd0>
 80027e0:	a201      	add	r2, pc, #4	@ (adr r2, 80027e8 <UART_SetConfig+0xa0>)
 80027e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e6:	bf00      	nop
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	08002809 	.word	0x08002809
 80027f0:	08002801 	.word	0x08002801
 80027f4:	08002811 	.word	0x08002811
 80027f8:	2301      	movs	r3, #1
 80027fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027fe:	e116      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002800:	2302      	movs	r3, #2
 8002802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002806:	e112      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002808:	2304      	movs	r3, #4
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800280e:	e10e      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002810:	2308      	movs	r3, #8
 8002812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002816:	e10a      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002818:	2310      	movs	r3, #16
 800281a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800281e:	e106      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a7c      	ldr	r2, [pc, #496]	@ (8002a18 <UART_SetConfig+0x2d0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d138      	bne.n	800289c <UART_SetConfig+0x154>
 800282a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <UART_SetConfig+0x2cc>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b0c      	cmp	r3, #12
 8002836:	d82d      	bhi.n	8002894 <UART_SetConfig+0x14c>
 8002838:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <UART_SetConfig+0xf8>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002875 	.word	0x08002875
 8002844:	08002895 	.word	0x08002895
 8002848:	08002895 	.word	0x08002895
 800284c:	08002895 	.word	0x08002895
 8002850:	08002885 	.word	0x08002885
 8002854:	08002895 	.word	0x08002895
 8002858:	08002895 	.word	0x08002895
 800285c:	08002895 	.word	0x08002895
 8002860:	0800287d 	.word	0x0800287d
 8002864:	08002895 	.word	0x08002895
 8002868:	08002895 	.word	0x08002895
 800286c:	08002895 	.word	0x08002895
 8002870:	0800288d 	.word	0x0800288d
 8002874:	2300      	movs	r3, #0
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800287a:	e0d8      	b.n	8002a2e <UART_SetConfig+0x2e6>
 800287c:	2302      	movs	r3, #2
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002882:	e0d4      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002884:	2304      	movs	r3, #4
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800288a:	e0d0      	b.n	8002a2e <UART_SetConfig+0x2e6>
 800288c:	2308      	movs	r3, #8
 800288e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002892:	e0cc      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002894:	2310      	movs	r3, #16
 8002896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800289a:	e0c8      	b.n	8002a2e <UART_SetConfig+0x2e6>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5e      	ldr	r2, [pc, #376]	@ (8002a1c <UART_SetConfig+0x2d4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d125      	bne.n	80028f2 <UART_SetConfig+0x1aa>
 80028a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a14 <UART_SetConfig+0x2cc>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80028b0:	2b30      	cmp	r3, #48	@ 0x30
 80028b2:	d016      	beq.n	80028e2 <UART_SetConfig+0x19a>
 80028b4:	2b30      	cmp	r3, #48	@ 0x30
 80028b6:	d818      	bhi.n	80028ea <UART_SetConfig+0x1a2>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d00a      	beq.n	80028d2 <UART_SetConfig+0x18a>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d814      	bhi.n	80028ea <UART_SetConfig+0x1a2>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <UART_SetConfig+0x182>
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d008      	beq.n	80028da <UART_SetConfig+0x192>
 80028c8:	e00f      	b.n	80028ea <UART_SetConfig+0x1a2>
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028d0:	e0ad      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80028d2:	2302      	movs	r3, #2
 80028d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028d8:	e0a9      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80028da:	2304      	movs	r3, #4
 80028dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028e0:	e0a5      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80028e2:	2308      	movs	r3, #8
 80028e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028e8:	e0a1      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80028ea:	2310      	movs	r3, #16
 80028ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028f0:	e09d      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002a20 <UART_SetConfig+0x2d8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d125      	bne.n	8002948 <UART_SetConfig+0x200>
 80028fc:	4b45      	ldr	r3, [pc, #276]	@ (8002a14 <UART_SetConfig+0x2cc>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002902:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002906:	2bc0      	cmp	r3, #192	@ 0xc0
 8002908:	d016      	beq.n	8002938 <UART_SetConfig+0x1f0>
 800290a:	2bc0      	cmp	r3, #192	@ 0xc0
 800290c:	d818      	bhi.n	8002940 <UART_SetConfig+0x1f8>
 800290e:	2b80      	cmp	r3, #128	@ 0x80
 8002910:	d00a      	beq.n	8002928 <UART_SetConfig+0x1e0>
 8002912:	2b80      	cmp	r3, #128	@ 0x80
 8002914:	d814      	bhi.n	8002940 <UART_SetConfig+0x1f8>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <UART_SetConfig+0x1d8>
 800291a:	2b40      	cmp	r3, #64	@ 0x40
 800291c:	d008      	beq.n	8002930 <UART_SetConfig+0x1e8>
 800291e:	e00f      	b.n	8002940 <UART_SetConfig+0x1f8>
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002926:	e082      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002928:	2302      	movs	r3, #2
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800292e:	e07e      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002930:	2304      	movs	r3, #4
 8002932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002936:	e07a      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002938:	2308      	movs	r3, #8
 800293a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800293e:	e076      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002940:	2310      	movs	r3, #16
 8002942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002946:	e072      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a35      	ldr	r2, [pc, #212]	@ (8002a24 <UART_SetConfig+0x2dc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d12a      	bne.n	80029a8 <UART_SetConfig+0x260>
 8002952:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <UART_SetConfig+0x2cc>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002960:	d01a      	beq.n	8002998 <UART_SetConfig+0x250>
 8002962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002966:	d81b      	bhi.n	80029a0 <UART_SetConfig+0x258>
 8002968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800296c:	d00c      	beq.n	8002988 <UART_SetConfig+0x240>
 800296e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002972:	d815      	bhi.n	80029a0 <UART_SetConfig+0x258>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <UART_SetConfig+0x238>
 8002978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800297c:	d008      	beq.n	8002990 <UART_SetConfig+0x248>
 800297e:	e00f      	b.n	80029a0 <UART_SetConfig+0x258>
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002986:	e052      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002988:	2302      	movs	r3, #2
 800298a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800298e:	e04e      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002990:	2304      	movs	r3, #4
 8002992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002996:	e04a      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002998:	2308      	movs	r3, #8
 800299a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299e:	e046      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80029a0:	2310      	movs	r3, #16
 80029a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a6:	e042      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a17      	ldr	r2, [pc, #92]	@ (8002a0c <UART_SetConfig+0x2c4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d13a      	bne.n	8002a28 <UART_SetConfig+0x2e0>
 80029b2:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <UART_SetConfig+0x2cc>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029c0:	d01a      	beq.n	80029f8 <UART_SetConfig+0x2b0>
 80029c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029c6:	d81b      	bhi.n	8002a00 <UART_SetConfig+0x2b8>
 80029c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029cc:	d00c      	beq.n	80029e8 <UART_SetConfig+0x2a0>
 80029ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d2:	d815      	bhi.n	8002a00 <UART_SetConfig+0x2b8>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <UART_SetConfig+0x298>
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029dc:	d008      	beq.n	80029f0 <UART_SetConfig+0x2a8>
 80029de:	e00f      	b.n	8002a00 <UART_SetConfig+0x2b8>
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e6:	e022      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80029e8:	2302      	movs	r3, #2
 80029ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ee:	e01e      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80029f0:	2304      	movs	r3, #4
 80029f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f6:	e01a      	b.n	8002a2e <UART_SetConfig+0x2e6>
 80029f8:	2308      	movs	r3, #8
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fe:	e016      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002a00:	2310      	movs	r3, #16
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a06:	e012      	b.n	8002a2e <UART_SetConfig+0x2e6>
 8002a08:	efff69f3 	.word	0xefff69f3
 8002a0c:	40008000 	.word	0x40008000
 8002a10:	40013800 	.word	0x40013800
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40004400 	.word	0x40004400
 8002a1c:	40004800 	.word	0x40004800
 8002a20:	40004c00 	.word	0x40004c00
 8002a24:	40005000 	.word	0x40005000
 8002a28:	2310      	movs	r3, #16
 8002a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a9f      	ldr	r2, [pc, #636]	@ (8002cb0 <UART_SetConfig+0x568>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d17a      	bne.n	8002b2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d824      	bhi.n	8002a8a <UART_SetConfig+0x342>
 8002a40:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <UART_SetConfig+0x300>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a6d 	.word	0x08002a6d
 8002a4c:	08002a8b 	.word	0x08002a8b
 8002a50:	08002a75 	.word	0x08002a75
 8002a54:	08002a8b 	.word	0x08002a8b
 8002a58:	08002a7b 	.word	0x08002a7b
 8002a5c:	08002a8b 	.word	0x08002a8b
 8002a60:	08002a8b 	.word	0x08002a8b
 8002a64:	08002a8b 	.word	0x08002a8b
 8002a68:	08002a83 	.word	0x08002a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a6c:	f7ff f84c 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002a70:	61f8      	str	r0, [r7, #28]
        break;
 8002a72:	e010      	b.n	8002a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a74:	4b8f      	ldr	r3, [pc, #572]	@ (8002cb4 <UART_SetConfig+0x56c>)
 8002a76:	61fb      	str	r3, [r7, #28]
        break;
 8002a78:	e00d      	b.n	8002a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a7a:	f7fe ffad 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8002a7e:	61f8      	str	r0, [r7, #28]
        break;
 8002a80:	e009      	b.n	8002a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a86:	61fb      	str	r3, [r7, #28]
        break;
 8002a88:	e005      	b.n	8002a96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80fb 	beq.w	8002c94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d305      	bcc.n	8002aba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d903      	bls.n	8002ac2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ac0:	e0e8      	b.n	8002c94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	461c      	mov	r4, r3
 8002ac8:	4615      	mov	r5, r2
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	022b      	lsls	r3, r5, #8
 8002ad4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ad8:	0222      	lsls	r2, r4, #8
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	6849      	ldr	r1, [r1, #4]
 8002ade:	0849      	lsrs	r1, r1, #1
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	4688      	mov	r8, r1
 8002ae4:	4681      	mov	r9, r0
 8002ae6:	eb12 0a08 	adds.w	sl, r2, r8
 8002aea:	eb43 0b09 	adc.w	fp, r3, r9
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002afc:	4650      	mov	r0, sl
 8002afe:	4659      	mov	r1, fp
 8002b00:	f7fd fb62 	bl	80001c8 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b12:	d308      	bcc.n	8002b26 <UART_SetConfig+0x3de>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b1a:	d204      	bcs.n	8002b26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	e0b6      	b.n	8002c94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b2c:	e0b2      	b.n	8002c94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b36:	d15e      	bne.n	8002bf6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002b38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d828      	bhi.n	8002b92 <UART_SetConfig+0x44a>
 8002b40:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <UART_SetConfig+0x400>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b6d 	.word	0x08002b6d
 8002b4c:	08002b75 	.word	0x08002b75
 8002b50:	08002b7d 	.word	0x08002b7d
 8002b54:	08002b93 	.word	0x08002b93
 8002b58:	08002b83 	.word	0x08002b83
 8002b5c:	08002b93 	.word	0x08002b93
 8002b60:	08002b93 	.word	0x08002b93
 8002b64:	08002b93 	.word	0x08002b93
 8002b68:	08002b8b 	.word	0x08002b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6c:	f7fe ffcc 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002b70:	61f8      	str	r0, [r7, #28]
        break;
 8002b72:	e014      	b.n	8002b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7fe ffde 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8002b78:	61f8      	str	r0, [r7, #28]
        break;
 8002b7a:	e010      	b.n	8002b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb4 <UART_SetConfig+0x56c>)
 8002b7e:	61fb      	str	r3, [r7, #28]
        break;
 8002b80:	e00d      	b.n	8002b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b82:	f7fe ff29 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8002b86:	61f8      	str	r0, [r7, #28]
        break;
 8002b88:	e009      	b.n	8002b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b8e:	61fb      	str	r3, [r7, #28]
        break;
 8002b90:	e005      	b.n	8002b9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d077      	beq.n	8002c94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005a      	lsls	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	441a      	add	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b0f      	cmp	r3, #15
 8002bbe:	d916      	bls.n	8002bee <UART_SetConfig+0x4a6>
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc6:	d212      	bcs.n	8002bee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f023 030f 	bic.w	r3, r3, #15
 8002bd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	8afb      	ldrh	r3, [r7, #22]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	8afa      	ldrh	r2, [r7, #22]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	e052      	b.n	8002c94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bf4:	e04e      	b.n	8002c94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d827      	bhi.n	8002c4e <UART_SetConfig+0x506>
 8002bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002c04 <UART_SetConfig+0x4bc>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c29 	.word	0x08002c29
 8002c08:	08002c31 	.word	0x08002c31
 8002c0c:	08002c39 	.word	0x08002c39
 8002c10:	08002c4f 	.word	0x08002c4f
 8002c14:	08002c3f 	.word	0x08002c3f
 8002c18:	08002c4f 	.word	0x08002c4f
 8002c1c:	08002c4f 	.word	0x08002c4f
 8002c20:	08002c4f 	.word	0x08002c4f
 8002c24:	08002c47 	.word	0x08002c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c28:	f7fe ff6e 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	61f8      	str	r0, [r7, #28]
        break;
 8002c2e:	e014      	b.n	8002c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7fe ff80 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8002c34:	61f8      	str	r0, [r7, #28]
        break;
 8002c36:	e010      	b.n	8002c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c38:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <UART_SetConfig+0x56c>)
 8002c3a:	61fb      	str	r3, [r7, #28]
        break;
 8002c3c:	e00d      	b.n	8002c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3e:	f7fe fecb 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8002c42:	61f8      	str	r0, [r7, #28]
        break;
 8002c44:	e009      	b.n	8002c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c4a:	61fb      	str	r3, [r7, #28]
        break;
 8002c4c:	e005      	b.n	8002c5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c58:	bf00      	nop
    }

    if (pclk != 0U)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d019      	beq.n	8002c94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	085a      	lsrs	r2, r3, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	441a      	add	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	d909      	bls.n	8002c8e <UART_SetConfig+0x546>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c80:	d205      	bcs.n	8002c8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60da      	str	r2, [r3, #12]
 8002c8c:	e002      	b.n	8002c94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ca0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3728      	adds	r7, #40	@ 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cae:	bf00      	nop
 8002cb0:	40008000 	.word	0x40008000
 8002cb4:	00f42400 	.word	0x00f42400

08002cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01a      	beq.n	8002dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002db6:	d10a      	bne.n	8002dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b098      	sub	sp, #96	@ 0x60
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e0c:	f7fd fe08 	bl	8000a20 <HAL_GetTick>
 8002e10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d12e      	bne.n	8002e7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f88c 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d021      	beq.n	8002e7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e6      	bne.n	8002e3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e062      	b.n	8002f44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d149      	bne.n	8002f20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f856 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d03c      	beq.n	8002f20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	623b      	str	r3, [r7, #32]
   return(result);
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e6      	bne.n	8002ea6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3308      	adds	r3, #8
 8002ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ef8:	61fa      	str	r2, [r7, #28]
 8002efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	617b      	str	r3, [r7, #20]
   return(result);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e5      	bne.n	8002ed8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e011      	b.n	8002f44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3758      	adds	r7, #88	@ 0x58
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5c:	e04f      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f64:	d04b      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fd fd5b 	bl	8000a20 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e04e      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d037      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b80      	cmp	r3, #128	@ 0x80
 8002f92:	d034      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b40      	cmp	r3, #64	@ 0x40
 8002f98:	d031      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d110      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2208      	movs	r2, #8
 8002fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f838 	bl	8003026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2208      	movs	r2, #8
 8002fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e029      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fd8:	d111      	bne.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f81e 	bl	8003026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e00f      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	429a      	cmp	r2, r3
 800301a:	d0a0      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003026:	b480      	push	{r7}
 8003028:	b095      	sub	sp, #84	@ 0x54
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800303c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800304c:	643b      	str	r3, [r7, #64]	@ 0x40
 800304e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003052:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e6      	bne.n	800302e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3308      	adds	r3, #8
 8003066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3308      	adds	r3, #8
 800307e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003080:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003082:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e5      	bne.n	8003060 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003098:	2b01      	cmp	r3, #1
 800309a:	d118      	bne.n	80030ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f023 0310 	bic.w	r3, r3, #16
 80030b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	6979      	ldr	r1, [r7, #20]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	613b      	str	r3, [r7, #16]
   return(result);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e6      	bne.n	800309c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030e2:	bf00      	nop
 80030e4:	3754      	adds	r7, #84	@ 0x54
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <std>:
 80030f0:	2300      	movs	r3, #0
 80030f2:	b510      	push	{r4, lr}
 80030f4:	4604      	mov	r4, r0
 80030f6:	e9c0 3300 	strd	r3, r3, [r0]
 80030fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030fe:	6083      	str	r3, [r0, #8]
 8003100:	8181      	strh	r1, [r0, #12]
 8003102:	6643      	str	r3, [r0, #100]	@ 0x64
 8003104:	81c2      	strh	r2, [r0, #14]
 8003106:	6183      	str	r3, [r0, #24]
 8003108:	4619      	mov	r1, r3
 800310a:	2208      	movs	r2, #8
 800310c:	305c      	adds	r0, #92	@ 0x5c
 800310e:	f000 f90f 	bl	8003330 <memset>
 8003112:	4b0d      	ldr	r3, [pc, #52]	@ (8003148 <std+0x58>)
 8003114:	6263      	str	r3, [r4, #36]	@ 0x24
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <std+0x5c>)
 8003118:	62a3      	str	r3, [r4, #40]	@ 0x28
 800311a:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <std+0x60>)
 800311c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800311e:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <std+0x64>)
 8003120:	6323      	str	r3, [r4, #48]	@ 0x30
 8003122:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <std+0x68>)
 8003124:	6224      	str	r4, [r4, #32]
 8003126:	429c      	cmp	r4, r3
 8003128:	d006      	beq.n	8003138 <std+0x48>
 800312a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800312e:	4294      	cmp	r4, r2
 8003130:	d002      	beq.n	8003138 <std+0x48>
 8003132:	33d0      	adds	r3, #208	@ 0xd0
 8003134:	429c      	cmp	r4, r3
 8003136:	d105      	bne.n	8003144 <std+0x54>
 8003138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003140:	f000 b928 	b.w	8003394 <__retarget_lock_init_recursive>
 8003144:	bd10      	pop	{r4, pc}
 8003146:	bf00      	nop
 8003148:	08003651 	.word	0x08003651
 800314c:	08003673 	.word	0x08003673
 8003150:	080036ab 	.word	0x080036ab
 8003154:	080036cf 	.word	0x080036cf
 8003158:	20000114 	.word	0x20000114

0800315c <stdio_exit_handler>:
 800315c:	4a02      	ldr	r2, [pc, #8]	@ (8003168 <stdio_exit_handler+0xc>)
 800315e:	4903      	ldr	r1, [pc, #12]	@ (800316c <stdio_exit_handler+0x10>)
 8003160:	4803      	ldr	r0, [pc, #12]	@ (8003170 <stdio_exit_handler+0x14>)
 8003162:	f000 b869 	b.w	8003238 <_fwalk_sglue>
 8003166:	bf00      	nop
 8003168:	2000000c 	.word	0x2000000c
 800316c:	080035e9 	.word	0x080035e9
 8003170:	2000001c 	.word	0x2000001c

08003174 <cleanup_stdio>:
 8003174:	6841      	ldr	r1, [r0, #4]
 8003176:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <cleanup_stdio+0x34>)
 8003178:	4299      	cmp	r1, r3
 800317a:	b510      	push	{r4, lr}
 800317c:	4604      	mov	r4, r0
 800317e:	d001      	beq.n	8003184 <cleanup_stdio+0x10>
 8003180:	f000 fa32 	bl	80035e8 <_fflush_r>
 8003184:	68a1      	ldr	r1, [r4, #8]
 8003186:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <cleanup_stdio+0x38>)
 8003188:	4299      	cmp	r1, r3
 800318a:	d002      	beq.n	8003192 <cleanup_stdio+0x1e>
 800318c:	4620      	mov	r0, r4
 800318e:	f000 fa2b 	bl	80035e8 <_fflush_r>
 8003192:	68e1      	ldr	r1, [r4, #12]
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <cleanup_stdio+0x3c>)
 8003196:	4299      	cmp	r1, r3
 8003198:	d004      	beq.n	80031a4 <cleanup_stdio+0x30>
 800319a:	4620      	mov	r0, r4
 800319c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a0:	f000 ba22 	b.w	80035e8 <_fflush_r>
 80031a4:	bd10      	pop	{r4, pc}
 80031a6:	bf00      	nop
 80031a8:	20000114 	.word	0x20000114
 80031ac:	2000017c 	.word	0x2000017c
 80031b0:	200001e4 	.word	0x200001e4

080031b4 <global_stdio_init.part.0>:
 80031b4:	b510      	push	{r4, lr}
 80031b6:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <global_stdio_init.part.0+0x30>)
 80031b8:	4c0b      	ldr	r4, [pc, #44]	@ (80031e8 <global_stdio_init.part.0+0x34>)
 80031ba:	4a0c      	ldr	r2, [pc, #48]	@ (80031ec <global_stdio_init.part.0+0x38>)
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	4620      	mov	r0, r4
 80031c0:	2200      	movs	r2, #0
 80031c2:	2104      	movs	r1, #4
 80031c4:	f7ff ff94 	bl	80030f0 <std>
 80031c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80031cc:	2201      	movs	r2, #1
 80031ce:	2109      	movs	r1, #9
 80031d0:	f7ff ff8e 	bl	80030f0 <std>
 80031d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031d8:	2202      	movs	r2, #2
 80031da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031de:	2112      	movs	r1, #18
 80031e0:	f7ff bf86 	b.w	80030f0 <std>
 80031e4:	2000024c 	.word	0x2000024c
 80031e8:	20000114 	.word	0x20000114
 80031ec:	0800315d 	.word	0x0800315d

080031f0 <__sfp_lock_acquire>:
 80031f0:	4801      	ldr	r0, [pc, #4]	@ (80031f8 <__sfp_lock_acquire+0x8>)
 80031f2:	f000 b8d0 	b.w	8003396 <__retarget_lock_acquire_recursive>
 80031f6:	bf00      	nop
 80031f8:	20000251 	.word	0x20000251

080031fc <__sfp_lock_release>:
 80031fc:	4801      	ldr	r0, [pc, #4]	@ (8003204 <__sfp_lock_release+0x8>)
 80031fe:	f000 b8cb 	b.w	8003398 <__retarget_lock_release_recursive>
 8003202:	bf00      	nop
 8003204:	20000251 	.word	0x20000251

08003208 <__sinit>:
 8003208:	b510      	push	{r4, lr}
 800320a:	4604      	mov	r4, r0
 800320c:	f7ff fff0 	bl	80031f0 <__sfp_lock_acquire>
 8003210:	6a23      	ldr	r3, [r4, #32]
 8003212:	b11b      	cbz	r3, 800321c <__sinit+0x14>
 8003214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003218:	f7ff bff0 	b.w	80031fc <__sfp_lock_release>
 800321c:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <__sinit+0x28>)
 800321e:	6223      	str	r3, [r4, #32]
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__sinit+0x2c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f5      	bne.n	8003214 <__sinit+0xc>
 8003228:	f7ff ffc4 	bl	80031b4 <global_stdio_init.part.0>
 800322c:	e7f2      	b.n	8003214 <__sinit+0xc>
 800322e:	bf00      	nop
 8003230:	08003175 	.word	0x08003175
 8003234:	2000024c 	.word	0x2000024c

08003238 <_fwalk_sglue>:
 8003238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800323c:	4607      	mov	r7, r0
 800323e:	4688      	mov	r8, r1
 8003240:	4614      	mov	r4, r2
 8003242:	2600      	movs	r6, #0
 8003244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003248:	f1b9 0901 	subs.w	r9, r9, #1
 800324c:	d505      	bpl.n	800325a <_fwalk_sglue+0x22>
 800324e:	6824      	ldr	r4, [r4, #0]
 8003250:	2c00      	cmp	r4, #0
 8003252:	d1f7      	bne.n	8003244 <_fwalk_sglue+0xc>
 8003254:	4630      	mov	r0, r6
 8003256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800325a:	89ab      	ldrh	r3, [r5, #12]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d907      	bls.n	8003270 <_fwalk_sglue+0x38>
 8003260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003264:	3301      	adds	r3, #1
 8003266:	d003      	beq.n	8003270 <_fwalk_sglue+0x38>
 8003268:	4629      	mov	r1, r5
 800326a:	4638      	mov	r0, r7
 800326c:	47c0      	blx	r8
 800326e:	4306      	orrs	r6, r0
 8003270:	3568      	adds	r5, #104	@ 0x68
 8003272:	e7e9      	b.n	8003248 <_fwalk_sglue+0x10>

08003274 <_puts_r>:
 8003274:	6a03      	ldr	r3, [r0, #32]
 8003276:	b570      	push	{r4, r5, r6, lr}
 8003278:	6884      	ldr	r4, [r0, #8]
 800327a:	4605      	mov	r5, r0
 800327c:	460e      	mov	r6, r1
 800327e:	b90b      	cbnz	r3, 8003284 <_puts_r+0x10>
 8003280:	f7ff ffc2 	bl	8003208 <__sinit>
 8003284:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003286:	07db      	lsls	r3, r3, #31
 8003288:	d405      	bmi.n	8003296 <_puts_r+0x22>
 800328a:	89a3      	ldrh	r3, [r4, #12]
 800328c:	0598      	lsls	r0, r3, #22
 800328e:	d402      	bmi.n	8003296 <_puts_r+0x22>
 8003290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003292:	f000 f880 	bl	8003396 <__retarget_lock_acquire_recursive>
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	0719      	lsls	r1, r3, #28
 800329a:	d502      	bpl.n	80032a2 <_puts_r+0x2e>
 800329c:	6923      	ldr	r3, [r4, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d135      	bne.n	800330e <_puts_r+0x9a>
 80032a2:	4621      	mov	r1, r4
 80032a4:	4628      	mov	r0, r5
 80032a6:	f000 fa55 	bl	8003754 <__swsetup_r>
 80032aa:	b380      	cbz	r0, 800330e <_puts_r+0x9a>
 80032ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80032b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032b2:	07da      	lsls	r2, r3, #31
 80032b4:	d405      	bmi.n	80032c2 <_puts_r+0x4e>
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	059b      	lsls	r3, r3, #22
 80032ba:	d402      	bmi.n	80032c2 <_puts_r+0x4e>
 80032bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032be:	f000 f86b 	bl	8003398 <__retarget_lock_release_recursive>
 80032c2:	4628      	mov	r0, r5
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da04      	bge.n	80032d4 <_puts_r+0x60>
 80032ca:	69a2      	ldr	r2, [r4, #24]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	dc17      	bgt.n	8003300 <_puts_r+0x8c>
 80032d0:	290a      	cmp	r1, #10
 80032d2:	d015      	beq.n	8003300 <_puts_r+0x8c>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	6022      	str	r2, [r4, #0]
 80032da:	7019      	strb	r1, [r3, #0]
 80032dc:	68a3      	ldr	r3, [r4, #8]
 80032de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	2900      	cmp	r1, #0
 80032e8:	d1ed      	bne.n	80032c6 <_puts_r+0x52>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da11      	bge.n	8003312 <_puts_r+0x9e>
 80032ee:	4622      	mov	r2, r4
 80032f0:	210a      	movs	r1, #10
 80032f2:	4628      	mov	r0, r5
 80032f4:	f000 f9ef 	bl	80036d6 <__swbuf_r>
 80032f8:	3001      	adds	r0, #1
 80032fa:	d0d7      	beq.n	80032ac <_puts_r+0x38>
 80032fc:	250a      	movs	r5, #10
 80032fe:	e7d7      	b.n	80032b0 <_puts_r+0x3c>
 8003300:	4622      	mov	r2, r4
 8003302:	4628      	mov	r0, r5
 8003304:	f000 f9e7 	bl	80036d6 <__swbuf_r>
 8003308:	3001      	adds	r0, #1
 800330a:	d1e7      	bne.n	80032dc <_puts_r+0x68>
 800330c:	e7ce      	b.n	80032ac <_puts_r+0x38>
 800330e:	3e01      	subs	r6, #1
 8003310:	e7e4      	b.n	80032dc <_puts_r+0x68>
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	6022      	str	r2, [r4, #0]
 8003318:	220a      	movs	r2, #10
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e7ee      	b.n	80032fc <_puts_r+0x88>
	...

08003320 <puts>:
 8003320:	4b02      	ldr	r3, [pc, #8]	@ (800332c <puts+0xc>)
 8003322:	4601      	mov	r1, r0
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	f7ff bfa5 	b.w	8003274 <_puts_r>
 800332a:	bf00      	nop
 800332c:	20000018 	.word	0x20000018

08003330 <memset>:
 8003330:	4402      	add	r2, r0
 8003332:	4603      	mov	r3, r0
 8003334:	4293      	cmp	r3, r2
 8003336:	d100      	bne.n	800333a <memset+0xa>
 8003338:	4770      	bx	lr
 800333a:	f803 1b01 	strb.w	r1, [r3], #1
 800333e:	e7f9      	b.n	8003334 <memset+0x4>

08003340 <__errno>:
 8003340:	4b01      	ldr	r3, [pc, #4]	@ (8003348 <__errno+0x8>)
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000018 	.word	0x20000018

0800334c <__libc_init_array>:
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d0d      	ldr	r5, [pc, #52]	@ (8003384 <__libc_init_array+0x38>)
 8003350:	4c0d      	ldr	r4, [pc, #52]	@ (8003388 <__libc_init_array+0x3c>)
 8003352:	1b64      	subs	r4, r4, r5
 8003354:	10a4      	asrs	r4, r4, #2
 8003356:	2600      	movs	r6, #0
 8003358:	42a6      	cmp	r6, r4
 800335a:	d109      	bne.n	8003370 <__libc_init_array+0x24>
 800335c:	4d0b      	ldr	r5, [pc, #44]	@ (800338c <__libc_init_array+0x40>)
 800335e:	4c0c      	ldr	r4, [pc, #48]	@ (8003390 <__libc_init_array+0x44>)
 8003360:	f000 fb72 	bl	8003a48 <_init>
 8003364:	1b64      	subs	r4, r4, r5
 8003366:	10a4      	asrs	r4, r4, #2
 8003368:	2600      	movs	r6, #0
 800336a:	42a6      	cmp	r6, r4
 800336c:	d105      	bne.n	800337a <__libc_init_array+0x2e>
 800336e:	bd70      	pop	{r4, r5, r6, pc}
 8003370:	f855 3b04 	ldr.w	r3, [r5], #4
 8003374:	4798      	blx	r3
 8003376:	3601      	adds	r6, #1
 8003378:	e7ee      	b.n	8003358 <__libc_init_array+0xc>
 800337a:	f855 3b04 	ldr.w	r3, [r5], #4
 800337e:	4798      	blx	r3
 8003380:	3601      	adds	r6, #1
 8003382:	e7f2      	b.n	800336a <__libc_init_array+0x1e>
 8003384:	08003abc 	.word	0x08003abc
 8003388:	08003abc 	.word	0x08003abc
 800338c:	08003abc 	.word	0x08003abc
 8003390:	08003ac0 	.word	0x08003ac0

08003394 <__retarget_lock_init_recursive>:
 8003394:	4770      	bx	lr

08003396 <__retarget_lock_acquire_recursive>:
 8003396:	4770      	bx	lr

08003398 <__retarget_lock_release_recursive>:
 8003398:	4770      	bx	lr
	...

0800339c <sbrk_aligned>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4e0f      	ldr	r6, [pc, #60]	@ (80033dc <sbrk_aligned+0x40>)
 80033a0:	460c      	mov	r4, r1
 80033a2:	6831      	ldr	r1, [r6, #0]
 80033a4:	4605      	mov	r5, r0
 80033a6:	b911      	cbnz	r1, 80033ae <sbrk_aligned+0x12>
 80033a8:	f000 fac0 	bl	800392c <_sbrk_r>
 80033ac:	6030      	str	r0, [r6, #0]
 80033ae:	4621      	mov	r1, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 fabb 	bl	800392c <_sbrk_r>
 80033b6:	1c43      	adds	r3, r0, #1
 80033b8:	d103      	bne.n	80033c2 <sbrk_aligned+0x26>
 80033ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80033be:	4620      	mov	r0, r4
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
 80033c2:	1cc4      	adds	r4, r0, #3
 80033c4:	f024 0403 	bic.w	r4, r4, #3
 80033c8:	42a0      	cmp	r0, r4
 80033ca:	d0f8      	beq.n	80033be <sbrk_aligned+0x22>
 80033cc:	1a21      	subs	r1, r4, r0
 80033ce:	4628      	mov	r0, r5
 80033d0:	f000 faac 	bl	800392c <_sbrk_r>
 80033d4:	3001      	adds	r0, #1
 80033d6:	d1f2      	bne.n	80033be <sbrk_aligned+0x22>
 80033d8:	e7ef      	b.n	80033ba <sbrk_aligned+0x1e>
 80033da:	bf00      	nop
 80033dc:	20000254 	.word	0x20000254

080033e0 <_malloc_r>:
 80033e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033e4:	1ccd      	adds	r5, r1, #3
 80033e6:	f025 0503 	bic.w	r5, r5, #3
 80033ea:	3508      	adds	r5, #8
 80033ec:	2d0c      	cmp	r5, #12
 80033ee:	bf38      	it	cc
 80033f0:	250c      	movcc	r5, #12
 80033f2:	2d00      	cmp	r5, #0
 80033f4:	4606      	mov	r6, r0
 80033f6:	db01      	blt.n	80033fc <_malloc_r+0x1c>
 80033f8:	42a9      	cmp	r1, r5
 80033fa:	d904      	bls.n	8003406 <_malloc_r+0x26>
 80033fc:	230c      	movs	r3, #12
 80033fe:	6033      	str	r3, [r6, #0]
 8003400:	2000      	movs	r0, #0
 8003402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034dc <_malloc_r+0xfc>
 800340a:	f000 f915 	bl	8003638 <__malloc_lock>
 800340e:	f8d8 3000 	ldr.w	r3, [r8]
 8003412:	461c      	mov	r4, r3
 8003414:	bb44      	cbnz	r4, 8003468 <_malloc_r+0x88>
 8003416:	4629      	mov	r1, r5
 8003418:	4630      	mov	r0, r6
 800341a:	f7ff ffbf 	bl	800339c <sbrk_aligned>
 800341e:	1c43      	adds	r3, r0, #1
 8003420:	4604      	mov	r4, r0
 8003422:	d158      	bne.n	80034d6 <_malloc_r+0xf6>
 8003424:	f8d8 4000 	ldr.w	r4, [r8]
 8003428:	4627      	mov	r7, r4
 800342a:	2f00      	cmp	r7, #0
 800342c:	d143      	bne.n	80034b6 <_malloc_r+0xd6>
 800342e:	2c00      	cmp	r4, #0
 8003430:	d04b      	beq.n	80034ca <_malloc_r+0xea>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	4639      	mov	r1, r7
 8003436:	4630      	mov	r0, r6
 8003438:	eb04 0903 	add.w	r9, r4, r3
 800343c:	f000 fa76 	bl	800392c <_sbrk_r>
 8003440:	4581      	cmp	r9, r0
 8003442:	d142      	bne.n	80034ca <_malloc_r+0xea>
 8003444:	6821      	ldr	r1, [r4, #0]
 8003446:	1a6d      	subs	r5, r5, r1
 8003448:	4629      	mov	r1, r5
 800344a:	4630      	mov	r0, r6
 800344c:	f7ff ffa6 	bl	800339c <sbrk_aligned>
 8003450:	3001      	adds	r0, #1
 8003452:	d03a      	beq.n	80034ca <_malloc_r+0xea>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	442b      	add	r3, r5
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	f8d8 3000 	ldr.w	r3, [r8]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	bb62      	cbnz	r2, 80034bc <_malloc_r+0xdc>
 8003462:	f8c8 7000 	str.w	r7, [r8]
 8003466:	e00f      	b.n	8003488 <_malloc_r+0xa8>
 8003468:	6822      	ldr	r2, [r4, #0]
 800346a:	1b52      	subs	r2, r2, r5
 800346c:	d420      	bmi.n	80034b0 <_malloc_r+0xd0>
 800346e:	2a0b      	cmp	r2, #11
 8003470:	d917      	bls.n	80034a2 <_malloc_r+0xc2>
 8003472:	1961      	adds	r1, r4, r5
 8003474:	42a3      	cmp	r3, r4
 8003476:	6025      	str	r5, [r4, #0]
 8003478:	bf18      	it	ne
 800347a:	6059      	strne	r1, [r3, #4]
 800347c:	6863      	ldr	r3, [r4, #4]
 800347e:	bf08      	it	eq
 8003480:	f8c8 1000 	streq.w	r1, [r8]
 8003484:	5162      	str	r2, [r4, r5]
 8003486:	604b      	str	r3, [r1, #4]
 8003488:	4630      	mov	r0, r6
 800348a:	f000 f8db 	bl	8003644 <__malloc_unlock>
 800348e:	f104 000b 	add.w	r0, r4, #11
 8003492:	1d23      	adds	r3, r4, #4
 8003494:	f020 0007 	bic.w	r0, r0, #7
 8003498:	1ac2      	subs	r2, r0, r3
 800349a:	bf1c      	itt	ne
 800349c:	1a1b      	subne	r3, r3, r0
 800349e:	50a3      	strne	r3, [r4, r2]
 80034a0:	e7af      	b.n	8003402 <_malloc_r+0x22>
 80034a2:	6862      	ldr	r2, [r4, #4]
 80034a4:	42a3      	cmp	r3, r4
 80034a6:	bf0c      	ite	eq
 80034a8:	f8c8 2000 	streq.w	r2, [r8]
 80034ac:	605a      	strne	r2, [r3, #4]
 80034ae:	e7eb      	b.n	8003488 <_malloc_r+0xa8>
 80034b0:	4623      	mov	r3, r4
 80034b2:	6864      	ldr	r4, [r4, #4]
 80034b4:	e7ae      	b.n	8003414 <_malloc_r+0x34>
 80034b6:	463c      	mov	r4, r7
 80034b8:	687f      	ldr	r7, [r7, #4]
 80034ba:	e7b6      	b.n	800342a <_malloc_r+0x4a>
 80034bc:	461a      	mov	r2, r3
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	42a3      	cmp	r3, r4
 80034c2:	d1fb      	bne.n	80034bc <_malloc_r+0xdc>
 80034c4:	2300      	movs	r3, #0
 80034c6:	6053      	str	r3, [r2, #4]
 80034c8:	e7de      	b.n	8003488 <_malloc_r+0xa8>
 80034ca:	230c      	movs	r3, #12
 80034cc:	6033      	str	r3, [r6, #0]
 80034ce:	4630      	mov	r0, r6
 80034d0:	f000 f8b8 	bl	8003644 <__malloc_unlock>
 80034d4:	e794      	b.n	8003400 <_malloc_r+0x20>
 80034d6:	6005      	str	r5, [r0, #0]
 80034d8:	e7d6      	b.n	8003488 <_malloc_r+0xa8>
 80034da:	bf00      	nop
 80034dc:	20000258 	.word	0x20000258

080034e0 <__sflush_r>:
 80034e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e8:	0716      	lsls	r6, r2, #28
 80034ea:	4605      	mov	r5, r0
 80034ec:	460c      	mov	r4, r1
 80034ee:	d454      	bmi.n	800359a <__sflush_r+0xba>
 80034f0:	684b      	ldr	r3, [r1, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	dc02      	bgt.n	80034fc <__sflush_r+0x1c>
 80034f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	dd48      	ble.n	800358e <__sflush_r+0xae>
 80034fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034fe:	2e00      	cmp	r6, #0
 8003500:	d045      	beq.n	800358e <__sflush_r+0xae>
 8003502:	2300      	movs	r3, #0
 8003504:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003508:	682f      	ldr	r7, [r5, #0]
 800350a:	6a21      	ldr	r1, [r4, #32]
 800350c:	602b      	str	r3, [r5, #0]
 800350e:	d030      	beq.n	8003572 <__sflush_r+0x92>
 8003510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d505      	bpl.n	8003524 <__sflush_r+0x44>
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800351e:	b10b      	cbz	r3, 8003524 <__sflush_r+0x44>
 8003520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003522:	1ad2      	subs	r2, r2, r3
 8003524:	2300      	movs	r3, #0
 8003526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003528:	6a21      	ldr	r1, [r4, #32]
 800352a:	4628      	mov	r0, r5
 800352c:	47b0      	blx	r6
 800352e:	1c43      	adds	r3, r0, #1
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	d106      	bne.n	8003542 <__sflush_r+0x62>
 8003534:	6829      	ldr	r1, [r5, #0]
 8003536:	291d      	cmp	r1, #29
 8003538:	d82b      	bhi.n	8003592 <__sflush_r+0xb2>
 800353a:	4a2a      	ldr	r2, [pc, #168]	@ (80035e4 <__sflush_r+0x104>)
 800353c:	40ca      	lsrs	r2, r1
 800353e:	07d6      	lsls	r6, r2, #31
 8003540:	d527      	bpl.n	8003592 <__sflush_r+0xb2>
 8003542:	2200      	movs	r2, #0
 8003544:	6062      	str	r2, [r4, #4]
 8003546:	04d9      	lsls	r1, r3, #19
 8003548:	6922      	ldr	r2, [r4, #16]
 800354a:	6022      	str	r2, [r4, #0]
 800354c:	d504      	bpl.n	8003558 <__sflush_r+0x78>
 800354e:	1c42      	adds	r2, r0, #1
 8003550:	d101      	bne.n	8003556 <__sflush_r+0x76>
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	b903      	cbnz	r3, 8003558 <__sflush_r+0x78>
 8003556:	6560      	str	r0, [r4, #84]	@ 0x54
 8003558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800355a:	602f      	str	r7, [r5, #0]
 800355c:	b1b9      	cbz	r1, 800358e <__sflush_r+0xae>
 800355e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003562:	4299      	cmp	r1, r3
 8003564:	d002      	beq.n	800356c <__sflush_r+0x8c>
 8003566:	4628      	mov	r0, r5
 8003568:	f000 fa24 	bl	80039b4 <_free_r>
 800356c:	2300      	movs	r3, #0
 800356e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003570:	e00d      	b.n	800358e <__sflush_r+0xae>
 8003572:	2301      	movs	r3, #1
 8003574:	4628      	mov	r0, r5
 8003576:	47b0      	blx	r6
 8003578:	4602      	mov	r2, r0
 800357a:	1c50      	adds	r0, r2, #1
 800357c:	d1c9      	bne.n	8003512 <__sflush_r+0x32>
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0c6      	beq.n	8003512 <__sflush_r+0x32>
 8003584:	2b1d      	cmp	r3, #29
 8003586:	d001      	beq.n	800358c <__sflush_r+0xac>
 8003588:	2b16      	cmp	r3, #22
 800358a:	d11e      	bne.n	80035ca <__sflush_r+0xea>
 800358c:	602f      	str	r7, [r5, #0]
 800358e:	2000      	movs	r0, #0
 8003590:	e022      	b.n	80035d8 <__sflush_r+0xf8>
 8003592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003596:	b21b      	sxth	r3, r3
 8003598:	e01b      	b.n	80035d2 <__sflush_r+0xf2>
 800359a:	690f      	ldr	r7, [r1, #16]
 800359c:	2f00      	cmp	r7, #0
 800359e:	d0f6      	beq.n	800358e <__sflush_r+0xae>
 80035a0:	0793      	lsls	r3, r2, #30
 80035a2:	680e      	ldr	r6, [r1, #0]
 80035a4:	bf08      	it	eq
 80035a6:	694b      	ldreq	r3, [r1, #20]
 80035a8:	600f      	str	r7, [r1, #0]
 80035aa:	bf18      	it	ne
 80035ac:	2300      	movne	r3, #0
 80035ae:	eba6 0807 	sub.w	r8, r6, r7
 80035b2:	608b      	str	r3, [r1, #8]
 80035b4:	f1b8 0f00 	cmp.w	r8, #0
 80035b8:	dde9      	ble.n	800358e <__sflush_r+0xae>
 80035ba:	6a21      	ldr	r1, [r4, #32]
 80035bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80035be:	4643      	mov	r3, r8
 80035c0:	463a      	mov	r2, r7
 80035c2:	4628      	mov	r0, r5
 80035c4:	47b0      	blx	r6
 80035c6:	2800      	cmp	r0, #0
 80035c8:	dc08      	bgt.n	80035dc <__sflush_r+0xfc>
 80035ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035dc:	4407      	add	r7, r0
 80035de:	eba8 0800 	sub.w	r8, r8, r0
 80035e2:	e7e7      	b.n	80035b4 <__sflush_r+0xd4>
 80035e4:	20400001 	.word	0x20400001

080035e8 <_fflush_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	690b      	ldr	r3, [r1, #16]
 80035ec:	4605      	mov	r5, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	b913      	cbnz	r3, 80035f8 <_fflush_r+0x10>
 80035f2:	2500      	movs	r5, #0
 80035f4:	4628      	mov	r0, r5
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	b118      	cbz	r0, 8003602 <_fflush_r+0x1a>
 80035fa:	6a03      	ldr	r3, [r0, #32]
 80035fc:	b90b      	cbnz	r3, 8003602 <_fflush_r+0x1a>
 80035fe:	f7ff fe03 	bl	8003208 <__sinit>
 8003602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f3      	beq.n	80035f2 <_fflush_r+0xa>
 800360a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800360c:	07d0      	lsls	r0, r2, #31
 800360e:	d404      	bmi.n	800361a <_fflush_r+0x32>
 8003610:	0599      	lsls	r1, r3, #22
 8003612:	d402      	bmi.n	800361a <_fflush_r+0x32>
 8003614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003616:	f7ff febe 	bl	8003396 <__retarget_lock_acquire_recursive>
 800361a:	4628      	mov	r0, r5
 800361c:	4621      	mov	r1, r4
 800361e:	f7ff ff5f 	bl	80034e0 <__sflush_r>
 8003622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003624:	07da      	lsls	r2, r3, #31
 8003626:	4605      	mov	r5, r0
 8003628:	d4e4      	bmi.n	80035f4 <_fflush_r+0xc>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	059b      	lsls	r3, r3, #22
 800362e:	d4e1      	bmi.n	80035f4 <_fflush_r+0xc>
 8003630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003632:	f7ff feb1 	bl	8003398 <__retarget_lock_release_recursive>
 8003636:	e7dd      	b.n	80035f4 <_fflush_r+0xc>

08003638 <__malloc_lock>:
 8003638:	4801      	ldr	r0, [pc, #4]	@ (8003640 <__malloc_lock+0x8>)
 800363a:	f7ff beac 	b.w	8003396 <__retarget_lock_acquire_recursive>
 800363e:	bf00      	nop
 8003640:	20000250 	.word	0x20000250

08003644 <__malloc_unlock>:
 8003644:	4801      	ldr	r0, [pc, #4]	@ (800364c <__malloc_unlock+0x8>)
 8003646:	f7ff bea7 	b.w	8003398 <__retarget_lock_release_recursive>
 800364a:	bf00      	nop
 800364c:	20000250 	.word	0x20000250

08003650 <__sread>:
 8003650:	b510      	push	{r4, lr}
 8003652:	460c      	mov	r4, r1
 8003654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003658:	f000 f956 	bl	8003908 <_read_r>
 800365c:	2800      	cmp	r0, #0
 800365e:	bfab      	itete	ge
 8003660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003662:	89a3      	ldrhlt	r3, [r4, #12]
 8003664:	181b      	addge	r3, r3, r0
 8003666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800366a:	bfac      	ite	ge
 800366c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800366e:	81a3      	strhlt	r3, [r4, #12]
 8003670:	bd10      	pop	{r4, pc}

08003672 <__swrite>:
 8003672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003676:	461f      	mov	r7, r3
 8003678:	898b      	ldrh	r3, [r1, #12]
 800367a:	05db      	lsls	r3, r3, #23
 800367c:	4605      	mov	r5, r0
 800367e:	460c      	mov	r4, r1
 8003680:	4616      	mov	r6, r2
 8003682:	d505      	bpl.n	8003690 <__swrite+0x1e>
 8003684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003688:	2302      	movs	r3, #2
 800368a:	2200      	movs	r2, #0
 800368c:	f000 f92a 	bl	80038e4 <_lseek_r>
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	4632      	mov	r2, r6
 800369e:	463b      	mov	r3, r7
 80036a0:	4628      	mov	r0, r5
 80036a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036a6:	f000 b951 	b.w	800394c <_write_r>

080036aa <__sseek>:
 80036aa:	b510      	push	{r4, lr}
 80036ac:	460c      	mov	r4, r1
 80036ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b2:	f000 f917 	bl	80038e4 <_lseek_r>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	bf15      	itete	ne
 80036bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80036be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80036c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80036c6:	81a3      	strheq	r3, [r4, #12]
 80036c8:	bf18      	it	ne
 80036ca:	81a3      	strhne	r3, [r4, #12]
 80036cc:	bd10      	pop	{r4, pc}

080036ce <__sclose>:
 80036ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d2:	f000 b94d 	b.w	8003970 <_close_r>

080036d6 <__swbuf_r>:
 80036d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d8:	460e      	mov	r6, r1
 80036da:	4614      	mov	r4, r2
 80036dc:	4605      	mov	r5, r0
 80036de:	b118      	cbz	r0, 80036e8 <__swbuf_r+0x12>
 80036e0:	6a03      	ldr	r3, [r0, #32]
 80036e2:	b90b      	cbnz	r3, 80036e8 <__swbuf_r+0x12>
 80036e4:	f7ff fd90 	bl	8003208 <__sinit>
 80036e8:	69a3      	ldr	r3, [r4, #24]
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	071a      	lsls	r2, r3, #28
 80036f0:	d501      	bpl.n	80036f6 <__swbuf_r+0x20>
 80036f2:	6923      	ldr	r3, [r4, #16]
 80036f4:	b943      	cbnz	r3, 8003708 <__swbuf_r+0x32>
 80036f6:	4621      	mov	r1, r4
 80036f8:	4628      	mov	r0, r5
 80036fa:	f000 f82b 	bl	8003754 <__swsetup_r>
 80036fe:	b118      	cbz	r0, 8003708 <__swbuf_r+0x32>
 8003700:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003704:	4638      	mov	r0, r7
 8003706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	6922      	ldr	r2, [r4, #16]
 800370c:	1a98      	subs	r0, r3, r2
 800370e:	6963      	ldr	r3, [r4, #20]
 8003710:	b2f6      	uxtb	r6, r6
 8003712:	4283      	cmp	r3, r0
 8003714:	4637      	mov	r7, r6
 8003716:	dc05      	bgt.n	8003724 <__swbuf_r+0x4e>
 8003718:	4621      	mov	r1, r4
 800371a:	4628      	mov	r0, r5
 800371c:	f7ff ff64 	bl	80035e8 <_fflush_r>
 8003720:	2800      	cmp	r0, #0
 8003722:	d1ed      	bne.n	8003700 <__swbuf_r+0x2a>
 8003724:	68a3      	ldr	r3, [r4, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	60a3      	str	r3, [r4, #8]
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	6022      	str	r2, [r4, #0]
 8003730:	701e      	strb	r6, [r3, #0]
 8003732:	6962      	ldr	r2, [r4, #20]
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	429a      	cmp	r2, r3
 8003738:	d004      	beq.n	8003744 <__swbuf_r+0x6e>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	07db      	lsls	r3, r3, #31
 800373e:	d5e1      	bpl.n	8003704 <__swbuf_r+0x2e>
 8003740:	2e0a      	cmp	r6, #10
 8003742:	d1df      	bne.n	8003704 <__swbuf_r+0x2e>
 8003744:	4621      	mov	r1, r4
 8003746:	4628      	mov	r0, r5
 8003748:	f7ff ff4e 	bl	80035e8 <_fflush_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	d0d9      	beq.n	8003704 <__swbuf_r+0x2e>
 8003750:	e7d6      	b.n	8003700 <__swbuf_r+0x2a>
	...

08003754 <__swsetup_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4b29      	ldr	r3, [pc, #164]	@ (80037fc <__swsetup_r+0xa8>)
 8003758:	4605      	mov	r5, r0
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	460c      	mov	r4, r1
 800375e:	b118      	cbz	r0, 8003768 <__swsetup_r+0x14>
 8003760:	6a03      	ldr	r3, [r0, #32]
 8003762:	b90b      	cbnz	r3, 8003768 <__swsetup_r+0x14>
 8003764:	f7ff fd50 	bl	8003208 <__sinit>
 8003768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800376c:	0719      	lsls	r1, r3, #28
 800376e:	d422      	bmi.n	80037b6 <__swsetup_r+0x62>
 8003770:	06da      	lsls	r2, r3, #27
 8003772:	d407      	bmi.n	8003784 <__swsetup_r+0x30>
 8003774:	2209      	movs	r2, #9
 8003776:	602a      	str	r2, [r5, #0]
 8003778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800377c:	81a3      	strh	r3, [r4, #12]
 800377e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003782:	e033      	b.n	80037ec <__swsetup_r+0x98>
 8003784:	0758      	lsls	r0, r3, #29
 8003786:	d512      	bpl.n	80037ae <__swsetup_r+0x5a>
 8003788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800378a:	b141      	cbz	r1, 800379e <__swsetup_r+0x4a>
 800378c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003790:	4299      	cmp	r1, r3
 8003792:	d002      	beq.n	800379a <__swsetup_r+0x46>
 8003794:	4628      	mov	r0, r5
 8003796:	f000 f90d 	bl	80039b4 <_free_r>
 800379a:	2300      	movs	r3, #0
 800379c:	6363      	str	r3, [r4, #52]	@ 0x34
 800379e:	89a3      	ldrh	r3, [r4, #12]
 80037a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037a4:	81a3      	strh	r3, [r4, #12]
 80037a6:	2300      	movs	r3, #0
 80037a8:	6063      	str	r3, [r4, #4]
 80037aa:	6923      	ldr	r3, [r4, #16]
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	f043 0308 	orr.w	r3, r3, #8
 80037b4:	81a3      	strh	r3, [r4, #12]
 80037b6:	6923      	ldr	r3, [r4, #16]
 80037b8:	b94b      	cbnz	r3, 80037ce <__swsetup_r+0x7a>
 80037ba:	89a3      	ldrh	r3, [r4, #12]
 80037bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80037c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c4:	d003      	beq.n	80037ce <__swsetup_r+0x7a>
 80037c6:	4621      	mov	r1, r4
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 f83f 	bl	800384c <__smakebuf_r>
 80037ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d2:	f013 0201 	ands.w	r2, r3, #1
 80037d6:	d00a      	beq.n	80037ee <__swsetup_r+0x9a>
 80037d8:	2200      	movs	r2, #0
 80037da:	60a2      	str	r2, [r4, #8]
 80037dc:	6962      	ldr	r2, [r4, #20]
 80037de:	4252      	negs	r2, r2
 80037e0:	61a2      	str	r2, [r4, #24]
 80037e2:	6922      	ldr	r2, [r4, #16]
 80037e4:	b942      	cbnz	r2, 80037f8 <__swsetup_r+0xa4>
 80037e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80037ea:	d1c5      	bne.n	8003778 <__swsetup_r+0x24>
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
 80037ee:	0799      	lsls	r1, r3, #30
 80037f0:	bf58      	it	pl
 80037f2:	6962      	ldrpl	r2, [r4, #20]
 80037f4:	60a2      	str	r2, [r4, #8]
 80037f6:	e7f4      	b.n	80037e2 <__swsetup_r+0x8e>
 80037f8:	2000      	movs	r0, #0
 80037fa:	e7f7      	b.n	80037ec <__swsetup_r+0x98>
 80037fc:	20000018 	.word	0x20000018

08003800 <__swhatbuf_r>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	460c      	mov	r4, r1
 8003804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003808:	2900      	cmp	r1, #0
 800380a:	b096      	sub	sp, #88	@ 0x58
 800380c:	4615      	mov	r5, r2
 800380e:	461e      	mov	r6, r3
 8003810:	da0d      	bge.n	800382e <__swhatbuf_r+0x2e>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	bf14      	ite	ne
 800381e:	2340      	movne	r3, #64	@ 0x40
 8003820:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003824:	2000      	movs	r0, #0
 8003826:	6031      	str	r1, [r6, #0]
 8003828:	602b      	str	r3, [r5, #0]
 800382a:	b016      	add	sp, #88	@ 0x58
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	466a      	mov	r2, sp
 8003830:	f000 f8ae 	bl	8003990 <_fstat_r>
 8003834:	2800      	cmp	r0, #0
 8003836:	dbec      	blt.n	8003812 <__swhatbuf_r+0x12>
 8003838:	9901      	ldr	r1, [sp, #4]
 800383a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800383e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003842:	4259      	negs	r1, r3
 8003844:	4159      	adcs	r1, r3
 8003846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800384a:	e7eb      	b.n	8003824 <__swhatbuf_r+0x24>

0800384c <__smakebuf_r>:
 800384c:	898b      	ldrh	r3, [r1, #12]
 800384e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003850:	079d      	lsls	r5, r3, #30
 8003852:	4606      	mov	r6, r0
 8003854:	460c      	mov	r4, r1
 8003856:	d507      	bpl.n	8003868 <__smakebuf_r+0x1c>
 8003858:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	6123      	str	r3, [r4, #16]
 8003860:	2301      	movs	r3, #1
 8003862:	6163      	str	r3, [r4, #20]
 8003864:	b003      	add	sp, #12
 8003866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003868:	ab01      	add	r3, sp, #4
 800386a:	466a      	mov	r2, sp
 800386c:	f7ff ffc8 	bl	8003800 <__swhatbuf_r>
 8003870:	9f00      	ldr	r7, [sp, #0]
 8003872:	4605      	mov	r5, r0
 8003874:	4639      	mov	r1, r7
 8003876:	4630      	mov	r0, r6
 8003878:	f7ff fdb2 	bl	80033e0 <_malloc_r>
 800387c:	b948      	cbnz	r0, 8003892 <__smakebuf_r+0x46>
 800387e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003882:	059a      	lsls	r2, r3, #22
 8003884:	d4ee      	bmi.n	8003864 <__smakebuf_r+0x18>
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	f043 0302 	orr.w	r3, r3, #2
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	e7e2      	b.n	8003858 <__smakebuf_r+0xc>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	6020      	str	r0, [r4, #0]
 8003896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	9b01      	ldr	r3, [sp, #4]
 800389e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80038a2:	b15b      	cbz	r3, 80038bc <__smakebuf_r+0x70>
 80038a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038a8:	4630      	mov	r0, r6
 80038aa:	f000 f80b 	bl	80038c4 <_isatty_r>
 80038ae:	b128      	cbz	r0, 80038bc <__smakebuf_r+0x70>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	431d      	orrs	r5, r3
 80038c0:	81a5      	strh	r5, [r4, #12]
 80038c2:	e7cf      	b.n	8003864 <__smakebuf_r+0x18>

080038c4 <_isatty_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4d06      	ldr	r5, [pc, #24]	@ (80038e0 <_isatty_r+0x1c>)
 80038c8:	2300      	movs	r3, #0
 80038ca:	4604      	mov	r4, r0
 80038cc:	4608      	mov	r0, r1
 80038ce:	602b      	str	r3, [r5, #0]
 80038d0:	f7fc ffb4 	bl	800083c <_isatty>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d102      	bne.n	80038de <_isatty_r+0x1a>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	b103      	cbz	r3, 80038de <_isatty_r+0x1a>
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	2000025c 	.word	0x2000025c

080038e4 <_lseek_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d07      	ldr	r5, [pc, #28]	@ (8003904 <_lseek_r+0x20>)
 80038e8:	4604      	mov	r4, r0
 80038ea:	4608      	mov	r0, r1
 80038ec:	4611      	mov	r1, r2
 80038ee:	2200      	movs	r2, #0
 80038f0:	602a      	str	r2, [r5, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f7fc ffad 	bl	8000852 <_lseek>
 80038f8:	1c43      	adds	r3, r0, #1
 80038fa:	d102      	bne.n	8003902 <_lseek_r+0x1e>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	b103      	cbz	r3, 8003902 <_lseek_r+0x1e>
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	2000025c 	.word	0x2000025c

08003908 <_read_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4d07      	ldr	r5, [pc, #28]	@ (8003928 <_read_r+0x20>)
 800390c:	4604      	mov	r4, r0
 800390e:	4608      	mov	r0, r1
 8003910:	4611      	mov	r1, r2
 8003912:	2200      	movs	r2, #0
 8003914:	602a      	str	r2, [r5, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f7fc ff57 	bl	80007ca <_read>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_read_r+0x1e>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_read_r+0x1e>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	2000025c 	.word	0x2000025c

0800392c <_sbrk_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4d06      	ldr	r5, [pc, #24]	@ (8003948 <_sbrk_r+0x1c>)
 8003930:	2300      	movs	r3, #0
 8003932:	4604      	mov	r4, r0
 8003934:	4608      	mov	r0, r1
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	f7fc ff98 	bl	800086c <_sbrk>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_sbrk_r+0x1a>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_sbrk_r+0x1a>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	2000025c 	.word	0x2000025c

0800394c <_write_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4d07      	ldr	r5, [pc, #28]	@ (800396c <_write_r+0x20>)
 8003950:	4604      	mov	r4, r0
 8003952:	4608      	mov	r0, r1
 8003954:	4611      	mov	r1, r2
 8003956:	2200      	movs	r2, #0
 8003958:	602a      	str	r2, [r5, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f7fc fdca 	bl	80004f4 <_write>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_write_r+0x1e>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	b103      	cbz	r3, 800396a <_write_r+0x1e>
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	2000025c 	.word	0x2000025c

08003970 <_close_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4d06      	ldr	r5, [pc, #24]	@ (800398c <_close_r+0x1c>)
 8003974:	2300      	movs	r3, #0
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	f7fc ff42 	bl	8000804 <_close>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d102      	bne.n	800398a <_close_r+0x1a>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	b103      	cbz	r3, 800398a <_close_r+0x1a>
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	2000025c 	.word	0x2000025c

08003990 <_fstat_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4d07      	ldr	r5, [pc, #28]	@ (80039b0 <_fstat_r+0x20>)
 8003994:	2300      	movs	r3, #0
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	f7fc ff3d 	bl	800081c <_fstat>
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	d102      	bne.n	80039ac <_fstat_r+0x1c>
 80039a6:	682b      	ldr	r3, [r5, #0]
 80039a8:	b103      	cbz	r3, 80039ac <_fstat_r+0x1c>
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
 80039ae:	bf00      	nop
 80039b0:	2000025c 	.word	0x2000025c

080039b4 <_free_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	4605      	mov	r5, r0
 80039b8:	2900      	cmp	r1, #0
 80039ba:	d041      	beq.n	8003a40 <_free_r+0x8c>
 80039bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c0:	1f0c      	subs	r4, r1, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bfb8      	it	lt
 80039c6:	18e4      	addlt	r4, r4, r3
 80039c8:	f7ff fe36 	bl	8003638 <__malloc_lock>
 80039cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <_free_r+0x90>)
 80039ce:	6813      	ldr	r3, [r2, #0]
 80039d0:	b933      	cbnz	r3, 80039e0 <_free_r+0x2c>
 80039d2:	6063      	str	r3, [r4, #4]
 80039d4:	6014      	str	r4, [r2, #0]
 80039d6:	4628      	mov	r0, r5
 80039d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039dc:	f7ff be32 	b.w	8003644 <__malloc_unlock>
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	d908      	bls.n	80039f6 <_free_r+0x42>
 80039e4:	6820      	ldr	r0, [r4, #0]
 80039e6:	1821      	adds	r1, r4, r0
 80039e8:	428b      	cmp	r3, r1
 80039ea:	bf01      	itttt	eq
 80039ec:	6819      	ldreq	r1, [r3, #0]
 80039ee:	685b      	ldreq	r3, [r3, #4]
 80039f0:	1809      	addeq	r1, r1, r0
 80039f2:	6021      	streq	r1, [r4, #0]
 80039f4:	e7ed      	b.n	80039d2 <_free_r+0x1e>
 80039f6:	461a      	mov	r2, r3
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	b10b      	cbz	r3, 8003a00 <_free_r+0x4c>
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	d9fa      	bls.n	80039f6 <_free_r+0x42>
 8003a00:	6811      	ldr	r1, [r2, #0]
 8003a02:	1850      	adds	r0, r2, r1
 8003a04:	42a0      	cmp	r0, r4
 8003a06:	d10b      	bne.n	8003a20 <_free_r+0x6c>
 8003a08:	6820      	ldr	r0, [r4, #0]
 8003a0a:	4401      	add	r1, r0
 8003a0c:	1850      	adds	r0, r2, r1
 8003a0e:	4283      	cmp	r3, r0
 8003a10:	6011      	str	r1, [r2, #0]
 8003a12:	d1e0      	bne.n	80039d6 <_free_r+0x22>
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	6053      	str	r3, [r2, #4]
 8003a1a:	4408      	add	r0, r1
 8003a1c:	6010      	str	r0, [r2, #0]
 8003a1e:	e7da      	b.n	80039d6 <_free_r+0x22>
 8003a20:	d902      	bls.n	8003a28 <_free_r+0x74>
 8003a22:	230c      	movs	r3, #12
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	e7d6      	b.n	80039d6 <_free_r+0x22>
 8003a28:	6820      	ldr	r0, [r4, #0]
 8003a2a:	1821      	adds	r1, r4, r0
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	bf04      	itt	eq
 8003a30:	6819      	ldreq	r1, [r3, #0]
 8003a32:	685b      	ldreq	r3, [r3, #4]
 8003a34:	6063      	str	r3, [r4, #4]
 8003a36:	bf04      	itt	eq
 8003a38:	1809      	addeq	r1, r1, r0
 8003a3a:	6021      	streq	r1, [r4, #0]
 8003a3c:	6054      	str	r4, [r2, #4]
 8003a3e:	e7ca      	b.n	80039d6 <_free_r+0x22>
 8003a40:	bd38      	pop	{r3, r4, r5, pc}
 8003a42:	bf00      	nop
 8003a44:	20000258 	.word	0x20000258

08003a48 <_init>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr

08003a54 <_fini>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr
