
weatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004d58  08004d58  00005d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e10  08004e10  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e10  08004e10  00005e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e18  08004e18  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e1c  08004e1c  00005e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08004e88  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004e88  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1e2  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002082  00000000  00000000  0001427a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00016300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009db  00000000  00000000  00016fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fe7  00000000  00000000  000179a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5a6  00000000  00000000  0003e98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec4ab  00000000  00000000  0004df30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a3db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb8  00000000  00000000  0013a420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d40 	.word	0x08004d40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004d40 	.word	0x08004d40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <lcd_send_cmd>:
	{0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53},
	{0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27},
	{0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67}};

void lcd_send_cmd(char cmd)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f023 030f 	bic.w	r3, r3, #15
 80005ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C; //en=1, rs=0
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	f043 030c 	orr.w	r3, r3, #12
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; //en=0, rs=0
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C; //en=1, rs=0
 80005c8:	7bbb      	ldrb	r3, [r7, #14]
 80005ca:	f043 030c 	orr.w	r3, r3, #12
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08; //en=0, rs=0
 80005d2:	7bbb      	ldrb	r3, [r7, #14]
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005dc:	f107 0208 	add.w	r2, r7, #8
 80005e0:	2364      	movs	r3, #100	@ 0x64
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2304      	movs	r3, #4
 80005e6:	214e      	movs	r1, #78	@ 0x4e
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <lcd_send_cmd+0x5c>)
 80005ea:	f000 ffe7 	bl	80015bc <HAL_I2C_Master_Transmit>
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000084 	.word	0x20000084

080005fc <lcd_send_data>:

void lcd_send_data(char data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D; //en=1, rs=1
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	f043 030d 	orr.w	r3, r3, #13
 800061a:	b2db      	uxtb	r3, r3
 800061c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; //en=0, rs=1
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	f043 0309 	orr.w	r3, r3, #9
 8000624:	b2db      	uxtb	r3, r3
 8000626:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D; //en=1, rs=1
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	f043 030d 	orr.w	r3, r3, #13
 800062e:	b2db      	uxtb	r3, r3
 8000630:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09; //en=0, rs=1
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	f043 0309 	orr.w	r3, r3, #9
 8000638:	b2db      	uxtb	r3, r3
 800063a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800063c:	f107 0208 	add.w	r2, r7, #8
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2304      	movs	r3, #4
 8000646:	214e      	movs	r1, #78	@ 0x4e
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <lcd_send_data+0x5c>)
 800064a:	f000 ffb7 	bl	80015bc <HAL_I2C_Master_Transmit>
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000084 	.word	0x20000084

0800065c <lcd_init>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 8000660:	2032      	movs	r0, #50	@ 0x32
 8000662:	f000 fc43 	bl	8000eec <HAL_Delay>
	lcd_send_cmd(0x30);
 8000666:	2030      	movs	r0, #48	@ 0x30
 8000668:	f7ff ff98 	bl	800059c <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 800066c:	2005      	movs	r0, #5
 800066e:	f000 fc3d 	bl	8000eec <HAL_Delay>
	lcd_send_cmd(0x30);
 8000672:	2030      	movs	r0, #48	@ 0x30
 8000674:	f7ff ff92 	bl	800059c <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fc37 	bl	8000eec <HAL_Delay>
	lcd_send_cmd(0x30);
 800067e:	2030      	movs	r0, #48	@ 0x30
 8000680:	f7ff ff8c 	bl	800059c <lcd_send_cmd>
	HAL_Delay(10);
 8000684:	200a      	movs	r0, #10
 8000686:	f000 fc31 	bl	8000eec <HAL_Delay>
	lcd_send_cmd(0x20); // 4bit mode
 800068a:	2020      	movs	r0, #32
 800068c:	f7ff ff86 	bl	800059c <lcd_send_cmd>
	HAL_Delay(10);
 8000690:	200a      	movs	r0, #10
 8000692:	f000 fc2b 	bl	8000eec <HAL_Delay>

	// display initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000696:	2028      	movs	r0, #40	@ 0x28
 8000698:	f7ff ff80 	bl	800059c <lcd_send_cmd>
	HAL_Delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fc25 	bl	8000eec <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006a2:	2008      	movs	r0, #8
 80006a4:	f7ff ff7a 	bl	800059c <lcd_send_cmd>
	HAL_Delay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fc1f 	bl	8000eec <HAL_Delay>
	lcd_send_cmd(0x01); // clear display
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff74 	bl	800059c <lcd_send_cmd>
	HAL_Delay(2);
 80006b4:	2002      	movs	r0, #2
 80006b6:	f000 fc19 	bl	8000eec <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006ba:	2006      	movs	r0, #6
 80006bc:	f7ff ff6e 	bl	800059c <lcd_send_cmd>
	HAL_Delay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 fc13 	bl	8000eec <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006c6:	200c      	movs	r0, #12
 80006c8:	f7ff ff68 	bl	800059c <lcd_send_cmd>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_send_string>:

void lcd_send_string(const char *str)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	uint8_t rep = 195;
 80006d8:	23c3      	movs	r3, #195	@ 0xc3
 80006da:	77bb      	strb	r3, [r7, #30]
//	const uint8_t rep_auml = 164;
//	const uint8_t rep_ouml = 182;
//	const uint8_t rep_uuml = 188;
//	const uint8_t rep_sz = 159;
	char *auml = "\xE1";
 80006dc:	4b48      	ldr	r3, [pc, #288]	@ (8000800 <lcd_send_string+0x130>)
 80006de:	61bb      	str	r3, [r7, #24]
	char *ouml = "\xEF";
 80006e0:	4b48      	ldr	r3, [pc, #288]	@ (8000804 <lcd_send_string+0x134>)
 80006e2:	617b      	str	r3, [r7, #20]
	char *uuml = "\xF5";
 80006e4:	4b48      	ldr	r3, [pc, #288]	@ (8000808 <lcd_send_string+0x138>)
 80006e6:	613b      	str	r3, [r7, #16]
	char *sz = "\xE2";
 80006e8:	4b48      	ldr	r3, [pc, #288]	@ (800080c <lcd_send_string+0x13c>)
 80006ea:	60fb      	str	r3, [r7, #12]
	bool is_cmd = false;
 80006ec:	2300      	movs	r3, #0
 80006ee:	77fb      	strb	r3, [r7, #31]

	while (*str)
 80006f0:	e07b      	b.n	80007ea <lcd_send_string+0x11a>
		if (*str != '\0')
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d077      	beq.n	80007ea <lcd_send_string+0x11a>
		{
			if (is_cmd)
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d062      	beq.n	80007c6 <lcd_send_string+0xf6>
			{
				switch (*str)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3b9f      	subs	r3, #159	@ 0x9f
 8000706:	2b1d      	cmp	r3, #29
 8000708:	d856      	bhi.n	80007b8 <lcd_send_string+0xe8>
 800070a:	a201      	add	r2, pc, #4	@ (adr r2, 8000710 <lcd_send_string+0x40>)
 800070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000710:	080007ad 	.word	0x080007ad
 8000714:	080007b9 	.word	0x080007b9
 8000718:	080007b9 	.word	0x080007b9
 800071c:	080007b9 	.word	0x080007b9
 8000720:	080007b9 	.word	0x080007b9
 8000724:	08000789 	.word	0x08000789
 8000728:	080007b9 	.word	0x080007b9
 800072c:	080007b9 	.word	0x080007b9
 8000730:	080007b9 	.word	0x080007b9
 8000734:	080007b9 	.word	0x080007b9
 8000738:	080007b9 	.word	0x080007b9
 800073c:	080007b9 	.word	0x080007b9
 8000740:	080007b9 	.word	0x080007b9
 8000744:	080007b9 	.word	0x080007b9
 8000748:	080007b9 	.word	0x080007b9
 800074c:	080007b9 	.word	0x080007b9
 8000750:	080007b9 	.word	0x080007b9
 8000754:	080007b9 	.word	0x080007b9
 8000758:	080007b9 	.word	0x080007b9
 800075c:	080007b9 	.word	0x080007b9
 8000760:	080007b9 	.word	0x080007b9
 8000764:	080007b9 	.word	0x080007b9
 8000768:	080007b9 	.word	0x080007b9
 800076c:	08000795 	.word	0x08000795
 8000770:	080007b9 	.word	0x080007b9
 8000774:	080007b9 	.word	0x080007b9
 8000778:	080007b9 	.word	0x080007b9
 800077c:	080007b9 	.word	0x080007b9
 8000780:	080007b9 	.word	0x080007b9
 8000784:	080007a1 	.word	0x080007a1
				{
				case rep_auml:
					lcd_send_data(*auml);
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff35 	bl	80005fc <lcd_send_data>
					break;
 8000792:	e012      	b.n	80007ba <lcd_send_string+0xea>
				case rep_ouml:
					lcd_send_data(*ouml);
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff2f 	bl	80005fc <lcd_send_data>
					break;
 800079e:	e00c      	b.n	80007ba <lcd_send_string+0xea>
				case rep_uuml:
					lcd_send_data(*uuml);
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff29 	bl	80005fc <lcd_send_data>
					break;
 80007aa:	e006      	b.n	80007ba <lcd_send_string+0xea>
				case rep_sz:
					lcd_send_data(*sz);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff23 	bl	80005fc <lcd_send_data>
					break;
 80007b6:	e000      	b.n	80007ba <lcd_send_string+0xea>
				default:
					break;
 80007b8:	bf00      	nop
				}
				*str++;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3301      	adds	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
				is_cmd = false;
 80007c0:	2300      	movs	r3, #0
 80007c2:	77fb      	strb	r3, [r7, #31]
				continue;
 80007c4:	e011      	b.n	80007ea <lcd_send_string+0x11a>
			}
			if (*str == rep)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	7fba      	ldrb	r2, [r7, #30]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d105      	bne.n	80007dc <lcd_send_string+0x10c>
			{
				*str++;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
				is_cmd = true;
 80007d6:	2301      	movs	r3, #1
 80007d8:	77fb      	strb	r3, [r7, #31]
				continue;
 80007da:	e006      	b.n	80007ea <lcd_send_string+0x11a>
			}
			lcd_send_data(*str++);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff09 	bl	80005fc <lcd_send_data>
	while (*str)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f47f af7f 	bne.w	80006f2 <lcd_send_string+0x22>
		}
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	08004d58 	.word	0x08004d58
 8000804:	08004d5c 	.word	0x08004d5c
 8000808:	08004d60 	.word	0x08004d60
 800080c:	08004d64 	.word	0x08004d64

08000810 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	b29a      	uxth	r2, r3
 8000820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <_write+0x28>)
 8000828:	f002 fe00 	bl	800342c <HAL_UART_Transmit>
	return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000d8 	.word	0x200000d8

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 fadf 	bl	8000e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f814 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 f8c8 	bl	80009dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800084c:	f000 f896 	bl	800097c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000850:	f000 f854 	bl	80008fc <MX_I2C1_Init>
  lcd_init();
 8000854:	f7ff ff02 	bl	800065c <lcd_init>
  printf("hello");
 8000858:	4803      	ldr	r0, [pc, #12]	@ (8000868 <main+0x2c>)
 800085a:	f003 fc07 	bl	800406c <iprintf>
//  {
//      if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
//          printf("Device @ 0x%02X\r\n", addr);
//  }

  lcd_send_string("Temperature: 79F\nAir Quality: N/A");
 800085e:	4803      	ldr	r0, [pc, #12]	@ (800086c <main+0x30>)
 8000860:	f7ff ff36 	bl	80006d0 <lcd_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <main+0x28>
 8000868:	08004d68 	.word	0x08004d68
 800086c:	08004d70 	.word	0x08004d70

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b096      	sub	sp, #88	@ 0x58
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2244      	movs	r2, #68	@ 0x44
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fc06 	bl	8004090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000892:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000896:	f001 fa69 	bl	8001d6c <HAL_PWREx_ControlVoltageScaling>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008a0:	f000 f8da 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008a4:	2310      	movs	r3, #16
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a8:	2301      	movs	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008b0:	2360      	movs	r3, #96	@ 0x60
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 faab 	bl	8001e18 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008c8:	f000 f8c6 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fe73 	bl	80025d0 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008f0:	f000 f8b2 	bl	8000a58 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3758      	adds	r7, #88	@ 0x58
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_I2C1_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	@ (8000974 <MX_I2C1_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_I2C1_Init+0x74>)
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <MX_I2C1_Init+0x7c>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800090c:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_I2C1_Init+0x74>)
 8000914:	2201      	movs	r2, #1
 8000916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_I2C1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	@ (8000970 <MX_I2C1_Init+0x74>)
 8000938:	f000 fda4 	bl	8001484 <HAL_I2C_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000942:	f000 f889 	bl	8000a58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4809      	ldr	r0, [pc, #36]	@ (8000970 <MX_I2C1_Init+0x74>)
 800094a:	f001 f969 	bl	8001c20 <HAL_I2CEx_ConfigAnalogFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000954:	f000 f880 	bl	8000a58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_I2C1_Init+0x74>)
 800095c:	f001 f9ab 	bl	8001cb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 f877 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000084 	.word	0x20000084
 8000974:	40005400 	.word	0x40005400
 8000978:	00100d14 	.word	0x00100d14

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <MX_USART2_UART_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_USART2_UART_Init+0x58>)
 80009c0:	f002 fce6 	bl	8003390 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f845 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000d8 	.word	0x200000d8
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_GPIO_Init+0x74>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a16      	ldr	r2, [pc, #88]	@ (8000a50 <MX_GPIO_Init+0x74>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_GPIO_Init+0x74>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_GPIO_Init+0x74>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <MX_GPIO_Init+0x74>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_GPIO_Init+0x74>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT22_PIN_GPIO_Port, DHT22_PIN_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <MX_GPIO_Init+0x78>)
 8000a28:	f000 fd14 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT22_PIN_Pin */
  GPIO_InitStruct.Pin = DHT22_PIN_Pin;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT22_PIN_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_GPIO_Init+0x78>)
 8000a44:	f000 fb5c 	bl	8001100 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000400 	.word	0x48000400

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x44>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0ac      	sub	sp, #176	@ 0xb0
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2288      	movs	r2, #136	@ 0x88
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 fadf 	bl	8004090 <memset>
  if(hi2c->Instance==I2C1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a21      	ldr	r2, [pc, #132]	@ (8000b5c <HAL_I2C_MspInit+0xb0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d13a      	bne.n	8000b52 <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000adc:	2340      	movs	r3, #64	@ 0x40
 8000ade:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 ff95 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000af4:	f7ff ffb0 	bl	8000a58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_I2C_MspInit+0xb4>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	4a18      	ldr	r2, [pc, #96]	@ (8000b60 <HAL_I2C_MspInit+0xb4>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b04:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <HAL_I2C_MspInit+0xb4>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b10:	23c0      	movs	r3, #192	@ 0xc0
 8000b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b16:	2312      	movs	r3, #18
 8000b18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b32:	4619      	mov	r1, r3
 8000b34:	480b      	ldr	r0, [pc, #44]	@ (8000b64 <HAL_I2C_MspInit+0xb8>)
 8000b36:	f000 fae3 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_I2C_MspInit+0xb4>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_I2C_MspInit+0xb4>)
 8000b40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_I2C_MspInit+0xb4>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b52:	bf00      	nop
 8000b54:	37b0      	adds	r7, #176	@ 0xb0
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000400 	.word	0x48000400

08000b68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2288      	movs	r2, #136	@ 0x88
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fa81 	bl	8004090 <memset>
  if(huart->Instance==USART2)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a21      	ldr	r2, [pc, #132]	@ (8000c18 <HAL_UART_MspInit+0xb0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d13b      	bne.n	8000c10 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 ff37 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb0:	f7ff ff52 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb4:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_UART_MspInit+0xb4>)
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb8:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <HAL_UART_MspInit+0xb4>)
 8000bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <HAL_UART_MspInit+0xb4>)
 8000bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <HAL_UART_MspInit+0xb4>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd0:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <HAL_UART_MspInit+0xb4>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_UART_MspInit+0xb4>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000be4:	230c      	movs	r3, #12
 8000be6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f000 fa78 	bl	8001100 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c10:	bf00      	nop
 8000c12:	37b0      	adds	r7, #176	@ 0xb0
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40021000 	.word	0x40021000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <NMI_Handler+0x4>

08000c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c76:	f000 f919 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e00a      	b.n	8000ca6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c90:	f3af 8000 	nop.w
 8000c94:	4601      	mov	r1, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	60ba      	str	r2, [r7, #8]
 8000c9c:	b2ca      	uxtb	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dbf0      	blt.n	8000c90 <_read+0x12>
  }

  return len;
 8000cae:	687b      	ldr	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_isatty>:

int _isatty(int file)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf8:	2301      	movs	r3, #1
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f003 f9a6 	bl	80040a0 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20018000 	.word	0x20018000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	20000160 	.word	0x20000160
 8000d88:	200002b8 	.word	0x200002b8

08000d8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff ffea 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f003 f965 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de2:	f7ff fd2b 	bl	800083c <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000df4:	08004e20 	.word	0x08004e20
  ldr r2, =_sbss
 8000df8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dfc:	200002b4 	.word	0x200002b4

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>

08000e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f943 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f80e 	bl	8000e34 <HAL_InitTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	e001      	b.n	8000e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e24:	f7ff fe1e 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d023      	beq.n	8000e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_InitTick+0x70>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f941 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10f      	bne.n	8000e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d809      	bhi.n	8000e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e78:	f000 f919 	bl	80010ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_InitTick+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e004      	b.n	8000e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e001      	b.n	8000e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000164 	.word	0x20000164

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000164 	.word	0x20000164

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	@ (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	@ (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	@ 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	@ 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff47 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff5c 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb0 	bl	8001054 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e17f      	b.n	8001410 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8171 	beq.w	800140a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d005      	beq.n	8001140 <HAL_GPIO_Init+0x40>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f003 0201 	and.w	r2, r3, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d118      	bne.n	80011e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	6939      	ldr	r1, [r7, #16]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80ac 	beq.w	800140a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012be:	4b5c      	ldr	r3, [pc, #368]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x242>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001438 <HAL_GPIO_Init+0x338>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x23e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_GPIO_Init+0x33c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x23a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	@ (8001440 <HAL_GPIO_Init+0x340>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x236>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	@ (8001444 <HAL_GPIO_Init+0x344>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x232>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_GPIO_Init+0x348>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4a      	ldr	r2, [pc, #296]	@ (800144c <HAL_GPIO_Init+0x34c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x22a>
 8001326:	2306      	movs	r3, #6
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800132a:	2307      	movs	r3, #7
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001342:	2300      	movs	r3, #0
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001354:	4937      	ldr	r1, [pc, #220]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001386:	4a32      	ldr	r2, [pc, #200]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800138c:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <HAL_GPIO_Init+0x350>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013b0:	4a27      	ldr	r2, [pc, #156]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013b6:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013da:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001404:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	f47f ae78 	bne.w	8001110 <HAL_GPIO_Init+0x10>
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	48001000 	.word	0x48001000
 8001448:	48001400 	.word	0x48001400
 800144c:	48001800 	.word	0x48001800
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001470:	e002      	b.n	8001478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e08d      	b.n	80015b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fafe 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	@ 0x24
 80014b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	e006      	b.n	800150c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800150a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d108      	bne.n	8001526 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	e007      	b.n	8001536 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69d9      	ldr	r1, [r3, #28]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1a      	ldr	r2, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	461a      	mov	r2, r3
 80015c8:	460b      	mov	r3, r1
 80015ca:	817b      	strh	r3, [r7, #10]
 80015cc:	4613      	mov	r3, r2
 80015ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b20      	cmp	r3, #32
 80015da:	f040 80fd 	bne.w	80017d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_I2C_Master_Transmit+0x30>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e0f6      	b.n	80017da <HAL_I2C_Master_Transmit+0x21e>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015f4:	f7ff fc6e 	bl	8000ed4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2319      	movs	r3, #25
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 f914 	bl	8001834 <I2C_WaitOnFlagUntilTimeout>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0e1      	b.n	80017da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2221      	movs	r2, #33	@ 0x21
 800161a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2210      	movs	r2, #16
 8001622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	893a      	ldrh	r2, [r7, #8]
 8001636:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001642:	b29b      	uxth	r3, r3
 8001644:	2bff      	cmp	r3, #255	@ 0xff
 8001646:	d906      	bls.n	8001656 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	22ff      	movs	r2, #255	@ 0xff
 800164c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800164e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e007      	b.n	8001666 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001664:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166a:	2b00      	cmp	r3, #0
 800166c:	d024      	beq.n	80016b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001688:	b29b      	uxth	r3, r3
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	4b4e      	ldr	r3, [pc, #312]	@ (80017e4 <HAL_I2C_Master_Transmit+0x228>)
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 fa83 	bl	8001bbc <I2C_TransferConfig>
 80016b6:	e066      	b.n	8001786 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	8979      	ldrh	r1, [r7, #10]
 80016c0:	4b48      	ldr	r3, [pc, #288]	@ (80017e4 <HAL_I2C_Master_Transmit+0x228>)
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fa78 	bl	8001bbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016cc:	e05b      	b.n	8001786 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 f907 	bl	80018e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07b      	b.n	80017da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d034      	beq.n	8001786 <HAL_I2C_Master_Transmit+0x1ca>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d130      	bne.n	8001786 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	2200      	movs	r2, #0
 800172c:	2180      	movs	r1, #128	@ 0x80
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f880 	bl	8001834 <I2C_WaitOnFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e04d      	b.n	80017da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	2bff      	cmp	r3, #255	@ 0xff
 8001746:	d90e      	bls.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	22ff      	movs	r2, #255	@ 0xff
 800174c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001752:	b2da      	uxtb	r2, r3
 8001754:	8979      	ldrh	r1, [r7, #10]
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 fa2c 	bl	8001bbc <I2C_TransferConfig>
 8001764:	e00f      	b.n	8001786 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001774:	b2da      	uxtb	r2, r3
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	2300      	movs	r3, #0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fa1b 	bl	8001bbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178a:	b29b      	uxth	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d19e      	bne.n	80016ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	6a39      	ldr	r1, [r7, #32]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f8ed 	bl	8001974 <I2C_WaitOnSTOPFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e01a      	b.n	80017da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2220      	movs	r2, #32
 80017aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <HAL_I2C_Master_Transmit+0x22c>)
 80017b8:	400b      	ands	r3, r1
 80017ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	80002000 	.word	0x80002000
 80017e8:	fe00e800 	.word	0xfe00e800

080017ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d103      	bne.n	800180a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d007      	beq.n	8001828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	619a      	str	r2, [r3, #24]
  }
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001844:	e03b      	b.n	80018be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f8d6 	bl	80019fc <I2C_IsErrorOccurred>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e041      	b.n	80018de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001860:	d02d      	beq.n	80018be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001862:	f7ff fb37 	bl	8000ed4 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d302      	bcc.n	8001878 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d122      	bne.n	80018be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4013      	ands	r3, r2
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	429a      	cmp	r2, r3
 8001886:	bf0c      	ite	eq
 8001888:	2301      	moveq	r3, #1
 800188a:	2300      	movne	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	429a      	cmp	r2, r3
 8001894:	d113      	bne.n	80018be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f043 0220 	orr.w	r2, r3, #32
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4013      	ands	r3, r2
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	bf0c      	ite	eq
 80018ce:	2301      	moveq	r3, #1
 80018d0:	2300      	movne	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d0b4      	beq.n	8001846 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018f2:	e033      	b.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f87f 	bl	80019fc <I2C_IsErrorOccurred>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e031      	b.n	800196c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800190e:	d025      	beq.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001910:	f7ff fae0 	bl	8000ed4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	429a      	cmp	r2, r3
 800191e:	d302      	bcc.n	8001926 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d11a      	bne.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d013      	beq.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e007      	b.n	800196c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d1c4      	bne.n	80018f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001980:	e02f      	b.n	80019e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f838 	bl	80019fc <I2C_IsErrorOccurred>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e02d      	b.n	80019f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001996:	f7ff fa9d 	bl	8000ed4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d302      	bcc.n	80019ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11a      	bne.n	80019e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	d013      	beq.n	80019e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f043 0220 	orr.w	r2, r3, #32
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e007      	b.n	80019f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d1c8      	bne.n	8001982 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d068      	beq.n	8001afa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a30:	e049      	b.n	8001ac6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a38:	d045      	beq.n	8001ac6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a3a:	f7ff fa4b 	bl	8000ed4 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d302      	bcc.n	8001a50 <I2C_IsErrorOccurred+0x54>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d13a      	bne.n	8001ac6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a72:	d121      	bne.n	8001ab8 <I2C_IsErrorOccurred+0xbc>
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a7a:	d01d      	beq.n	8001ab8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001a7c:	7cfb      	ldrb	r3, [r7, #19]
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d01a      	beq.n	8001ab8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a92:	f7ff fa1f 	bl	8000ed4 <HAL_GetTick>
 8001a96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a98:	e00e      	b.n	8001ab8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a9a:	f7ff fa1b 	bl	8000ed4 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b19      	cmp	r3, #25
 8001aa6:	d907      	bls.n	8001ab8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	f043 0320 	orr.w	r3, r3, #32
 8001aae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001ab6:	e006      	b.n	8001ac6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d1e9      	bne.n	8001a9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	d003      	beq.n	8001adc <I2C_IsErrorOccurred+0xe0>
 8001ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0aa      	beq.n	8001a32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00b      	beq.n	8001b24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00b      	beq.n	8001b68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01c      	beq.n	8001baa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff fe3b 	bl	80017ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <I2C_IsErrorOccurred+0x1bc>)
 8001b82:	400b      	ands	r3, r1
 8001b84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2220      	movs	r2, #32
 8001b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001baa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3728      	adds	r7, #40	@ 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	fe00e800 	.word	0xfe00e800

08001bbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	817b      	strh	r3, [r7, #10]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bce:	897b      	ldrh	r3, [r7, #10]
 8001bd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bd4:	7a7b      	ldrb	r3, [r7, #9]
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bdc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	0d5b      	lsrs	r3, r3, #21
 8001bf6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <I2C_TransferConfig+0x60>)
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	ea02 0103 	and.w	r1, r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	03ff63ff 	.word	0x03ff63ff

08001c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d138      	bne.n	8001ca8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e032      	b.n	8001caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	@ 0x24
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6819      	ldr	r1, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ca8:	2302      	movs	r3, #2
  }
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d139      	bne.n	8001d40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e033      	b.n	8001d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2224      	movs	r2, #36	@ 0x24
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
  }
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d7a:	d130      	bne.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7c:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d88:	d038      	beq.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8a:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d92:	4a1e      	ldr	r2, [pc, #120]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2232      	movs	r2, #50	@ 0x32
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	3301      	adds	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db0:	e002      	b.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db8:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dc4:	d102      	bne.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f2      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd8:	d110      	bne.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e00f      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dea:	d007      	beq.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dec:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001df4:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e3ca      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	4b97      	ldr	r3, [pc, #604]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	4b94      	ldr	r3, [pc, #592]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80e4 	beq.w	8002014 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4a>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	f040 808b 	bne.w	8001f70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f040 8087 	bne.w	8001f70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e62:	4b89      	ldr	r3, [pc, #548]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x62>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e3a2      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	4b82      	ldr	r3, [pc, #520]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <HAL_RCC_OscConfig+0x7c>
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e92:	e005      	b.n	8001ea0 <HAL_RCC_OscConfig+0x88>
 8001e94:	4b7c      	ldr	r3, [pc, #496]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d223      	bcs.n	8001eec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fd55 	bl	8002958 <RCC_SetFlashLatencyFromMSIRange>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e383      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb8:	4b73      	ldr	r3, [pc, #460]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a72      	ldr	r2, [pc, #456]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b70      	ldr	r3, [pc, #448]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	496d      	ldr	r1, [pc, #436]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	4968      	ldr	r1, [pc, #416]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
 8001eea:	e025      	b.n	8001f38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eec:	4b66      	ldr	r3, [pc, #408]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a65      	ldr	r2, [pc, #404]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b63      	ldr	r3, [pc, #396]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4960      	ldr	r1, [pc, #384]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	495b      	ldr	r1, [pc, #364]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fd15 	bl	8002958 <RCC_SetFlashLatencyFromMSIRange>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e343      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f38:	f000 fc4a 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b52      	ldr	r3, [pc, #328]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	4950      	ldr	r1, [pc, #320]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	4a4e      	ldr	r2, [pc, #312]	@ (8002090 <HAL_RCC_OscConfig+0x278>)
 8001f56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f58:	4b4e      	ldr	r3, [pc, #312]	@ (8002094 <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe ff69 	bl	8000e34 <HAL_InitTick>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d052      	beq.n	8002012 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	e327      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d032      	beq.n	8001fde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f78:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a42      	ldr	r2, [pc, #264]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f84:	f7fe ffa6 	bl	8000ed4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f8c:	f7fe ffa2 	bl	8000ed4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e310      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001faa:	4b37      	ldr	r3, [pc, #220]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a36      	ldr	r2, [pc, #216]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4931      	ldr	r1, [pc, #196]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	492c      	ldr	r1, [pc, #176]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e01a      	b.n	8002014 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fde:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fea:	f7fe ff73 	bl	8000ed4 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ff2:	f7fe ff6f 	bl	8000ed4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e2dd      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002004:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x1da>
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002012:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d074      	beq.n	800210a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b08      	cmp	r3, #8
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x21a>
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d10e      	bne.n	800204a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d10b      	bne.n	800204a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d064      	beq.n	8002108 <HAL_RCC_OscConfig+0x2f0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d160      	bne.n	8002108 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e2ba      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x24a>
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0b      	ldr	r2, [pc, #44]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e026      	b.n	80020b0 <HAL_RCC_OscConfig+0x298>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800206a:	d115      	bne.n	8002098 <HAL_RCC_OscConfig+0x280>
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8002072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a02      	ldr	r2, [pc, #8]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x298>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	08004d94 	.word	0x08004d94
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004
 8002098:	4ba0      	ldr	r3, [pc, #640]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a9f      	ldr	r2, [pc, #636]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b9d      	ldr	r3, [pc, #628]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a9c      	ldr	r2, [pc, #624]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe ff0c 	bl	8000ed4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe ff08 	bl	8000ed4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e276      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d2:	4b92      	ldr	r3, [pc, #584]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2a8>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7fe fef8 	bl	8000ed4 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fef4 	bl	8000ed4 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e262      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fa:	4b88      	ldr	r3, [pc, #544]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2d0>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d060      	beq.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x310>
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d119      	bne.n	8002156 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d116      	bne.n	8002156 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	4b7c      	ldr	r3, [pc, #496]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x328>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e23f      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b76      	ldr	r3, [pc, #472]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	4973      	ldr	r1, [pc, #460]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002154:	e040      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d023      	beq.n	80021a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215e:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6e      	ldr	r2, [pc, #440]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe feb3 	bl	8000ed4 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7fe feaf 	bl	8000ed4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e21d      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002184:	4b65      	ldr	r3, [pc, #404]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b62      	ldr	r3, [pc, #392]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	495f      	ldr	r1, [pc, #380]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e018      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b5d      	ldr	r3, [pc, #372]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a5c      	ldr	r2, [pc, #368]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe fe8f 	bl	8000ed4 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7fe fe8b 	bl	8000ed4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1f9      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021cc:	4b53      	ldr	r3, [pc, #332]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d03c      	beq.n	800225e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01c      	beq.n	8002226 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ec:	4b4b      	ldr	r3, [pc, #300]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f2:	4a4a      	ldr	r2, [pc, #296]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7fe fe6a 	bl	8000ed4 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7fe fe66 	bl	8000ed4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1d4      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002216:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ef      	beq.n	8002204 <HAL_RCC_OscConfig+0x3ec>
 8002224:	e01b      	b.n	800225e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002226:	4b3d      	ldr	r3, [pc, #244]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222c:	4a3b      	ldr	r2, [pc, #236]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7fe fe4d 	bl	8000ed4 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223e:	f7fe fe49 	bl	8000ed4 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e1b7      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002250:	4b32      	ldr	r3, [pc, #200]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1ef      	bne.n	800223e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80a6 	beq.w	80023b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002270:	4b2a      	ldr	r3, [pc, #168]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	4a26      	ldr	r2, [pc, #152]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	@ 0x58
 8002288:	4b24      	ldr	r3, [pc, #144]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002294:	2301      	movs	r3, #1
 8002296:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002298:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <HAL_RCC_OscConfig+0x508>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d118      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <HAL_RCC_OscConfig+0x508>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <HAL_RCC_OscConfig+0x508>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b0:	f7fe fe10 	bl	8000ed4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b8:	f7fe fe0c 	bl	8000ed4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e17a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_RCC_OscConfig+0x508>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4d8>
 80022de:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ee:	e029      	b.n	8002344 <HAL_RCC_OscConfig+0x52c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d115      	bne.n	8002324 <HAL_RCC_OscConfig+0x50c>
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fe:	4a07      	ldr	r2, [pc, #28]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	4a03      	ldr	r2, [pc, #12]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x52c>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	4b9c      	ldr	r3, [pc, #624]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232a:	4a9b      	ldr	r2, [pc, #620]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002334:	4b98      	ldr	r3, [pc, #608]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	4a97      	ldr	r2, [pc, #604]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d016      	beq.n	800237a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe fdc2 	bl	8000ed4 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe fdbe 	bl	8000ed4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e12a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	4b8b      	ldr	r3, [pc, #556]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ed      	beq.n	8002354 <HAL_RCC_OscConfig+0x53c>
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fdab 	bl	8000ed4 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe fda7 	bl	8000ed4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e113      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002398:	4b7f      	ldr	r3, [pc, #508]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ed      	bne.n	8002382 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a6:	7ffb      	ldrb	r3, [r7, #31]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	4a79      	ldr	r2, [pc, #484]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80023b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80fe 	beq.w	80025be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	f040 80d0 	bne.w	800256c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023cc:	4b72      	ldr	r3, [pc, #456]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d130      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	3b01      	subs	r3, #1
 80023ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d127      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d11f      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800240c:	2a07      	cmp	r2, #7
 800240e:	bf14      	ite	ne
 8002410:	2201      	movne	r2, #1
 8002412:	2200      	moveq	r2, #0
 8002414:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002416:	4293      	cmp	r3, r2
 8002418:	d113      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	3b01      	subs	r3, #1
 8002428:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d109      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d06e      	beq.n	8002520 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d069      	beq.n	800251c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002448:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002454:	4b50      	ldr	r3, [pc, #320]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0ad      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002464:	4b4c      	ldr	r3, [pc, #304]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a4b      	ldr	r2, [pc, #300]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002470:	f7fe fd30 	bl	8000ed4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fd2c 	bl	8000ed4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e09a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248a:	4b43      	ldr	r3, [pc, #268]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b40      	ldr	r3, [pc, #256]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b40      	ldr	r3, [pc, #256]	@ (800259c <HAL_RCC_OscConfig+0x784>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0112      	lsls	r2, r2, #4
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024b0:	0212      	lsls	r2, r2, #8
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024b8:	0852      	lsrs	r2, r2, #1
 80024ba:	3a01      	subs	r2, #1
 80024bc:	0552      	lsls	r2, r2, #21
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024c4:	0852      	lsrs	r2, r2, #1
 80024c6:	3a01      	subs	r2, #1
 80024c8:	0652      	lsls	r2, r2, #25
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024d0:	0912      	lsrs	r2, r2, #4
 80024d2:	0452      	lsls	r2, r2, #17
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4930      	ldr	r1, [pc, #192]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f4:	f7fe fcee 	bl	8000ed4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fcea 	bl	8000ed4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e058      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251a:	e050      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04f      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002520:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d148      	bne.n	80025be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a19      	ldr	r2, [pc, #100]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a16      	ldr	r2, [pc, #88]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002542:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002544:	f7fe fcc6 	bl	8000ed4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fcc2 	bl	8000ed4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e030      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x734>
 800256a:	e028      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d023      	beq.n	80025ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a08      	ldr	r2, [pc, #32]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002578:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800257c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe fca9 	bl	8000ed4 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e00c      	b.n	80025a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fca5 	bl	8000ed4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d905      	bls.n	80025a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
 8002598:	40021000 	.word	0x40021000
 800259c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ec      	bne.n	8002586 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4905      	ldr	r1, [pc, #20]	@ (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_RCC_OscConfig+0x7b4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	60cb      	str	r3, [r1, #12]
 80025b8:	e001      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	feeefffc 	.word	0xfeeefffc

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0e7      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b75      	ldr	r3, [pc, #468]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b72      	ldr	r3, [pc, #456]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4970      	ldr	r1, [pc, #448]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b6e      	ldr	r3, [pc, #440]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0cf      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b66      	ldr	r3, [pc, #408]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800262c:	429a      	cmp	r2, r3
 800262e:	d908      	bls.n	8002642 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b63      	ldr	r3, [pc, #396]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4960      	ldr	r1, [pc, #384]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d04c      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	4b5a      	ldr	r3, [pc, #360]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d121      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0a6      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266e:	4b54      	ldr	r3, [pc, #336]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d115      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e09a      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002686:	4b4e      	ldr	r3, [pc, #312]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e08e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002696:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e086      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a6:	4b46      	ldr	r3, [pc, #280]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4943      	ldr	r1, [pc, #268]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b8:	f7fe fc0c 	bl	8000ed4 <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7fe fc08 	bl	8000ed4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e06e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b3a      	ldr	r3, [pc, #232]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 020c 	and.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1eb      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	4b31      	ldr	r3, [pc, #196]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002700:	429a      	cmp	r2, r3
 8002702:	d208      	bcs.n	8002716 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	492b      	ldr	r1, [pc, #172]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002716:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d210      	bcs.n	8002746 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 0207 	bic.w	r2, r3, #7
 800272c:	4923      	ldr	r1, [pc, #140]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002734:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e036      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002752:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4918      	ldr	r1, [pc, #96]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4910      	ldr	r1, [pc, #64]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002784:	f000 f824 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	490b      	ldr	r1, [pc, #44]	@ (80027c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_RCC_ClockConfig+0x1f8>)
 80027a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_RCC_ClockConfig+0x1fc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fb43 	bl	8000e34 <HAL_InitTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80027b2:	7afb      	ldrb	r3, [r7, #11]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08004d94 	.word	0x08004d94
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	@ 0x24
 80027d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027de:	4b3e      	ldr	r3, [pc, #248]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e8:	4b3b      	ldr	r3, [pc, #236]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x34>
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d121      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d11e      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002804:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002810:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e005      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002820:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800282c:	4a2b      	ldr	r2, [pc, #172]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d102      	bne.n	800284e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002848:	4b25      	ldr	r3, [pc, #148]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e004      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d101      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002854:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d134      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800285e:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0xa6>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d003      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0xac>
 8002874:	e005      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002878:	617b      	str	r3, [r7, #20]
      break;
 800287a:	e005      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800287c:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800287e:	617b      	str	r3, [r7, #20]
      break;
 8002880:	e002      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	617b      	str	r3, [r7, #20]
      break;
 8002886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002888:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	3301      	adds	r3, #1
 8002894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	fb03 f202 	mul.w	r2, r3, r2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	0e5b      	lsrs	r3, r3, #25
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	3301      	adds	r3, #1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028c8:	69bb      	ldr	r3, [r7, #24]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	@ 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08004dac 	.word	0x08004dac
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	@ (8002928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	08004da4 	.word	0x08004da4

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002930:	f7ff ffda 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0adb      	lsrs	r3, r3, #11
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4904      	ldr	r1, [pc, #16]	@ (8002954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	08004da4 	.word	0x08004da4

08002958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002964:	4b2a      	ldr	r3, [pc, #168]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002970:	f7ff f9ee 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
 8002974:	6178      	str	r0, [r7, #20]
 8002976:	e014      	b.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297c:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	@ 0x58
 8002984:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002990:	f7ff f9de 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
 8002994:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002996:	4b1e      	ldr	r3, [pc, #120]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800299c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029a8:	d10b      	bne.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b80      	cmp	r3, #128	@ 0x80
 80029ae:	d919      	bls.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80029b4:	d902      	bls.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029b6:	2302      	movs	r3, #2
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e013      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029bc:	2301      	movs	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	e010      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b80      	cmp	r3, #128	@ 0x80
 80029c6:	d902      	bls.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029c8:	2303      	movs	r3, #3
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	e00a      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b80      	cmp	r3, #128	@ 0x80
 80029d2:	d102      	bne.n	80029da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029d4:	2302      	movs	r3, #2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e004      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b70      	cmp	r3, #112	@ 0x70
 80029de:	d101      	bne.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029e0:	2301      	movs	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 0207 	bic.w	r2, r3, #7
 80029ec:	4909      	ldr	r1, [pc, #36]	@ (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029f4:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40022000 	.word	0x40022000

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a20:	2300      	movs	r3, #0
 8002a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a24:	2300      	movs	r3, #0
 8002a26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d041      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a3c:	d02a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a42:	d824      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a48:	d008      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a4e:	d81e      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a58:	d010      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a5c:	4b86      	ldr	r3, [pc, #536]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a85      	ldr	r2, [pc, #532]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a68:	e015      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fabb 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a7a:	e00c      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3320      	adds	r3, #32
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fba6 	bl	80031d4 <RCCEx_PLLSAI2_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a8c:	e003      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	74fb      	strb	r3, [r7, #19]
      break;
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a9c:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aaa:	4973      	ldr	r1, [pc, #460]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d041      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002acc:	d02a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ace:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ad2:	d824      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ad4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ade:	d81e      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aea:	e018      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aec:	4b62      	ldr	r3, [pc, #392]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a61      	ldr	r2, [pc, #388]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002af8:	e015      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fa73 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b0a:	e00c      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3320      	adds	r3, #32
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fb5e 	bl	80031d4 <RCCEx_PLLSAI2_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	74fb      	strb	r3, [r7, #19]
      break;
 8002b22:	e000      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b2c:	4b52      	ldr	r3, [pc, #328]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b3a:	494f      	ldr	r1, [pc, #316]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a0 	beq.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a3a      	ldr	r2, [pc, #232]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b98:	f7fe f99c 	bl	8000ed4 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b9e:	e009      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fe f998 	bl	8000ed4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d902      	bls.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	74fb      	strb	r3, [r7, #19]
        break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bb4:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d15c      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01f      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d019      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bf0:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf6:	4a20      	ldr	r2, [pc, #128]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	4a1c      	ldr	r2, [pc, #112]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c10:	4a19      	ldr	r2, [pc, #100]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d016      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe f957 	bl	8000ed4 <HAL_GetTick>
 8002c26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c28:	e00b      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe f953 	bl	8000ed4 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d902      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	74fb      	strb	r3, [r7, #19]
            break;
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ec      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c56:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c66:	4904      	ldr	r1, [pc, #16]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c6e:	e009      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	74bb      	strb	r3, [r7, #18]
 8002c74:	e006      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c84:	7c7b      	ldrb	r3, [r7, #17]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b9e      	ldr	r3, [pc, #632]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	4a9d      	ldr	r2, [pc, #628]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca2:	4b98      	ldr	r3, [pc, #608]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	f023 0203 	bic.w	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	4994      	ldr	r1, [pc, #592]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cca:	f023 020c 	bic.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd2:	498c      	ldr	r1, [pc, #560]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ce6:	4b87      	ldr	r3, [pc, #540]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	4983      	ldr	r1, [pc, #524]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d08:	4b7e      	ldr	r3, [pc, #504]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	497b      	ldr	r1, [pc, #492]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d2a:	4b76      	ldr	r3, [pc, #472]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d38:	4972      	ldr	r1, [pc, #456]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	496a      	ldr	r1, [pc, #424]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	4961      	ldr	r1, [pc, #388]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d90:	4b5c      	ldr	r3, [pc, #368]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	4959      	ldr	r1, [pc, #356]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db2:	4b54      	ldr	r3, [pc, #336]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc0:	4950      	ldr	r1, [pc, #320]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	4948      	ldr	r1, [pc, #288]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002df6:	4b43      	ldr	r3, [pc, #268]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	493f      	ldr	r1, [pc, #252]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d028      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e18:	4b3a      	ldr	r3, [pc, #232]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e26:	4937      	ldr	r1, [pc, #220]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e38:	4b32      	ldr	r3, [pc, #200]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a31      	ldr	r2, [pc, #196]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e42:	60d3      	str	r3, [r2, #12]
 8002e44:	e011      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f8c8 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d028      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e76:	4b23      	ldr	r3, [pc, #140]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e84:	491f      	ldr	r1, [pc, #124]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e96:	4b1b      	ldr	r3, [pc, #108]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea0:	60d3      	str	r3, [r2, #12]
 8002ea2:	e011      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f899 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02b      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee2:	4908      	ldr	r1, [pc, #32]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef4:	4b03      	ldr	r3, [pc, #12]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a02      	ldr	r2, [pc, #8]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002efe:	60d3      	str	r3, [r2, #12]
 8002f00:	e014      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f867 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02f      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f38:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f46:	4928      	ldr	r1, [pc, #160]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f56:	d10d      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f844 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d014      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	74bb      	strb	r3, [r7, #18]
 8002f72:	e011      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3320      	adds	r3, #32
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f925 	bl	80031d4 <RCCEx_PLLSAI2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fa4:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fb2:	490d      	ldr	r1, [pc, #52]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd6:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fde:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ffa:	4b75      	ldr	r3, [pc, #468]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d018      	beq.n	8003038 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003006:	4b72      	ldr	r3, [pc, #456]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d10d      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
       ||
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800301e:	4b6c      	ldr	r3, [pc, #432]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
       ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d047      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	e044      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d018      	beq.n	8003072 <RCCEx_PLLSAI1_Config+0x86>
 8003040:	2b03      	cmp	r3, #3
 8003042:	d825      	bhi.n	8003090 <RCCEx_PLLSAI1_Config+0xa4>
 8003044:	2b01      	cmp	r3, #1
 8003046:	d002      	beq.n	800304e <RCCEx_PLLSAI1_Config+0x62>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d009      	beq.n	8003060 <RCCEx_PLLSAI1_Config+0x74>
 800304c:	e020      	b.n	8003090 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800304e:	4b60      	ldr	r3, [pc, #384]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11d      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305e:	e01a      	b.n	8003096 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003060:	4b5b      	ldr	r3, [pc, #364]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d116      	bne.n	800309a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003070:	e013      	b.n	800309a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003072:	4b57      	ldr	r3, [pc, #348]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10f      	bne.n	800309e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800307e:	4b54      	ldr	r3, [pc, #336]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800308e:	e006      	b.n	800309e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      break;
 8003094:	e004      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003096:	bf00      	nop
 8003098:	e002      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800309e:	bf00      	nop
    }

    if(status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10d      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030a6:	4b4a      	ldr	r3, [pc, #296]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	430b      	orrs	r3, r1
 80030bc:	4944      	ldr	r1, [pc, #272]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d17d      	bne.n	80031c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030c8:	4b41      	ldr	r3, [pc, #260]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a40      	ldr	r2, [pc, #256]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d4:	f7fd fefe 	bl	8000ed4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030da:	e009      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030dc:	f7fd fefa 	bl	8000ed4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	73fb      	strb	r3, [r7, #15]
        break;
 80030ee:	e005      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030f0:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ef      	bne.n	80030dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d160      	bne.n	80031c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d111      	bne.n	800312c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003108:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	0211      	lsls	r1, r2, #8
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	0912      	lsrs	r2, r2, #4
 8003120:	0452      	lsls	r2, r2, #17
 8003122:	430a      	orrs	r2, r1
 8003124:	492a      	ldr	r1, [pc, #168]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	610b      	str	r3, [r1, #16]
 800312a:	e027      	b.n	800317c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d112      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800313a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6892      	ldr	r2, [r2, #8]
 8003142:	0211      	lsls	r1, r2, #8
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6912      	ldr	r2, [r2, #16]
 8003148:	0852      	lsrs	r2, r2, #1
 800314a:	3a01      	subs	r2, #1
 800314c:	0552      	lsls	r2, r2, #21
 800314e:	430a      	orrs	r2, r1
 8003150:	491f      	ldr	r1, [pc, #124]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	610b      	str	r3, [r1, #16]
 8003156:	e011      	b.n	800317c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003160:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6892      	ldr	r2, [r2, #8]
 8003168:	0211      	lsls	r1, r2, #8
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6952      	ldr	r2, [r2, #20]
 800316e:	0852      	lsrs	r2, r2, #1
 8003170:	3a01      	subs	r2, #1
 8003172:	0652      	lsls	r2, r2, #25
 8003174:	430a      	orrs	r2, r1
 8003176:	4916      	ldr	r1, [pc, #88]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800317c:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003182:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003186:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fd fea4 	bl	8000ed4 <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003190:	f7fd fea0 	bl	8000ed4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	73fb      	strb	r3, [r7, #15]
          break;
 80031a2:	e005      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	4904      	ldr	r1, [pc, #16]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000

080031d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031e2:	4b6a      	ldr	r3, [pc, #424]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d018      	beq.n	8003220 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031ee:	4b67      	ldr	r3, [pc, #412]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0203 	and.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d10d      	bne.n	800321a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
       ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003206:	4b61      	ldr	r3, [pc, #388]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
       ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d047      	beq.n	80032aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	e044      	b.n	80032aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d018      	beq.n	800325a <RCCEx_PLLSAI2_Config+0x86>
 8003228:	2b03      	cmp	r3, #3
 800322a:	d825      	bhi.n	8003278 <RCCEx_PLLSAI2_Config+0xa4>
 800322c:	2b01      	cmp	r3, #1
 800322e:	d002      	beq.n	8003236 <RCCEx_PLLSAI2_Config+0x62>
 8003230:	2b02      	cmp	r3, #2
 8003232:	d009      	beq.n	8003248 <RCCEx_PLLSAI2_Config+0x74>
 8003234:	e020      	b.n	8003278 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003236:	4b55      	ldr	r3, [pc, #340]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11d      	bne.n	800327e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003246:	e01a      	b.n	800327e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003248:	4b50      	ldr	r3, [pc, #320]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e013      	b.n	8003282 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800325a:	4b4c      	ldr	r3, [pc, #304]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003266:	4b49      	ldr	r3, [pc, #292]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003276:	e006      	b.n	8003286 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      break;
 800327c:	e004      	b.n	8003288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800327e:	bf00      	nop
 8003280:	e002      	b.n	8003288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003286:	bf00      	nop
    }

    if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10d      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800328e:	4b3f      	ldr	r3, [pc, #252]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	430b      	orrs	r3, r1
 80032a4:	4939      	ldr	r1, [pc, #228]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d167      	bne.n	8003380 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032b0:	4b36      	ldr	r3, [pc, #216]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a35      	ldr	r2, [pc, #212]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fd fe0a 	bl	8000ed4 <HAL_GetTick>
 80032c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032c2:	e009      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032c4:	f7fd fe06 	bl	8000ed4 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d902      	bls.n	80032d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	73fb      	strb	r3, [r7, #15]
        break;
 80032d6:	e005      	b.n	80032e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032d8:	4b2c      	ldr	r3, [pc, #176]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1ef      	bne.n	80032c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d14a      	bne.n	8003380 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d111      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032f0:	4b26      	ldr	r3, [pc, #152]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80032f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6892      	ldr	r2, [r2, #8]
 8003300:	0211      	lsls	r1, r2, #8
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68d2      	ldr	r2, [r2, #12]
 8003306:	0912      	lsrs	r2, r2, #4
 8003308:	0452      	lsls	r2, r2, #17
 800330a:	430a      	orrs	r2, r1
 800330c:	491f      	ldr	r1, [pc, #124]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800330e:	4313      	orrs	r3, r2
 8003310:	614b      	str	r3, [r1, #20]
 8003312:	e011      	b.n	8003338 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003314:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800331c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6892      	ldr	r2, [r2, #8]
 8003324:	0211      	lsls	r1, r2, #8
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6912      	ldr	r2, [r2, #16]
 800332a:	0852      	lsrs	r2, r2, #1
 800332c:	3a01      	subs	r2, #1
 800332e:	0652      	lsls	r2, r2, #25
 8003330:	430a      	orrs	r2, r1
 8003332:	4916      	ldr	r1, [pc, #88]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003334:	4313      	orrs	r3, r2
 8003336:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a13      	ldr	r2, [pc, #76]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fd fdc6 	bl	8000ed4 <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800334a:	e009      	b.n	8003360 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800334c:	f7fd fdc2 	bl	8000ed4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d902      	bls.n	8003360 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	73fb      	strb	r3, [r7, #15]
          break;
 800335e:	e005      	b.n	800336c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003360:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ef      	beq.n	800334c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4904      	ldr	r1, [pc, #16]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800337c:	4313      	orrs	r3, r2
 800337e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e040      	b.n	8003424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd fbd8 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	@ 0x24
 80033bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fb6a 	bl	8003ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f8af 	bl	8003540 <UART_SetConfig>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01b      	b.n	8003424 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800340a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fbe9 	bl	8003bf4 <UART_CheckIdleState>
 8003422:	4603      	mov	r3, r0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	@ 0x28
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003440:	2b20      	cmp	r3, #32
 8003442:	d177      	bne.n	8003534 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_UART_Transmit+0x24>
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e070      	b.n	8003536 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2221      	movs	r2, #33	@ 0x21
 8003460:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003462:	f7fd fd37 	bl	8000ed4 <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003480:	d108      	bne.n	8003494 <HAL_UART_Transmit+0x68>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	e003      	b.n	800349c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800349c:	e02f      	b.n	80034fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2180      	movs	r1, #128	@ 0x80
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fc4b 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e03b      	b.n	8003536 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d0:	b292      	uxth	r2, r2
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	3302      	adds	r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e007      	b.n	80034ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1c9      	bne.n	800349e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2140      	movs	r1, #64	@ 0x40
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fc15 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e005      	b.n	8003536 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003544:	b08a      	sub	sp, #40	@ 0x28
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4313      	orrs	r3, r2
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4ba4      	ldr	r3, [pc, #656]	@ (8003800 <UART_SetConfig+0x2c0>)
 8003570:	4013      	ands	r3, r2
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003578:	430b      	orrs	r3, r1
 800357a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a99      	ldr	r2, [pc, #612]	@ (8003804 <UART_SetConfig+0x2c4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a8:	4313      	orrs	r3, r2
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a90      	ldr	r2, [pc, #576]	@ (8003808 <UART_SetConfig+0x2c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d126      	bne.n	8003618 <UART_SetConfig+0xd8>
 80035ca:	4b90      	ldr	r3, [pc, #576]	@ (800380c <UART_SetConfig+0x2cc>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d81b      	bhi.n	8003610 <UART_SetConfig+0xd0>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <UART_SetConfig+0xa0>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	08003601 	.word	0x08003601
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003609 	.word	0x08003609
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f6:	e116      	b.n	8003826 <UART_SetConfig+0x2e6>
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fe:	e112      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003600:	2304      	movs	r3, #4
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003606:	e10e      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003608:	2308      	movs	r3, #8
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360e:	e10a      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003616:	e106      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7c      	ldr	r2, [pc, #496]	@ (8003810 <UART_SetConfig+0x2d0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d138      	bne.n	8003694 <UART_SetConfig+0x154>
 8003622:	4b7a      	ldr	r3, [pc, #488]	@ (800380c <UART_SetConfig+0x2cc>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d82d      	bhi.n	800368c <UART_SetConfig+0x14c>
 8003630:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <UART_SetConfig+0xf8>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800366d 	.word	0x0800366d
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800368d 	.word	0x0800368d
 8003644:	0800368d 	.word	0x0800368d
 8003648:	0800367d 	.word	0x0800367d
 800364c:	0800368d 	.word	0x0800368d
 8003650:	0800368d 	.word	0x0800368d
 8003654:	0800368d 	.word	0x0800368d
 8003658:	08003675 	.word	0x08003675
 800365c:	0800368d 	.word	0x0800368d
 8003660:	0800368d 	.word	0x0800368d
 8003664:	0800368d 	.word	0x0800368d
 8003668:	08003685 	.word	0x08003685
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003672:	e0d8      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003674:	2302      	movs	r3, #2
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367a:	e0d4      	b.n	8003826 <UART_SetConfig+0x2e6>
 800367c:	2304      	movs	r3, #4
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003682:	e0d0      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003684:	2308      	movs	r3, #8
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368a:	e0cc      	b.n	8003826 <UART_SetConfig+0x2e6>
 800368c:	2310      	movs	r3, #16
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003692:	e0c8      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5e      	ldr	r2, [pc, #376]	@ (8003814 <UART_SetConfig+0x2d4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d125      	bne.n	80036ea <UART_SetConfig+0x1aa>
 800369e:	4b5b      	ldr	r3, [pc, #364]	@ (800380c <UART_SetConfig+0x2cc>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036a8:	2b30      	cmp	r3, #48	@ 0x30
 80036aa:	d016      	beq.n	80036da <UART_SetConfig+0x19a>
 80036ac:	2b30      	cmp	r3, #48	@ 0x30
 80036ae:	d818      	bhi.n	80036e2 <UART_SetConfig+0x1a2>
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d00a      	beq.n	80036ca <UART_SetConfig+0x18a>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d814      	bhi.n	80036e2 <UART_SetConfig+0x1a2>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <UART_SetConfig+0x182>
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d008      	beq.n	80036d2 <UART_SetConfig+0x192>
 80036c0:	e00f      	b.n	80036e2 <UART_SetConfig+0x1a2>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c8:	e0ad      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036ca:	2302      	movs	r3, #2
 80036cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d0:	e0a9      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036d2:	2304      	movs	r3, #4
 80036d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d8:	e0a5      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036da:	2308      	movs	r3, #8
 80036dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e0:	e0a1      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036e2:	2310      	movs	r3, #16
 80036e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e8:	e09d      	b.n	8003826 <UART_SetConfig+0x2e6>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003818 <UART_SetConfig+0x2d8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d125      	bne.n	8003740 <UART_SetConfig+0x200>
 80036f4:	4b45      	ldr	r3, [pc, #276]	@ (800380c <UART_SetConfig+0x2cc>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003700:	d016      	beq.n	8003730 <UART_SetConfig+0x1f0>
 8003702:	2bc0      	cmp	r3, #192	@ 0xc0
 8003704:	d818      	bhi.n	8003738 <UART_SetConfig+0x1f8>
 8003706:	2b80      	cmp	r3, #128	@ 0x80
 8003708:	d00a      	beq.n	8003720 <UART_SetConfig+0x1e0>
 800370a:	2b80      	cmp	r3, #128	@ 0x80
 800370c:	d814      	bhi.n	8003738 <UART_SetConfig+0x1f8>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <UART_SetConfig+0x1d8>
 8003712:	2b40      	cmp	r3, #64	@ 0x40
 8003714:	d008      	beq.n	8003728 <UART_SetConfig+0x1e8>
 8003716:	e00f      	b.n	8003738 <UART_SetConfig+0x1f8>
 8003718:	2300      	movs	r3, #0
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800371e:	e082      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003720:	2302      	movs	r3, #2
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003726:	e07e      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003728:	2304      	movs	r3, #4
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372e:	e07a      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003730:	2308      	movs	r3, #8
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003736:	e076      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003738:	2310      	movs	r3, #16
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373e:	e072      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a35      	ldr	r2, [pc, #212]	@ (800381c <UART_SetConfig+0x2dc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d12a      	bne.n	80037a0 <UART_SetConfig+0x260>
 800374a:	4b30      	ldr	r3, [pc, #192]	@ (800380c <UART_SetConfig+0x2cc>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003754:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003758:	d01a      	beq.n	8003790 <UART_SetConfig+0x250>
 800375a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800375e:	d81b      	bhi.n	8003798 <UART_SetConfig+0x258>
 8003760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003764:	d00c      	beq.n	8003780 <UART_SetConfig+0x240>
 8003766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800376a:	d815      	bhi.n	8003798 <UART_SetConfig+0x258>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <UART_SetConfig+0x238>
 8003770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003774:	d008      	beq.n	8003788 <UART_SetConfig+0x248>
 8003776:	e00f      	b.n	8003798 <UART_SetConfig+0x258>
 8003778:	2300      	movs	r3, #0
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377e:	e052      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003780:	2302      	movs	r3, #2
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003786:	e04e      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003788:	2304      	movs	r3, #4
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800378e:	e04a      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003790:	2308      	movs	r3, #8
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003796:	e046      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003798:	2310      	movs	r3, #16
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379e:	e042      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <UART_SetConfig+0x2c4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d13a      	bne.n	8003820 <UART_SetConfig+0x2e0>
 80037aa:	4b18      	ldr	r3, [pc, #96]	@ (800380c <UART_SetConfig+0x2cc>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037b8:	d01a      	beq.n	80037f0 <UART_SetConfig+0x2b0>
 80037ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037be:	d81b      	bhi.n	80037f8 <UART_SetConfig+0x2b8>
 80037c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c4:	d00c      	beq.n	80037e0 <UART_SetConfig+0x2a0>
 80037c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ca:	d815      	bhi.n	80037f8 <UART_SetConfig+0x2b8>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <UART_SetConfig+0x298>
 80037d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d4:	d008      	beq.n	80037e8 <UART_SetConfig+0x2a8>
 80037d6:	e00f      	b.n	80037f8 <UART_SetConfig+0x2b8>
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037de:	e022      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037e0:	2302      	movs	r3, #2
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e6:	e01e      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ee:	e01a      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f6:	e016      	b.n	8003826 <UART_SetConfig+0x2e6>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fe:	e012      	b.n	8003826 <UART_SetConfig+0x2e6>
 8003800:	efff69f3 	.word	0xefff69f3
 8003804:	40008000 	.word	0x40008000
 8003808:	40013800 	.word	0x40013800
 800380c:	40021000 	.word	0x40021000
 8003810:	40004400 	.word	0x40004400
 8003814:	40004800 	.word	0x40004800
 8003818:	40004c00 	.word	0x40004c00
 800381c:	40005000 	.word	0x40005000
 8003820:	2310      	movs	r3, #16
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a9f      	ldr	r2, [pc, #636]	@ (8003aa8 <UART_SetConfig+0x568>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d17a      	bne.n	8003926 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003830:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003834:	2b08      	cmp	r3, #8
 8003836:	d824      	bhi.n	8003882 <UART_SetConfig+0x342>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <UART_SetConfig+0x300>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003865 	.word	0x08003865
 8003844:	08003883 	.word	0x08003883
 8003848:	0800386d 	.word	0x0800386d
 800384c:	08003883 	.word	0x08003883
 8003850:	08003873 	.word	0x08003873
 8003854:	08003883 	.word	0x08003883
 8003858:	08003883 	.word	0x08003883
 800385c:	08003883 	.word	0x08003883
 8003860:	0800387b 	.word	0x0800387b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7ff f84c 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8003868:	61f8      	str	r0, [r7, #28]
        break;
 800386a:	e010      	b.n	800388e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386c:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <UART_SetConfig+0x56c>)
 800386e:	61fb      	str	r3, [r7, #28]
        break;
 8003870:	e00d      	b.n	800388e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003872:	f7fe ffad 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8003876:	61f8      	str	r0, [r7, #28]
        break;
 8003878:	e009      	b.n	800388e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387e:	61fb      	str	r3, [r7, #28]
        break;
 8003880:	e005      	b.n	800388e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800388c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80fb 	beq.w	8003a8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d305      	bcc.n	80038b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d903      	bls.n	80038ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038b8:	e0e8      	b.n	8003a8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2200      	movs	r2, #0
 80038be:	461c      	mov	r4, r3
 80038c0:	4615      	mov	r5, r2
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	022b      	lsls	r3, r5, #8
 80038cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038d0:	0222      	lsls	r2, r4, #8
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	6849      	ldr	r1, [r1, #4]
 80038d6:	0849      	lsrs	r1, r1, #1
 80038d8:	2000      	movs	r0, #0
 80038da:	4688      	mov	r8, r1
 80038dc:	4681      	mov	r9, r0
 80038de:	eb12 0a08 	adds.w	sl, r2, r8
 80038e2:	eb43 0b09 	adc.w	fp, r3, r9
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f4:	4650      	mov	r0, sl
 80038f6:	4659      	mov	r1, fp
 80038f8:	f7fc fcba 	bl	8000270 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800390a:	d308      	bcc.n	800391e <UART_SetConfig+0x3de>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003912:	d204      	bcs.n	800391e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	e0b6      	b.n	8003a8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003924:	e0b2      	b.n	8003a8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392e:	d15e      	bne.n	80039ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003930:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003934:	2b08      	cmp	r3, #8
 8003936:	d828      	bhi.n	800398a <UART_SetConfig+0x44a>
 8003938:	a201      	add	r2, pc, #4	@ (adr r2, 8003940 <UART_SetConfig+0x400>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003965 	.word	0x08003965
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003975 	.word	0x08003975
 800394c:	0800398b 	.word	0x0800398b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800398b 	.word	0x0800398b
 8003958:	0800398b 	.word	0x0800398b
 800395c:	0800398b 	.word	0x0800398b
 8003960:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003964:	f7fe ffcc 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8003968:	61f8      	str	r0, [r7, #28]
        break;
 800396a:	e014      	b.n	8003996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7fe ffde 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8003970:	61f8      	str	r0, [r7, #28]
        break;
 8003972:	e010      	b.n	8003996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b4d      	ldr	r3, [pc, #308]	@ (8003aac <UART_SetConfig+0x56c>)
 8003976:	61fb      	str	r3, [r7, #28]
        break;
 8003978:	e00d      	b.n	8003996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7fe ff29 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800397e:	61f8      	str	r0, [r7, #28]
        break;
 8003980:	e009      	b.n	8003996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003986:	61fb      	str	r3, [r7, #28]
        break;
 8003988:	e005      	b.n	8003996 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d077      	beq.n	8003a8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005a      	lsls	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	441a      	add	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d916      	bls.n	80039e6 <UART_SetConfig+0x4a6>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039be:	d212      	bcs.n	80039e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	8afb      	ldrh	r3, [r7, #22]
 80039d8:	4313      	orrs	r3, r2
 80039da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	8afa      	ldrh	r2, [r7, #22]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	e052      	b.n	8003a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039ec:	e04e      	b.n	8003a8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d827      	bhi.n	8003a46 <UART_SetConfig+0x506>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <UART_SetConfig+0x4bc>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a21 	.word	0x08003a21
 8003a00:	08003a29 	.word	0x08003a29
 8003a04:	08003a31 	.word	0x08003a31
 8003a08:	08003a47 	.word	0x08003a47
 8003a0c:	08003a37 	.word	0x08003a37
 8003a10:	08003a47 	.word	0x08003a47
 8003a14:	08003a47 	.word	0x08003a47
 8003a18:	08003a47 	.word	0x08003a47
 8003a1c:	08003a3f 	.word	0x08003a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a20:	f7fe ff6e 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8003a24:	61f8      	str	r0, [r7, #28]
        break;
 8003a26:	e014      	b.n	8003a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a28:	f7fe ff80 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8003a2c:	61f8      	str	r0, [r7, #28]
        break;
 8003a2e:	e010      	b.n	8003a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a30:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <UART_SetConfig+0x56c>)
 8003a32:	61fb      	str	r3, [r7, #28]
        break;
 8003a34:	e00d      	b.n	8003a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a36:	f7fe fecb 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8003a3a:	61f8      	str	r0, [r7, #28]
        break;
 8003a3c:	e009      	b.n	8003a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a42:	61fb      	str	r3, [r7, #28]
        break;
 8003a44:	e005      	b.n	8003a52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a50:	bf00      	nop
    }

    if (pclk != 0U)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d019      	beq.n	8003a8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	085a      	lsrs	r2, r3, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	441a      	add	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b0f      	cmp	r3, #15
 8003a70:	d909      	bls.n	8003a86 <UART_SetConfig+0x546>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a78:	d205      	bcs.n	8003a86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
 8003a84:	e002      	b.n	8003a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3728      	adds	r7, #40	@ 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40008000 	.word	0x40008000
 8003aac:	00f42400 	.word	0x00f42400

08003ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bae:	d10a      	bne.n	8003bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b098      	sub	sp, #96	@ 0x60
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c04:	f7fd f966 	bl	8000ed4 <HAL_GetTick>
 8003c08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d12e      	bne.n	8003c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f88c 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d021      	beq.n	8003c76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e062      	b.n	8003d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d149      	bne.n	8003d18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f856 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03c      	beq.n	8003d18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	623b      	str	r3, [r7, #32]
   return(result);
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e6      	bne.n	8003c9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3308      	adds	r3, #8
 8003cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf0:	61fa      	str	r2, [r7, #28]
 8003cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e011      	b.n	8003d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3758      	adds	r7, #88	@ 0x58
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	e04f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d5c:	d04b      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fd f8b9 	bl	8000ed4 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e04e      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d037      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b80      	cmp	r3, #128	@ 0x80
 8003d8a:	d034      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	d031      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d110      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2208      	movs	r2, #8
 8003da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f838 	bl	8003e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2208      	movs	r2, #8
 8003db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e029      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd0:	d111      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f81e 	bl	8003e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e00f      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0a0      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b095      	sub	sp, #84	@ 0x54
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e6      	bne.n	8003e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d118      	bne.n	8003ec6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e6      	bne.n	8003e94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	@ 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <std>:
 8003ee8:	2300      	movs	r3, #0
 8003eea:	b510      	push	{r4, lr}
 8003eec:	4604      	mov	r4, r0
 8003eee:	e9c0 3300 	strd	r3, r3, [r0]
 8003ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ef6:	6083      	str	r3, [r0, #8]
 8003ef8:	8181      	strh	r1, [r0, #12]
 8003efa:	6643      	str	r3, [r0, #100]	@ 0x64
 8003efc:	81c2      	strh	r2, [r0, #14]
 8003efe:	6183      	str	r3, [r0, #24]
 8003f00:	4619      	mov	r1, r3
 8003f02:	2208      	movs	r2, #8
 8003f04:	305c      	adds	r0, #92	@ 0x5c
 8003f06:	f000 f8c3 	bl	8004090 <memset>
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <std+0x58>)
 8003f0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <std+0x5c>)
 8003f10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f12:	4b0d      	ldr	r3, [pc, #52]	@ (8003f48 <std+0x60>)
 8003f14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f16:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <std+0x64>)
 8003f18:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <std+0x68>)
 8003f1c:	6224      	str	r4, [r4, #32]
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d006      	beq.n	8003f30 <std+0x48>
 8003f22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f26:	4294      	cmp	r4, r2
 8003f28:	d002      	beq.n	8003f30 <std+0x48>
 8003f2a:	33d0      	adds	r3, #208	@ 0xd0
 8003f2c:	429c      	cmp	r4, r3
 8003f2e:	d105      	bne.n	8003f3c <std+0x54>
 8003f30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f38:	f000 b8dc 	b.w	80040f4 <__retarget_lock_init_recursive>
 8003f3c:	bd10      	pop	{r4, pc}
 8003f3e:	bf00      	nop
 8003f40:	08004949 	.word	0x08004949
 8003f44:	0800496b 	.word	0x0800496b
 8003f48:	080049a3 	.word	0x080049a3
 8003f4c:	080049c7 	.word	0x080049c7
 8003f50:	20000168 	.word	0x20000168

08003f54 <stdio_exit_handler>:
 8003f54:	4a02      	ldr	r2, [pc, #8]	@ (8003f60 <stdio_exit_handler+0xc>)
 8003f56:	4903      	ldr	r1, [pc, #12]	@ (8003f64 <stdio_exit_handler+0x10>)
 8003f58:	4803      	ldr	r0, [pc, #12]	@ (8003f68 <stdio_exit_handler+0x14>)
 8003f5a:	f000 b869 	b.w	8004030 <_fwalk_sglue>
 8003f5e:	bf00      	nop
 8003f60:	2000000c 	.word	0x2000000c
 8003f64:	080048e1 	.word	0x080048e1
 8003f68:	2000001c 	.word	0x2000001c

08003f6c <cleanup_stdio>:
 8003f6c:	6841      	ldr	r1, [r0, #4]
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <cleanup_stdio+0x34>)
 8003f70:	4299      	cmp	r1, r3
 8003f72:	b510      	push	{r4, lr}
 8003f74:	4604      	mov	r4, r0
 8003f76:	d001      	beq.n	8003f7c <cleanup_stdio+0x10>
 8003f78:	f000 fcb2 	bl	80048e0 <_fflush_r>
 8003f7c:	68a1      	ldr	r1, [r4, #8]
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <cleanup_stdio+0x38>)
 8003f80:	4299      	cmp	r1, r3
 8003f82:	d002      	beq.n	8003f8a <cleanup_stdio+0x1e>
 8003f84:	4620      	mov	r0, r4
 8003f86:	f000 fcab 	bl	80048e0 <_fflush_r>
 8003f8a:	68e1      	ldr	r1, [r4, #12]
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <cleanup_stdio+0x3c>)
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	d004      	beq.n	8003f9c <cleanup_stdio+0x30>
 8003f92:	4620      	mov	r0, r4
 8003f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f98:	f000 bca2 	b.w	80048e0 <_fflush_r>
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000168 	.word	0x20000168
 8003fa4:	200001d0 	.word	0x200001d0
 8003fa8:	20000238 	.word	0x20000238

08003fac <global_stdio_init.part.0>:
 8003fac:	b510      	push	{r4, lr}
 8003fae:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <global_stdio_init.part.0+0x30>)
 8003fb0:	4c0b      	ldr	r4, [pc, #44]	@ (8003fe0 <global_stdio_init.part.0+0x34>)
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe4 <global_stdio_init.part.0+0x38>)
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2104      	movs	r1, #4
 8003fbc:	f7ff ff94 	bl	8003ee8 <std>
 8003fc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	2109      	movs	r1, #9
 8003fc8:	f7ff ff8e 	bl	8003ee8 <std>
 8003fcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd6:	2112      	movs	r1, #18
 8003fd8:	f7ff bf86 	b.w	8003ee8 <std>
 8003fdc:	200002a0 	.word	0x200002a0
 8003fe0:	20000168 	.word	0x20000168
 8003fe4:	08003f55 	.word	0x08003f55

08003fe8 <__sfp_lock_acquire>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	@ (8003ff0 <__sfp_lock_acquire+0x8>)
 8003fea:	f000 b884 	b.w	80040f6 <__retarget_lock_acquire_recursive>
 8003fee:	bf00      	nop
 8003ff0:	200002a5 	.word	0x200002a5

08003ff4 <__sfp_lock_release>:
 8003ff4:	4801      	ldr	r0, [pc, #4]	@ (8003ffc <__sfp_lock_release+0x8>)
 8003ff6:	f000 b87f 	b.w	80040f8 <__retarget_lock_release_recursive>
 8003ffa:	bf00      	nop
 8003ffc:	200002a5 	.word	0x200002a5

08004000 <__sinit>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4604      	mov	r4, r0
 8004004:	f7ff fff0 	bl	8003fe8 <__sfp_lock_acquire>
 8004008:	6a23      	ldr	r3, [r4, #32]
 800400a:	b11b      	cbz	r3, 8004014 <__sinit+0x14>
 800400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004010:	f7ff bff0 	b.w	8003ff4 <__sfp_lock_release>
 8004014:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <__sinit+0x28>)
 8004016:	6223      	str	r3, [r4, #32]
 8004018:	4b04      	ldr	r3, [pc, #16]	@ (800402c <__sinit+0x2c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f5      	bne.n	800400c <__sinit+0xc>
 8004020:	f7ff ffc4 	bl	8003fac <global_stdio_init.part.0>
 8004024:	e7f2      	b.n	800400c <__sinit+0xc>
 8004026:	bf00      	nop
 8004028:	08003f6d 	.word	0x08003f6d
 800402c:	200002a0 	.word	0x200002a0

08004030 <_fwalk_sglue>:
 8004030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004034:	4607      	mov	r7, r0
 8004036:	4688      	mov	r8, r1
 8004038:	4614      	mov	r4, r2
 800403a:	2600      	movs	r6, #0
 800403c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004040:	f1b9 0901 	subs.w	r9, r9, #1
 8004044:	d505      	bpl.n	8004052 <_fwalk_sglue+0x22>
 8004046:	6824      	ldr	r4, [r4, #0]
 8004048:	2c00      	cmp	r4, #0
 800404a:	d1f7      	bne.n	800403c <_fwalk_sglue+0xc>
 800404c:	4630      	mov	r0, r6
 800404e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004052:	89ab      	ldrh	r3, [r5, #12]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d907      	bls.n	8004068 <_fwalk_sglue+0x38>
 8004058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800405c:	3301      	adds	r3, #1
 800405e:	d003      	beq.n	8004068 <_fwalk_sglue+0x38>
 8004060:	4629      	mov	r1, r5
 8004062:	4638      	mov	r0, r7
 8004064:	47c0      	blx	r8
 8004066:	4306      	orrs	r6, r0
 8004068:	3568      	adds	r5, #104	@ 0x68
 800406a:	e7e9      	b.n	8004040 <_fwalk_sglue+0x10>

0800406c <iprintf>:
 800406c:	b40f      	push	{r0, r1, r2, r3}
 800406e:	b507      	push	{r0, r1, r2, lr}
 8004070:	4906      	ldr	r1, [pc, #24]	@ (800408c <iprintf+0x20>)
 8004072:	ab04      	add	r3, sp, #16
 8004074:	6808      	ldr	r0, [r1, #0]
 8004076:	f853 2b04 	ldr.w	r2, [r3], #4
 800407a:	6881      	ldr	r1, [r0, #8]
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	f000 f865 	bl	800414c <_vfiprintf_r>
 8004082:	b003      	add	sp, #12
 8004084:	f85d eb04 	ldr.w	lr, [sp], #4
 8004088:	b004      	add	sp, #16
 800408a:	4770      	bx	lr
 800408c:	20000018 	.word	0x20000018

08004090 <memset>:
 8004090:	4402      	add	r2, r0
 8004092:	4603      	mov	r3, r0
 8004094:	4293      	cmp	r3, r2
 8004096:	d100      	bne.n	800409a <memset+0xa>
 8004098:	4770      	bx	lr
 800409a:	f803 1b01 	strb.w	r1, [r3], #1
 800409e:	e7f9      	b.n	8004094 <memset+0x4>

080040a0 <__errno>:
 80040a0:	4b01      	ldr	r3, [pc, #4]	@ (80040a8 <__errno+0x8>)
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20000018 	.word	0x20000018

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4d0d      	ldr	r5, [pc, #52]	@ (80040e4 <__libc_init_array+0x38>)
 80040b0:	4c0d      	ldr	r4, [pc, #52]	@ (80040e8 <__libc_init_array+0x3c>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	2600      	movs	r6, #0
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	@ (80040ec <__libc_init_array+0x40>)
 80040be:	4c0c      	ldr	r4, [pc, #48]	@ (80040f0 <__libc_init_array+0x44>)
 80040c0:	f000 fe3e 	bl	8004d40 <_init>
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	08004e18 	.word	0x08004e18
 80040e8:	08004e18 	.word	0x08004e18
 80040ec:	08004e18 	.word	0x08004e18
 80040f0:	08004e1c 	.word	0x08004e1c

080040f4 <__retarget_lock_init_recursive>:
 80040f4:	4770      	bx	lr

080040f6 <__retarget_lock_acquire_recursive>:
 80040f6:	4770      	bx	lr

080040f8 <__retarget_lock_release_recursive>:
 80040f8:	4770      	bx	lr

080040fa <__sfputc_r>:
 80040fa:	6893      	ldr	r3, [r2, #8]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	b410      	push	{r4}
 8004102:	6093      	str	r3, [r2, #8]
 8004104:	da08      	bge.n	8004118 <__sfputc_r+0x1e>
 8004106:	6994      	ldr	r4, [r2, #24]
 8004108:	42a3      	cmp	r3, r4
 800410a:	db01      	blt.n	8004110 <__sfputc_r+0x16>
 800410c:	290a      	cmp	r1, #10
 800410e:	d103      	bne.n	8004118 <__sfputc_r+0x1e>
 8004110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004114:	f000 bc5b 	b.w	80049ce <__swbuf_r>
 8004118:	6813      	ldr	r3, [r2, #0]
 800411a:	1c58      	adds	r0, r3, #1
 800411c:	6010      	str	r0, [r2, #0]
 800411e:	7019      	strb	r1, [r3, #0]
 8004120:	4608      	mov	r0, r1
 8004122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004126:	4770      	bx	lr

08004128 <__sfputs_r>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	4606      	mov	r6, r0
 800412c:	460f      	mov	r7, r1
 800412e:	4614      	mov	r4, r2
 8004130:	18d5      	adds	r5, r2, r3
 8004132:	42ac      	cmp	r4, r5
 8004134:	d101      	bne.n	800413a <__sfputs_r+0x12>
 8004136:	2000      	movs	r0, #0
 8004138:	e007      	b.n	800414a <__sfputs_r+0x22>
 800413a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413e:	463a      	mov	r2, r7
 8004140:	4630      	mov	r0, r6
 8004142:	f7ff ffda 	bl	80040fa <__sfputc_r>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	d1f3      	bne.n	8004132 <__sfputs_r+0xa>
 800414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800414c <_vfiprintf_r>:
 800414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004150:	460d      	mov	r5, r1
 8004152:	b09d      	sub	sp, #116	@ 0x74
 8004154:	4614      	mov	r4, r2
 8004156:	4698      	mov	r8, r3
 8004158:	4606      	mov	r6, r0
 800415a:	b118      	cbz	r0, 8004164 <_vfiprintf_r+0x18>
 800415c:	6a03      	ldr	r3, [r0, #32]
 800415e:	b90b      	cbnz	r3, 8004164 <_vfiprintf_r+0x18>
 8004160:	f7ff ff4e 	bl	8004000 <__sinit>
 8004164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004166:	07d9      	lsls	r1, r3, #31
 8004168:	d405      	bmi.n	8004176 <_vfiprintf_r+0x2a>
 800416a:	89ab      	ldrh	r3, [r5, #12]
 800416c:	059a      	lsls	r2, r3, #22
 800416e:	d402      	bmi.n	8004176 <_vfiprintf_r+0x2a>
 8004170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004172:	f7ff ffc0 	bl	80040f6 <__retarget_lock_acquire_recursive>
 8004176:	89ab      	ldrh	r3, [r5, #12]
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	d501      	bpl.n	8004180 <_vfiprintf_r+0x34>
 800417c:	692b      	ldr	r3, [r5, #16]
 800417e:	b99b      	cbnz	r3, 80041a8 <_vfiprintf_r+0x5c>
 8004180:	4629      	mov	r1, r5
 8004182:	4630      	mov	r0, r6
 8004184:	f000 fc62 	bl	8004a4c <__swsetup_r>
 8004188:	b170      	cbz	r0, 80041a8 <_vfiprintf_r+0x5c>
 800418a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800418c:	07dc      	lsls	r4, r3, #31
 800418e:	d504      	bpl.n	800419a <_vfiprintf_r+0x4e>
 8004190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004194:	b01d      	add	sp, #116	@ 0x74
 8004196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800419a:	89ab      	ldrh	r3, [r5, #12]
 800419c:	0598      	lsls	r0, r3, #22
 800419e:	d4f7      	bmi.n	8004190 <_vfiprintf_r+0x44>
 80041a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041a2:	f7ff ffa9 	bl	80040f8 <__retarget_lock_release_recursive>
 80041a6:	e7f3      	b.n	8004190 <_vfiprintf_r+0x44>
 80041a8:	2300      	movs	r3, #0
 80041aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ac:	2320      	movs	r3, #32
 80041ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b6:	2330      	movs	r3, #48	@ 0x30
 80041b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004368 <_vfiprintf_r+0x21c>
 80041bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041c0:	f04f 0901 	mov.w	r9, #1
 80041c4:	4623      	mov	r3, r4
 80041c6:	469a      	mov	sl, r3
 80041c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041cc:	b10a      	cbz	r2, 80041d2 <_vfiprintf_r+0x86>
 80041ce:	2a25      	cmp	r2, #37	@ 0x25
 80041d0:	d1f9      	bne.n	80041c6 <_vfiprintf_r+0x7a>
 80041d2:	ebba 0b04 	subs.w	fp, sl, r4
 80041d6:	d00b      	beq.n	80041f0 <_vfiprintf_r+0xa4>
 80041d8:	465b      	mov	r3, fp
 80041da:	4622      	mov	r2, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	4630      	mov	r0, r6
 80041e0:	f7ff ffa2 	bl	8004128 <__sfputs_r>
 80041e4:	3001      	adds	r0, #1
 80041e6:	f000 80a7 	beq.w	8004338 <_vfiprintf_r+0x1ec>
 80041ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041ec:	445a      	add	r2, fp
 80041ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80041f0:	f89a 3000 	ldrb.w	r3, [sl]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 809f 	beq.w	8004338 <_vfiprintf_r+0x1ec>
 80041fa:	2300      	movs	r3, #0
 80041fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004204:	f10a 0a01 	add.w	sl, sl, #1
 8004208:	9304      	str	r3, [sp, #16]
 800420a:	9307      	str	r3, [sp, #28]
 800420c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004210:	931a      	str	r3, [sp, #104]	@ 0x68
 8004212:	4654      	mov	r4, sl
 8004214:	2205      	movs	r2, #5
 8004216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800421a:	4853      	ldr	r0, [pc, #332]	@ (8004368 <_vfiprintf_r+0x21c>)
 800421c:	f7fb ffd8 	bl	80001d0 <memchr>
 8004220:	9a04      	ldr	r2, [sp, #16]
 8004222:	b9d8      	cbnz	r0, 800425c <_vfiprintf_r+0x110>
 8004224:	06d1      	lsls	r1, r2, #27
 8004226:	bf44      	itt	mi
 8004228:	2320      	movmi	r3, #32
 800422a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800422e:	0713      	lsls	r3, r2, #28
 8004230:	bf44      	itt	mi
 8004232:	232b      	movmi	r3, #43	@ 0x2b
 8004234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004238:	f89a 3000 	ldrb.w	r3, [sl]
 800423c:	2b2a      	cmp	r3, #42	@ 0x2a
 800423e:	d015      	beq.n	800426c <_vfiprintf_r+0x120>
 8004240:	9a07      	ldr	r2, [sp, #28]
 8004242:	4654      	mov	r4, sl
 8004244:	2000      	movs	r0, #0
 8004246:	f04f 0c0a 	mov.w	ip, #10
 800424a:	4621      	mov	r1, r4
 800424c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004250:	3b30      	subs	r3, #48	@ 0x30
 8004252:	2b09      	cmp	r3, #9
 8004254:	d94b      	bls.n	80042ee <_vfiprintf_r+0x1a2>
 8004256:	b1b0      	cbz	r0, 8004286 <_vfiprintf_r+0x13a>
 8004258:	9207      	str	r2, [sp, #28]
 800425a:	e014      	b.n	8004286 <_vfiprintf_r+0x13a>
 800425c:	eba0 0308 	sub.w	r3, r0, r8
 8004260:	fa09 f303 	lsl.w	r3, r9, r3
 8004264:	4313      	orrs	r3, r2
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	46a2      	mov	sl, r4
 800426a:	e7d2      	b.n	8004212 <_vfiprintf_r+0xc6>
 800426c:	9b03      	ldr	r3, [sp, #12]
 800426e:	1d19      	adds	r1, r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	9103      	str	r1, [sp, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	bfbb      	ittet	lt
 8004278:	425b      	neglt	r3, r3
 800427a:	f042 0202 	orrlt.w	r2, r2, #2
 800427e:	9307      	strge	r3, [sp, #28]
 8004280:	9307      	strlt	r3, [sp, #28]
 8004282:	bfb8      	it	lt
 8004284:	9204      	strlt	r2, [sp, #16]
 8004286:	7823      	ldrb	r3, [r4, #0]
 8004288:	2b2e      	cmp	r3, #46	@ 0x2e
 800428a:	d10a      	bne.n	80042a2 <_vfiprintf_r+0x156>
 800428c:	7863      	ldrb	r3, [r4, #1]
 800428e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004290:	d132      	bne.n	80042f8 <_vfiprintf_r+0x1ac>
 8004292:	9b03      	ldr	r3, [sp, #12]
 8004294:	1d1a      	adds	r2, r3, #4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	9203      	str	r2, [sp, #12]
 800429a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800429e:	3402      	adds	r4, #2
 80042a0:	9305      	str	r3, [sp, #20]
 80042a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004378 <_vfiprintf_r+0x22c>
 80042a6:	7821      	ldrb	r1, [r4, #0]
 80042a8:	2203      	movs	r2, #3
 80042aa:	4650      	mov	r0, sl
 80042ac:	f7fb ff90 	bl	80001d0 <memchr>
 80042b0:	b138      	cbz	r0, 80042c2 <_vfiprintf_r+0x176>
 80042b2:	9b04      	ldr	r3, [sp, #16]
 80042b4:	eba0 000a 	sub.w	r0, r0, sl
 80042b8:	2240      	movs	r2, #64	@ 0x40
 80042ba:	4082      	lsls	r2, r0
 80042bc:	4313      	orrs	r3, r2
 80042be:	3401      	adds	r4, #1
 80042c0:	9304      	str	r3, [sp, #16]
 80042c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c6:	4829      	ldr	r0, [pc, #164]	@ (800436c <_vfiprintf_r+0x220>)
 80042c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042cc:	2206      	movs	r2, #6
 80042ce:	f7fb ff7f 	bl	80001d0 <memchr>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d03f      	beq.n	8004356 <_vfiprintf_r+0x20a>
 80042d6:	4b26      	ldr	r3, [pc, #152]	@ (8004370 <_vfiprintf_r+0x224>)
 80042d8:	bb1b      	cbnz	r3, 8004322 <_vfiprintf_r+0x1d6>
 80042da:	9b03      	ldr	r3, [sp, #12]
 80042dc:	3307      	adds	r3, #7
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	3308      	adds	r3, #8
 80042e4:	9303      	str	r3, [sp, #12]
 80042e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e8:	443b      	add	r3, r7
 80042ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ec:	e76a      	b.n	80041c4 <_vfiprintf_r+0x78>
 80042ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f2:	460c      	mov	r4, r1
 80042f4:	2001      	movs	r0, #1
 80042f6:	e7a8      	b.n	800424a <_vfiprintf_r+0xfe>
 80042f8:	2300      	movs	r3, #0
 80042fa:	3401      	adds	r4, #1
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	4619      	mov	r1, r3
 8004300:	f04f 0c0a 	mov.w	ip, #10
 8004304:	4620      	mov	r0, r4
 8004306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800430a:	3a30      	subs	r2, #48	@ 0x30
 800430c:	2a09      	cmp	r2, #9
 800430e:	d903      	bls.n	8004318 <_vfiprintf_r+0x1cc>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0c6      	beq.n	80042a2 <_vfiprintf_r+0x156>
 8004314:	9105      	str	r1, [sp, #20]
 8004316:	e7c4      	b.n	80042a2 <_vfiprintf_r+0x156>
 8004318:	fb0c 2101 	mla	r1, ip, r1, r2
 800431c:	4604      	mov	r4, r0
 800431e:	2301      	movs	r3, #1
 8004320:	e7f0      	b.n	8004304 <_vfiprintf_r+0x1b8>
 8004322:	ab03      	add	r3, sp, #12
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	462a      	mov	r2, r5
 8004328:	4b12      	ldr	r3, [pc, #72]	@ (8004374 <_vfiprintf_r+0x228>)
 800432a:	a904      	add	r1, sp, #16
 800432c:	4630      	mov	r0, r6
 800432e:	f3af 8000 	nop.w
 8004332:	4607      	mov	r7, r0
 8004334:	1c78      	adds	r0, r7, #1
 8004336:	d1d6      	bne.n	80042e6 <_vfiprintf_r+0x19a>
 8004338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800433a:	07d9      	lsls	r1, r3, #31
 800433c:	d405      	bmi.n	800434a <_vfiprintf_r+0x1fe>
 800433e:	89ab      	ldrh	r3, [r5, #12]
 8004340:	059a      	lsls	r2, r3, #22
 8004342:	d402      	bmi.n	800434a <_vfiprintf_r+0x1fe>
 8004344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004346:	f7ff fed7 	bl	80040f8 <__retarget_lock_release_recursive>
 800434a:	89ab      	ldrh	r3, [r5, #12]
 800434c:	065b      	lsls	r3, r3, #25
 800434e:	f53f af1f 	bmi.w	8004190 <_vfiprintf_r+0x44>
 8004352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004354:	e71e      	b.n	8004194 <_vfiprintf_r+0x48>
 8004356:	ab03      	add	r3, sp, #12
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	462a      	mov	r2, r5
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <_vfiprintf_r+0x228>)
 800435e:	a904      	add	r1, sp, #16
 8004360:	4630      	mov	r0, r6
 8004362:	f000 f91b 	bl	800459c <_printf_i>
 8004366:	e7e4      	b.n	8004332 <_vfiprintf_r+0x1e6>
 8004368:	08004ddc 	.word	0x08004ddc
 800436c:	08004de6 	.word	0x08004de6
 8004370:	00000000 	.word	0x00000000
 8004374:	08004129 	.word	0x08004129
 8004378:	08004de2 	.word	0x08004de2

0800437c <sbrk_aligned>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4e0f      	ldr	r6, [pc, #60]	@ (80043bc <sbrk_aligned+0x40>)
 8004380:	460c      	mov	r4, r1
 8004382:	6831      	ldr	r1, [r6, #0]
 8004384:	4605      	mov	r5, r0
 8004386:	b911      	cbnz	r1, 800438e <sbrk_aligned+0x12>
 8004388:	f000 fc4c 	bl	8004c24 <_sbrk_r>
 800438c:	6030      	str	r0, [r6, #0]
 800438e:	4621      	mov	r1, r4
 8004390:	4628      	mov	r0, r5
 8004392:	f000 fc47 	bl	8004c24 <_sbrk_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d103      	bne.n	80043a2 <sbrk_aligned+0x26>
 800439a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800439e:	4620      	mov	r0, r4
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
 80043a2:	1cc4      	adds	r4, r0, #3
 80043a4:	f024 0403 	bic.w	r4, r4, #3
 80043a8:	42a0      	cmp	r0, r4
 80043aa:	d0f8      	beq.n	800439e <sbrk_aligned+0x22>
 80043ac:	1a21      	subs	r1, r4, r0
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 fc38 	bl	8004c24 <_sbrk_r>
 80043b4:	3001      	adds	r0, #1
 80043b6:	d1f2      	bne.n	800439e <sbrk_aligned+0x22>
 80043b8:	e7ef      	b.n	800439a <sbrk_aligned+0x1e>
 80043ba:	bf00      	nop
 80043bc:	200002a8 	.word	0x200002a8

080043c0 <_malloc_r>:
 80043c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043c4:	1ccd      	adds	r5, r1, #3
 80043c6:	f025 0503 	bic.w	r5, r5, #3
 80043ca:	3508      	adds	r5, #8
 80043cc:	2d0c      	cmp	r5, #12
 80043ce:	bf38      	it	cc
 80043d0:	250c      	movcc	r5, #12
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	4606      	mov	r6, r0
 80043d6:	db01      	blt.n	80043dc <_malloc_r+0x1c>
 80043d8:	42a9      	cmp	r1, r5
 80043da:	d904      	bls.n	80043e6 <_malloc_r+0x26>
 80043dc:	230c      	movs	r3, #12
 80043de:	6033      	str	r3, [r6, #0]
 80043e0:	2000      	movs	r0, #0
 80043e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044bc <_malloc_r+0xfc>
 80043ea:	f000 faa1 	bl	8004930 <__malloc_lock>
 80043ee:	f8d8 3000 	ldr.w	r3, [r8]
 80043f2:	461c      	mov	r4, r3
 80043f4:	bb44      	cbnz	r4, 8004448 <_malloc_r+0x88>
 80043f6:	4629      	mov	r1, r5
 80043f8:	4630      	mov	r0, r6
 80043fa:	f7ff ffbf 	bl	800437c <sbrk_aligned>
 80043fe:	1c43      	adds	r3, r0, #1
 8004400:	4604      	mov	r4, r0
 8004402:	d158      	bne.n	80044b6 <_malloc_r+0xf6>
 8004404:	f8d8 4000 	ldr.w	r4, [r8]
 8004408:	4627      	mov	r7, r4
 800440a:	2f00      	cmp	r7, #0
 800440c:	d143      	bne.n	8004496 <_malloc_r+0xd6>
 800440e:	2c00      	cmp	r4, #0
 8004410:	d04b      	beq.n	80044aa <_malloc_r+0xea>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	4639      	mov	r1, r7
 8004416:	4630      	mov	r0, r6
 8004418:	eb04 0903 	add.w	r9, r4, r3
 800441c:	f000 fc02 	bl	8004c24 <_sbrk_r>
 8004420:	4581      	cmp	r9, r0
 8004422:	d142      	bne.n	80044aa <_malloc_r+0xea>
 8004424:	6821      	ldr	r1, [r4, #0]
 8004426:	1a6d      	subs	r5, r5, r1
 8004428:	4629      	mov	r1, r5
 800442a:	4630      	mov	r0, r6
 800442c:	f7ff ffa6 	bl	800437c <sbrk_aligned>
 8004430:	3001      	adds	r0, #1
 8004432:	d03a      	beq.n	80044aa <_malloc_r+0xea>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	442b      	add	r3, r5
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	f8d8 3000 	ldr.w	r3, [r8]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	bb62      	cbnz	r2, 800449c <_malloc_r+0xdc>
 8004442:	f8c8 7000 	str.w	r7, [r8]
 8004446:	e00f      	b.n	8004468 <_malloc_r+0xa8>
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	1b52      	subs	r2, r2, r5
 800444c:	d420      	bmi.n	8004490 <_malloc_r+0xd0>
 800444e:	2a0b      	cmp	r2, #11
 8004450:	d917      	bls.n	8004482 <_malloc_r+0xc2>
 8004452:	1961      	adds	r1, r4, r5
 8004454:	42a3      	cmp	r3, r4
 8004456:	6025      	str	r5, [r4, #0]
 8004458:	bf18      	it	ne
 800445a:	6059      	strne	r1, [r3, #4]
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	bf08      	it	eq
 8004460:	f8c8 1000 	streq.w	r1, [r8]
 8004464:	5162      	str	r2, [r4, r5]
 8004466:	604b      	str	r3, [r1, #4]
 8004468:	4630      	mov	r0, r6
 800446a:	f000 fa67 	bl	800493c <__malloc_unlock>
 800446e:	f104 000b 	add.w	r0, r4, #11
 8004472:	1d23      	adds	r3, r4, #4
 8004474:	f020 0007 	bic.w	r0, r0, #7
 8004478:	1ac2      	subs	r2, r0, r3
 800447a:	bf1c      	itt	ne
 800447c:	1a1b      	subne	r3, r3, r0
 800447e:	50a3      	strne	r3, [r4, r2]
 8004480:	e7af      	b.n	80043e2 <_malloc_r+0x22>
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	42a3      	cmp	r3, r4
 8004486:	bf0c      	ite	eq
 8004488:	f8c8 2000 	streq.w	r2, [r8]
 800448c:	605a      	strne	r2, [r3, #4]
 800448e:	e7eb      	b.n	8004468 <_malloc_r+0xa8>
 8004490:	4623      	mov	r3, r4
 8004492:	6864      	ldr	r4, [r4, #4]
 8004494:	e7ae      	b.n	80043f4 <_malloc_r+0x34>
 8004496:	463c      	mov	r4, r7
 8004498:	687f      	ldr	r7, [r7, #4]
 800449a:	e7b6      	b.n	800440a <_malloc_r+0x4a>
 800449c:	461a      	mov	r2, r3
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d1fb      	bne.n	800449c <_malloc_r+0xdc>
 80044a4:	2300      	movs	r3, #0
 80044a6:	6053      	str	r3, [r2, #4]
 80044a8:	e7de      	b.n	8004468 <_malloc_r+0xa8>
 80044aa:	230c      	movs	r3, #12
 80044ac:	6033      	str	r3, [r6, #0]
 80044ae:	4630      	mov	r0, r6
 80044b0:	f000 fa44 	bl	800493c <__malloc_unlock>
 80044b4:	e794      	b.n	80043e0 <_malloc_r+0x20>
 80044b6:	6005      	str	r5, [r0, #0]
 80044b8:	e7d6      	b.n	8004468 <_malloc_r+0xa8>
 80044ba:	bf00      	nop
 80044bc:	200002ac 	.word	0x200002ac

080044c0 <_printf_common>:
 80044c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c4:	4616      	mov	r6, r2
 80044c6:	4698      	mov	r8, r3
 80044c8:	688a      	ldr	r2, [r1, #8]
 80044ca:	690b      	ldr	r3, [r1, #16]
 80044cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bfb8      	it	lt
 80044d4:	4613      	movlt	r3, r2
 80044d6:	6033      	str	r3, [r6, #0]
 80044d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044dc:	4607      	mov	r7, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	b10a      	cbz	r2, 80044e6 <_printf_common+0x26>
 80044e2:	3301      	adds	r3, #1
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	0699      	lsls	r1, r3, #26
 80044ea:	bf42      	ittt	mi
 80044ec:	6833      	ldrmi	r3, [r6, #0]
 80044ee:	3302      	addmi	r3, #2
 80044f0:	6033      	strmi	r3, [r6, #0]
 80044f2:	6825      	ldr	r5, [r4, #0]
 80044f4:	f015 0506 	ands.w	r5, r5, #6
 80044f8:	d106      	bne.n	8004508 <_printf_common+0x48>
 80044fa:	f104 0a19 	add.w	sl, r4, #25
 80044fe:	68e3      	ldr	r3, [r4, #12]
 8004500:	6832      	ldr	r2, [r6, #0]
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	42ab      	cmp	r3, r5
 8004506:	dc26      	bgt.n	8004556 <_printf_common+0x96>
 8004508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	3b00      	subs	r3, #0
 8004510:	bf18      	it	ne
 8004512:	2301      	movne	r3, #1
 8004514:	0692      	lsls	r2, r2, #26
 8004516:	d42b      	bmi.n	8004570 <_printf_common+0xb0>
 8004518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800451c:	4641      	mov	r1, r8
 800451e:	4638      	mov	r0, r7
 8004520:	47c8      	blx	r9
 8004522:	3001      	adds	r0, #1
 8004524:	d01e      	beq.n	8004564 <_printf_common+0xa4>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	6922      	ldr	r2, [r4, #16]
 800452a:	f003 0306 	and.w	r3, r3, #6
 800452e:	2b04      	cmp	r3, #4
 8004530:	bf02      	ittt	eq
 8004532:	68e5      	ldreq	r5, [r4, #12]
 8004534:	6833      	ldreq	r3, [r6, #0]
 8004536:	1aed      	subeq	r5, r5, r3
 8004538:	68a3      	ldr	r3, [r4, #8]
 800453a:	bf0c      	ite	eq
 800453c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004540:	2500      	movne	r5, #0
 8004542:	4293      	cmp	r3, r2
 8004544:	bfc4      	itt	gt
 8004546:	1a9b      	subgt	r3, r3, r2
 8004548:	18ed      	addgt	r5, r5, r3
 800454a:	2600      	movs	r6, #0
 800454c:	341a      	adds	r4, #26
 800454e:	42b5      	cmp	r5, r6
 8004550:	d11a      	bne.n	8004588 <_printf_common+0xc8>
 8004552:	2000      	movs	r0, #0
 8004554:	e008      	b.n	8004568 <_printf_common+0xa8>
 8004556:	2301      	movs	r3, #1
 8004558:	4652      	mov	r2, sl
 800455a:	4641      	mov	r1, r8
 800455c:	4638      	mov	r0, r7
 800455e:	47c8      	blx	r9
 8004560:	3001      	adds	r0, #1
 8004562:	d103      	bne.n	800456c <_printf_common+0xac>
 8004564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	3501      	adds	r5, #1
 800456e:	e7c6      	b.n	80044fe <_printf_common+0x3e>
 8004570:	18e1      	adds	r1, r4, r3
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	2030      	movs	r0, #48	@ 0x30
 8004576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800457a:	4422      	add	r2, r4
 800457c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004584:	3302      	adds	r3, #2
 8004586:	e7c7      	b.n	8004518 <_printf_common+0x58>
 8004588:	2301      	movs	r3, #1
 800458a:	4622      	mov	r2, r4
 800458c:	4641      	mov	r1, r8
 800458e:	4638      	mov	r0, r7
 8004590:	47c8      	blx	r9
 8004592:	3001      	adds	r0, #1
 8004594:	d0e6      	beq.n	8004564 <_printf_common+0xa4>
 8004596:	3601      	adds	r6, #1
 8004598:	e7d9      	b.n	800454e <_printf_common+0x8e>
	...

0800459c <_printf_i>:
 800459c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	7e0f      	ldrb	r7, [r1, #24]
 80045a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045a4:	2f78      	cmp	r7, #120	@ 0x78
 80045a6:	4691      	mov	r9, r2
 80045a8:	4680      	mov	r8, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	469a      	mov	sl, r3
 80045ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045b2:	d807      	bhi.n	80045c4 <_printf_i+0x28>
 80045b4:	2f62      	cmp	r7, #98	@ 0x62
 80045b6:	d80a      	bhi.n	80045ce <_printf_i+0x32>
 80045b8:	2f00      	cmp	r7, #0
 80045ba:	f000 80d1 	beq.w	8004760 <_printf_i+0x1c4>
 80045be:	2f58      	cmp	r7, #88	@ 0x58
 80045c0:	f000 80b8 	beq.w	8004734 <_printf_i+0x198>
 80045c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045cc:	e03a      	b.n	8004644 <_printf_i+0xa8>
 80045ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045d2:	2b15      	cmp	r3, #21
 80045d4:	d8f6      	bhi.n	80045c4 <_printf_i+0x28>
 80045d6:	a101      	add	r1, pc, #4	@ (adr r1, 80045dc <_printf_i+0x40>)
 80045d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045dc:	08004635 	.word	0x08004635
 80045e0:	08004649 	.word	0x08004649
 80045e4:	080045c5 	.word	0x080045c5
 80045e8:	080045c5 	.word	0x080045c5
 80045ec:	080045c5 	.word	0x080045c5
 80045f0:	080045c5 	.word	0x080045c5
 80045f4:	08004649 	.word	0x08004649
 80045f8:	080045c5 	.word	0x080045c5
 80045fc:	080045c5 	.word	0x080045c5
 8004600:	080045c5 	.word	0x080045c5
 8004604:	080045c5 	.word	0x080045c5
 8004608:	08004747 	.word	0x08004747
 800460c:	08004673 	.word	0x08004673
 8004610:	08004701 	.word	0x08004701
 8004614:	080045c5 	.word	0x080045c5
 8004618:	080045c5 	.word	0x080045c5
 800461c:	08004769 	.word	0x08004769
 8004620:	080045c5 	.word	0x080045c5
 8004624:	08004673 	.word	0x08004673
 8004628:	080045c5 	.word	0x080045c5
 800462c:	080045c5 	.word	0x080045c5
 8004630:	08004709 	.word	0x08004709
 8004634:	6833      	ldr	r3, [r6, #0]
 8004636:	1d1a      	adds	r2, r3, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6032      	str	r2, [r6, #0]
 800463c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004644:	2301      	movs	r3, #1
 8004646:	e09c      	b.n	8004782 <_printf_i+0x1e6>
 8004648:	6833      	ldr	r3, [r6, #0]
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	1d19      	adds	r1, r3, #4
 800464e:	6031      	str	r1, [r6, #0]
 8004650:	0606      	lsls	r6, r0, #24
 8004652:	d501      	bpl.n	8004658 <_printf_i+0xbc>
 8004654:	681d      	ldr	r5, [r3, #0]
 8004656:	e003      	b.n	8004660 <_printf_i+0xc4>
 8004658:	0645      	lsls	r5, r0, #25
 800465a:	d5fb      	bpl.n	8004654 <_printf_i+0xb8>
 800465c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004660:	2d00      	cmp	r5, #0
 8004662:	da03      	bge.n	800466c <_printf_i+0xd0>
 8004664:	232d      	movs	r3, #45	@ 0x2d
 8004666:	426d      	negs	r5, r5
 8004668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800466c:	4858      	ldr	r0, [pc, #352]	@ (80047d0 <_printf_i+0x234>)
 800466e:	230a      	movs	r3, #10
 8004670:	e011      	b.n	8004696 <_printf_i+0xfa>
 8004672:	6821      	ldr	r1, [r4, #0]
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	0608      	lsls	r0, r1, #24
 8004678:	f853 5b04 	ldr.w	r5, [r3], #4
 800467c:	d402      	bmi.n	8004684 <_printf_i+0xe8>
 800467e:	0649      	lsls	r1, r1, #25
 8004680:	bf48      	it	mi
 8004682:	b2ad      	uxthmi	r5, r5
 8004684:	2f6f      	cmp	r7, #111	@ 0x6f
 8004686:	4852      	ldr	r0, [pc, #328]	@ (80047d0 <_printf_i+0x234>)
 8004688:	6033      	str	r3, [r6, #0]
 800468a:	bf14      	ite	ne
 800468c:	230a      	movne	r3, #10
 800468e:	2308      	moveq	r3, #8
 8004690:	2100      	movs	r1, #0
 8004692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004696:	6866      	ldr	r6, [r4, #4]
 8004698:	60a6      	str	r6, [r4, #8]
 800469a:	2e00      	cmp	r6, #0
 800469c:	db05      	blt.n	80046aa <_printf_i+0x10e>
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	432e      	orrs	r6, r5
 80046a2:	f021 0104 	bic.w	r1, r1, #4
 80046a6:	6021      	str	r1, [r4, #0]
 80046a8:	d04b      	beq.n	8004742 <_printf_i+0x1a6>
 80046aa:	4616      	mov	r6, r2
 80046ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80046b0:	fb03 5711 	mls	r7, r3, r1, r5
 80046b4:	5dc7      	ldrb	r7, [r0, r7]
 80046b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046ba:	462f      	mov	r7, r5
 80046bc:	42bb      	cmp	r3, r7
 80046be:	460d      	mov	r5, r1
 80046c0:	d9f4      	bls.n	80046ac <_printf_i+0x110>
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d10b      	bne.n	80046de <_printf_i+0x142>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	07df      	lsls	r7, r3, #31
 80046ca:	d508      	bpl.n	80046de <_printf_i+0x142>
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	6861      	ldr	r1, [r4, #4]
 80046d0:	4299      	cmp	r1, r3
 80046d2:	bfde      	ittt	le
 80046d4:	2330      	movle	r3, #48	@ 0x30
 80046d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80046de:	1b92      	subs	r2, r2, r6
 80046e0:	6122      	str	r2, [r4, #16]
 80046e2:	f8cd a000 	str.w	sl, [sp]
 80046e6:	464b      	mov	r3, r9
 80046e8:	aa03      	add	r2, sp, #12
 80046ea:	4621      	mov	r1, r4
 80046ec:	4640      	mov	r0, r8
 80046ee:	f7ff fee7 	bl	80044c0 <_printf_common>
 80046f2:	3001      	adds	r0, #1
 80046f4:	d14a      	bne.n	800478c <_printf_i+0x1f0>
 80046f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046fa:	b004      	add	sp, #16
 80046fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f043 0320 	orr.w	r3, r3, #32
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	4832      	ldr	r0, [pc, #200]	@ (80047d4 <_printf_i+0x238>)
 800470a:	2778      	movs	r7, #120	@ 0x78
 800470c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	6831      	ldr	r1, [r6, #0]
 8004714:	061f      	lsls	r7, r3, #24
 8004716:	f851 5b04 	ldr.w	r5, [r1], #4
 800471a:	d402      	bmi.n	8004722 <_printf_i+0x186>
 800471c:	065f      	lsls	r7, r3, #25
 800471e:	bf48      	it	mi
 8004720:	b2ad      	uxthmi	r5, r5
 8004722:	6031      	str	r1, [r6, #0]
 8004724:	07d9      	lsls	r1, r3, #31
 8004726:	bf44      	itt	mi
 8004728:	f043 0320 	orrmi.w	r3, r3, #32
 800472c:	6023      	strmi	r3, [r4, #0]
 800472e:	b11d      	cbz	r5, 8004738 <_printf_i+0x19c>
 8004730:	2310      	movs	r3, #16
 8004732:	e7ad      	b.n	8004690 <_printf_i+0xf4>
 8004734:	4826      	ldr	r0, [pc, #152]	@ (80047d0 <_printf_i+0x234>)
 8004736:	e7e9      	b.n	800470c <_printf_i+0x170>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	f023 0320 	bic.w	r3, r3, #32
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	e7f6      	b.n	8004730 <_printf_i+0x194>
 8004742:	4616      	mov	r6, r2
 8004744:	e7bd      	b.n	80046c2 <_printf_i+0x126>
 8004746:	6833      	ldr	r3, [r6, #0]
 8004748:	6825      	ldr	r5, [r4, #0]
 800474a:	6961      	ldr	r1, [r4, #20]
 800474c:	1d18      	adds	r0, r3, #4
 800474e:	6030      	str	r0, [r6, #0]
 8004750:	062e      	lsls	r6, r5, #24
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	d501      	bpl.n	800475a <_printf_i+0x1be>
 8004756:	6019      	str	r1, [r3, #0]
 8004758:	e002      	b.n	8004760 <_printf_i+0x1c4>
 800475a:	0668      	lsls	r0, r5, #25
 800475c:	d5fb      	bpl.n	8004756 <_printf_i+0x1ba>
 800475e:	8019      	strh	r1, [r3, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	4616      	mov	r6, r2
 8004766:	e7bc      	b.n	80046e2 <_printf_i+0x146>
 8004768:	6833      	ldr	r3, [r6, #0]
 800476a:	1d1a      	adds	r2, r3, #4
 800476c:	6032      	str	r2, [r6, #0]
 800476e:	681e      	ldr	r6, [r3, #0]
 8004770:	6862      	ldr	r2, [r4, #4]
 8004772:	2100      	movs	r1, #0
 8004774:	4630      	mov	r0, r6
 8004776:	f7fb fd2b 	bl	80001d0 <memchr>
 800477a:	b108      	cbz	r0, 8004780 <_printf_i+0x1e4>
 800477c:	1b80      	subs	r0, r0, r6
 800477e:	6060      	str	r0, [r4, #4]
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	6123      	str	r3, [r4, #16]
 8004784:	2300      	movs	r3, #0
 8004786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800478a:	e7aa      	b.n	80046e2 <_printf_i+0x146>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	4632      	mov	r2, r6
 8004790:	4649      	mov	r1, r9
 8004792:	4640      	mov	r0, r8
 8004794:	47d0      	blx	sl
 8004796:	3001      	adds	r0, #1
 8004798:	d0ad      	beq.n	80046f6 <_printf_i+0x15a>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	079b      	lsls	r3, r3, #30
 800479e:	d413      	bmi.n	80047c8 <_printf_i+0x22c>
 80047a0:	68e0      	ldr	r0, [r4, #12]
 80047a2:	9b03      	ldr	r3, [sp, #12]
 80047a4:	4298      	cmp	r0, r3
 80047a6:	bfb8      	it	lt
 80047a8:	4618      	movlt	r0, r3
 80047aa:	e7a6      	b.n	80046fa <_printf_i+0x15e>
 80047ac:	2301      	movs	r3, #1
 80047ae:	4632      	mov	r2, r6
 80047b0:	4649      	mov	r1, r9
 80047b2:	4640      	mov	r0, r8
 80047b4:	47d0      	blx	sl
 80047b6:	3001      	adds	r0, #1
 80047b8:	d09d      	beq.n	80046f6 <_printf_i+0x15a>
 80047ba:	3501      	adds	r5, #1
 80047bc:	68e3      	ldr	r3, [r4, #12]
 80047be:	9903      	ldr	r1, [sp, #12]
 80047c0:	1a5b      	subs	r3, r3, r1
 80047c2:	42ab      	cmp	r3, r5
 80047c4:	dcf2      	bgt.n	80047ac <_printf_i+0x210>
 80047c6:	e7eb      	b.n	80047a0 <_printf_i+0x204>
 80047c8:	2500      	movs	r5, #0
 80047ca:	f104 0619 	add.w	r6, r4, #25
 80047ce:	e7f5      	b.n	80047bc <_printf_i+0x220>
 80047d0:	08004ded 	.word	0x08004ded
 80047d4:	08004dfe 	.word	0x08004dfe

080047d8 <__sflush_r>:
 80047d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e0:	0716      	lsls	r6, r2, #28
 80047e2:	4605      	mov	r5, r0
 80047e4:	460c      	mov	r4, r1
 80047e6:	d454      	bmi.n	8004892 <__sflush_r+0xba>
 80047e8:	684b      	ldr	r3, [r1, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	dc02      	bgt.n	80047f4 <__sflush_r+0x1c>
 80047ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	dd48      	ble.n	8004886 <__sflush_r+0xae>
 80047f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	d045      	beq.n	8004886 <__sflush_r+0xae>
 80047fa:	2300      	movs	r3, #0
 80047fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004800:	682f      	ldr	r7, [r5, #0]
 8004802:	6a21      	ldr	r1, [r4, #32]
 8004804:	602b      	str	r3, [r5, #0]
 8004806:	d030      	beq.n	800486a <__sflush_r+0x92>
 8004808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	0759      	lsls	r1, r3, #29
 800480e:	d505      	bpl.n	800481c <__sflush_r+0x44>
 8004810:	6863      	ldr	r3, [r4, #4]
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004816:	b10b      	cbz	r3, 800481c <__sflush_r+0x44>
 8004818:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	2300      	movs	r3, #0
 800481e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004820:	6a21      	ldr	r1, [r4, #32]
 8004822:	4628      	mov	r0, r5
 8004824:	47b0      	blx	r6
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	d106      	bne.n	800483a <__sflush_r+0x62>
 800482c:	6829      	ldr	r1, [r5, #0]
 800482e:	291d      	cmp	r1, #29
 8004830:	d82b      	bhi.n	800488a <__sflush_r+0xb2>
 8004832:	4a2a      	ldr	r2, [pc, #168]	@ (80048dc <__sflush_r+0x104>)
 8004834:	40ca      	lsrs	r2, r1
 8004836:	07d6      	lsls	r6, r2, #31
 8004838:	d527      	bpl.n	800488a <__sflush_r+0xb2>
 800483a:	2200      	movs	r2, #0
 800483c:	6062      	str	r2, [r4, #4]
 800483e:	04d9      	lsls	r1, r3, #19
 8004840:	6922      	ldr	r2, [r4, #16]
 8004842:	6022      	str	r2, [r4, #0]
 8004844:	d504      	bpl.n	8004850 <__sflush_r+0x78>
 8004846:	1c42      	adds	r2, r0, #1
 8004848:	d101      	bne.n	800484e <__sflush_r+0x76>
 800484a:	682b      	ldr	r3, [r5, #0]
 800484c:	b903      	cbnz	r3, 8004850 <__sflush_r+0x78>
 800484e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004852:	602f      	str	r7, [r5, #0]
 8004854:	b1b9      	cbz	r1, 8004886 <__sflush_r+0xae>
 8004856:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800485a:	4299      	cmp	r1, r3
 800485c:	d002      	beq.n	8004864 <__sflush_r+0x8c>
 800485e:	4628      	mov	r0, r5
 8004860:	f000 fa24 	bl	8004cac <_free_r>
 8004864:	2300      	movs	r3, #0
 8004866:	6363      	str	r3, [r4, #52]	@ 0x34
 8004868:	e00d      	b.n	8004886 <__sflush_r+0xae>
 800486a:	2301      	movs	r3, #1
 800486c:	4628      	mov	r0, r5
 800486e:	47b0      	blx	r6
 8004870:	4602      	mov	r2, r0
 8004872:	1c50      	adds	r0, r2, #1
 8004874:	d1c9      	bne.n	800480a <__sflush_r+0x32>
 8004876:	682b      	ldr	r3, [r5, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0c6      	beq.n	800480a <__sflush_r+0x32>
 800487c:	2b1d      	cmp	r3, #29
 800487e:	d001      	beq.n	8004884 <__sflush_r+0xac>
 8004880:	2b16      	cmp	r3, #22
 8004882:	d11e      	bne.n	80048c2 <__sflush_r+0xea>
 8004884:	602f      	str	r7, [r5, #0]
 8004886:	2000      	movs	r0, #0
 8004888:	e022      	b.n	80048d0 <__sflush_r+0xf8>
 800488a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800488e:	b21b      	sxth	r3, r3
 8004890:	e01b      	b.n	80048ca <__sflush_r+0xf2>
 8004892:	690f      	ldr	r7, [r1, #16]
 8004894:	2f00      	cmp	r7, #0
 8004896:	d0f6      	beq.n	8004886 <__sflush_r+0xae>
 8004898:	0793      	lsls	r3, r2, #30
 800489a:	680e      	ldr	r6, [r1, #0]
 800489c:	bf08      	it	eq
 800489e:	694b      	ldreq	r3, [r1, #20]
 80048a0:	600f      	str	r7, [r1, #0]
 80048a2:	bf18      	it	ne
 80048a4:	2300      	movne	r3, #0
 80048a6:	eba6 0807 	sub.w	r8, r6, r7
 80048aa:	608b      	str	r3, [r1, #8]
 80048ac:	f1b8 0f00 	cmp.w	r8, #0
 80048b0:	dde9      	ble.n	8004886 <__sflush_r+0xae>
 80048b2:	6a21      	ldr	r1, [r4, #32]
 80048b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048b6:	4643      	mov	r3, r8
 80048b8:	463a      	mov	r2, r7
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b0      	blx	r6
 80048be:	2800      	cmp	r0, #0
 80048c0:	dc08      	bgt.n	80048d4 <__sflush_r+0xfc>
 80048c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d4:	4407      	add	r7, r0
 80048d6:	eba8 0800 	sub.w	r8, r8, r0
 80048da:	e7e7      	b.n	80048ac <__sflush_r+0xd4>
 80048dc:	20400001 	.word	0x20400001

080048e0 <_fflush_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	690b      	ldr	r3, [r1, #16]
 80048e4:	4605      	mov	r5, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	b913      	cbnz	r3, 80048f0 <_fflush_r+0x10>
 80048ea:	2500      	movs	r5, #0
 80048ec:	4628      	mov	r0, r5
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	b118      	cbz	r0, 80048fa <_fflush_r+0x1a>
 80048f2:	6a03      	ldr	r3, [r0, #32]
 80048f4:	b90b      	cbnz	r3, 80048fa <_fflush_r+0x1a>
 80048f6:	f7ff fb83 	bl	8004000 <__sinit>
 80048fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f3      	beq.n	80048ea <_fflush_r+0xa>
 8004902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004904:	07d0      	lsls	r0, r2, #31
 8004906:	d404      	bmi.n	8004912 <_fflush_r+0x32>
 8004908:	0599      	lsls	r1, r3, #22
 800490a:	d402      	bmi.n	8004912 <_fflush_r+0x32>
 800490c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800490e:	f7ff fbf2 	bl	80040f6 <__retarget_lock_acquire_recursive>
 8004912:	4628      	mov	r0, r5
 8004914:	4621      	mov	r1, r4
 8004916:	f7ff ff5f 	bl	80047d8 <__sflush_r>
 800491a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800491c:	07da      	lsls	r2, r3, #31
 800491e:	4605      	mov	r5, r0
 8004920:	d4e4      	bmi.n	80048ec <_fflush_r+0xc>
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	059b      	lsls	r3, r3, #22
 8004926:	d4e1      	bmi.n	80048ec <_fflush_r+0xc>
 8004928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800492a:	f7ff fbe5 	bl	80040f8 <__retarget_lock_release_recursive>
 800492e:	e7dd      	b.n	80048ec <_fflush_r+0xc>

08004930 <__malloc_lock>:
 8004930:	4801      	ldr	r0, [pc, #4]	@ (8004938 <__malloc_lock+0x8>)
 8004932:	f7ff bbe0 	b.w	80040f6 <__retarget_lock_acquire_recursive>
 8004936:	bf00      	nop
 8004938:	200002a4 	.word	0x200002a4

0800493c <__malloc_unlock>:
 800493c:	4801      	ldr	r0, [pc, #4]	@ (8004944 <__malloc_unlock+0x8>)
 800493e:	f7ff bbdb 	b.w	80040f8 <__retarget_lock_release_recursive>
 8004942:	bf00      	nop
 8004944:	200002a4 	.word	0x200002a4

08004948 <__sread>:
 8004948:	b510      	push	{r4, lr}
 800494a:	460c      	mov	r4, r1
 800494c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004950:	f000 f956 	bl	8004c00 <_read_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	bfab      	itete	ge
 8004958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800495a:	89a3      	ldrhlt	r3, [r4, #12]
 800495c:	181b      	addge	r3, r3, r0
 800495e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004962:	bfac      	ite	ge
 8004964:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004966:	81a3      	strhlt	r3, [r4, #12]
 8004968:	bd10      	pop	{r4, pc}

0800496a <__swrite>:
 800496a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800496e:	461f      	mov	r7, r3
 8004970:	898b      	ldrh	r3, [r1, #12]
 8004972:	05db      	lsls	r3, r3, #23
 8004974:	4605      	mov	r5, r0
 8004976:	460c      	mov	r4, r1
 8004978:	4616      	mov	r6, r2
 800497a:	d505      	bpl.n	8004988 <__swrite+0x1e>
 800497c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004980:	2302      	movs	r3, #2
 8004982:	2200      	movs	r2, #0
 8004984:	f000 f92a 	bl	8004bdc <_lseek_r>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800498e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	4632      	mov	r2, r6
 8004996:	463b      	mov	r3, r7
 8004998:	4628      	mov	r0, r5
 800499a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	f000 b951 	b.w	8004c44 <_write_r>

080049a2 <__sseek>:
 80049a2:	b510      	push	{r4, lr}
 80049a4:	460c      	mov	r4, r1
 80049a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049aa:	f000 f917 	bl	8004bdc <_lseek_r>
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	bf15      	itete	ne
 80049b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049be:	81a3      	strheq	r3, [r4, #12]
 80049c0:	bf18      	it	ne
 80049c2:	81a3      	strhne	r3, [r4, #12]
 80049c4:	bd10      	pop	{r4, pc}

080049c6 <__sclose>:
 80049c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ca:	f000 b94d 	b.w	8004c68 <_close_r>

080049ce <__swbuf_r>:
 80049ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d0:	460e      	mov	r6, r1
 80049d2:	4614      	mov	r4, r2
 80049d4:	4605      	mov	r5, r0
 80049d6:	b118      	cbz	r0, 80049e0 <__swbuf_r+0x12>
 80049d8:	6a03      	ldr	r3, [r0, #32]
 80049da:	b90b      	cbnz	r3, 80049e0 <__swbuf_r+0x12>
 80049dc:	f7ff fb10 	bl	8004000 <__sinit>
 80049e0:	69a3      	ldr	r3, [r4, #24]
 80049e2:	60a3      	str	r3, [r4, #8]
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	071a      	lsls	r2, r3, #28
 80049e8:	d501      	bpl.n	80049ee <__swbuf_r+0x20>
 80049ea:	6923      	ldr	r3, [r4, #16]
 80049ec:	b943      	cbnz	r3, 8004a00 <__swbuf_r+0x32>
 80049ee:	4621      	mov	r1, r4
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 f82b 	bl	8004a4c <__swsetup_r>
 80049f6:	b118      	cbz	r0, 8004a00 <__swbuf_r+0x32>
 80049f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80049fc:	4638      	mov	r0, r7
 80049fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	6922      	ldr	r2, [r4, #16]
 8004a04:	1a98      	subs	r0, r3, r2
 8004a06:	6963      	ldr	r3, [r4, #20]
 8004a08:	b2f6      	uxtb	r6, r6
 8004a0a:	4283      	cmp	r3, r0
 8004a0c:	4637      	mov	r7, r6
 8004a0e:	dc05      	bgt.n	8004a1c <__swbuf_r+0x4e>
 8004a10:	4621      	mov	r1, r4
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7ff ff64 	bl	80048e0 <_fflush_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d1ed      	bne.n	80049f8 <__swbuf_r+0x2a>
 8004a1c:	68a3      	ldr	r3, [r4, #8]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	60a3      	str	r3, [r4, #8]
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	6022      	str	r2, [r4, #0]
 8004a28:	701e      	strb	r6, [r3, #0]
 8004a2a:	6962      	ldr	r2, [r4, #20]
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d004      	beq.n	8004a3c <__swbuf_r+0x6e>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	07db      	lsls	r3, r3, #31
 8004a36:	d5e1      	bpl.n	80049fc <__swbuf_r+0x2e>
 8004a38:	2e0a      	cmp	r6, #10
 8004a3a:	d1df      	bne.n	80049fc <__swbuf_r+0x2e>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f7ff ff4e 	bl	80048e0 <_fflush_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d0d9      	beq.n	80049fc <__swbuf_r+0x2e>
 8004a48:	e7d6      	b.n	80049f8 <__swbuf_r+0x2a>
	...

08004a4c <__swsetup_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4b29      	ldr	r3, [pc, #164]	@ (8004af4 <__swsetup_r+0xa8>)
 8004a50:	4605      	mov	r5, r0
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	460c      	mov	r4, r1
 8004a56:	b118      	cbz	r0, 8004a60 <__swsetup_r+0x14>
 8004a58:	6a03      	ldr	r3, [r0, #32]
 8004a5a:	b90b      	cbnz	r3, 8004a60 <__swsetup_r+0x14>
 8004a5c:	f7ff fad0 	bl	8004000 <__sinit>
 8004a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a64:	0719      	lsls	r1, r3, #28
 8004a66:	d422      	bmi.n	8004aae <__swsetup_r+0x62>
 8004a68:	06da      	lsls	r2, r3, #27
 8004a6a:	d407      	bmi.n	8004a7c <__swsetup_r+0x30>
 8004a6c:	2209      	movs	r2, #9
 8004a6e:	602a      	str	r2, [r5, #0]
 8004a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a7a:	e033      	b.n	8004ae4 <__swsetup_r+0x98>
 8004a7c:	0758      	lsls	r0, r3, #29
 8004a7e:	d512      	bpl.n	8004aa6 <__swsetup_r+0x5a>
 8004a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a82:	b141      	cbz	r1, 8004a96 <__swsetup_r+0x4a>
 8004a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a88:	4299      	cmp	r1, r3
 8004a8a:	d002      	beq.n	8004a92 <__swsetup_r+0x46>
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f90d 	bl	8004cac <_free_r>
 8004a92:	2300      	movs	r3, #0
 8004a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	f043 0308 	orr.w	r3, r3, #8
 8004aac:	81a3      	strh	r3, [r4, #12]
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	b94b      	cbnz	r3, 8004ac6 <__swsetup_r+0x7a>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004abc:	d003      	beq.n	8004ac6 <__swsetup_r+0x7a>
 8004abe:	4621      	mov	r1, r4
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 f83f 	bl	8004b44 <__smakebuf_r>
 8004ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aca:	f013 0201 	ands.w	r2, r3, #1
 8004ace:	d00a      	beq.n	8004ae6 <__swsetup_r+0x9a>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	60a2      	str	r2, [r4, #8]
 8004ad4:	6962      	ldr	r2, [r4, #20]
 8004ad6:	4252      	negs	r2, r2
 8004ad8:	61a2      	str	r2, [r4, #24]
 8004ada:	6922      	ldr	r2, [r4, #16]
 8004adc:	b942      	cbnz	r2, 8004af0 <__swsetup_r+0xa4>
 8004ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ae2:	d1c5      	bne.n	8004a70 <__swsetup_r+0x24>
 8004ae4:	bd38      	pop	{r3, r4, r5, pc}
 8004ae6:	0799      	lsls	r1, r3, #30
 8004ae8:	bf58      	it	pl
 8004aea:	6962      	ldrpl	r2, [r4, #20]
 8004aec:	60a2      	str	r2, [r4, #8]
 8004aee:	e7f4      	b.n	8004ada <__swsetup_r+0x8e>
 8004af0:	2000      	movs	r0, #0
 8004af2:	e7f7      	b.n	8004ae4 <__swsetup_r+0x98>
 8004af4:	20000018 	.word	0x20000018

08004af8 <__swhatbuf_r>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	460c      	mov	r4, r1
 8004afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b00:	2900      	cmp	r1, #0
 8004b02:	b096      	sub	sp, #88	@ 0x58
 8004b04:	4615      	mov	r5, r2
 8004b06:	461e      	mov	r6, r3
 8004b08:	da0d      	bge.n	8004b26 <__swhatbuf_r+0x2e>
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	bf14      	ite	ne
 8004b16:	2340      	movne	r3, #64	@ 0x40
 8004b18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	6031      	str	r1, [r6, #0]
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	b016      	add	sp, #88	@ 0x58
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
 8004b26:	466a      	mov	r2, sp
 8004b28:	f000 f8ae 	bl	8004c88 <_fstat_r>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	dbec      	blt.n	8004b0a <__swhatbuf_r+0x12>
 8004b30:	9901      	ldr	r1, [sp, #4]
 8004b32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b3a:	4259      	negs	r1, r3
 8004b3c:	4159      	adcs	r1, r3
 8004b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b42:	e7eb      	b.n	8004b1c <__swhatbuf_r+0x24>

08004b44 <__smakebuf_r>:
 8004b44:	898b      	ldrh	r3, [r1, #12]
 8004b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b48:	079d      	lsls	r5, r3, #30
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	d507      	bpl.n	8004b60 <__smakebuf_r+0x1c>
 8004b50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2301      	movs	r3, #1
 8004b5a:	6163      	str	r3, [r4, #20]
 8004b5c:	b003      	add	sp, #12
 8004b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b60:	ab01      	add	r3, sp, #4
 8004b62:	466a      	mov	r2, sp
 8004b64:	f7ff ffc8 	bl	8004af8 <__swhatbuf_r>
 8004b68:	9f00      	ldr	r7, [sp, #0]
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f7ff fc26 	bl	80043c0 <_malloc_r>
 8004b74:	b948      	cbnz	r0, 8004b8a <__smakebuf_r+0x46>
 8004b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7a:	059a      	lsls	r2, r3, #22
 8004b7c:	d4ee      	bmi.n	8004b5c <__smakebuf_r+0x18>
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	f043 0302 	orr.w	r3, r3, #2
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	e7e2      	b.n	8004b50 <__smakebuf_r+0xc>
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	6020      	str	r0, [r4, #0]
 8004b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b92:	81a3      	strh	r3, [r4, #12]
 8004b94:	9b01      	ldr	r3, [sp, #4]
 8004b96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b9a:	b15b      	cbz	r3, 8004bb4 <__smakebuf_r+0x70>
 8004b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f000 f80b 	bl	8004bbc <_isatty_r>
 8004ba6:	b128      	cbz	r0, 8004bb4 <__smakebuf_r+0x70>
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	81a3      	strh	r3, [r4, #12]
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	431d      	orrs	r5, r3
 8004bb8:	81a5      	strh	r5, [r4, #12]
 8004bba:	e7cf      	b.n	8004b5c <__smakebuf_r+0x18>

08004bbc <_isatty_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4d06      	ldr	r5, [pc, #24]	@ (8004bd8 <_isatty_r+0x1c>)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fc f892 	bl	8000cf0 <_isatty>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_isatty_r+0x1a>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_isatty_r+0x1a>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	200002b0 	.word	0x200002b0

08004bdc <_lseek_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d07      	ldr	r5, [pc, #28]	@ (8004bfc <_lseek_r+0x20>)
 8004be0:	4604      	mov	r4, r0
 8004be2:	4608      	mov	r0, r1
 8004be4:	4611      	mov	r1, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	602a      	str	r2, [r5, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f7fc f88b 	bl	8000d06 <_lseek>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d102      	bne.n	8004bfa <_lseek_r+0x1e>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	b103      	cbz	r3, 8004bfa <_lseek_r+0x1e>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	200002b0 	.word	0x200002b0

08004c00 <_read_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4d07      	ldr	r5, [pc, #28]	@ (8004c20 <_read_r+0x20>)
 8004c04:	4604      	mov	r4, r0
 8004c06:	4608      	mov	r0, r1
 8004c08:	4611      	mov	r1, r2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	602a      	str	r2, [r5, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f7fc f835 	bl	8000c7e <_read>
 8004c14:	1c43      	adds	r3, r0, #1
 8004c16:	d102      	bne.n	8004c1e <_read_r+0x1e>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	b103      	cbz	r3, 8004c1e <_read_r+0x1e>
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	200002b0 	.word	0x200002b0

08004c24 <_sbrk_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4d06      	ldr	r5, [pc, #24]	@ (8004c40 <_sbrk_r+0x1c>)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	f7fc f876 	bl	8000d20 <_sbrk>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_sbrk_r+0x1a>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_sbrk_r+0x1a>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	200002b0 	.word	0x200002b0

08004c44 <_write_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d07      	ldr	r5, [pc, #28]	@ (8004c64 <_write_r+0x20>)
 8004c48:	4604      	mov	r4, r0
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	602a      	str	r2, [r5, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f7fb fddc 	bl	8000810 <_write>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_write_r+0x1e>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_write_r+0x1e>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200002b0 	.word	0x200002b0

08004c68 <_close_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4d06      	ldr	r5, [pc, #24]	@ (8004c84 <_close_r+0x1c>)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	f7fc f820 	bl	8000cb8 <_close>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_close_r+0x1a>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_close_r+0x1a>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	200002b0 	.word	0x200002b0

08004c88 <_fstat_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d07      	ldr	r5, [pc, #28]	@ (8004ca8 <_fstat_r+0x20>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	602b      	str	r3, [r5, #0]
 8004c96:	f7fc f81b 	bl	8000cd0 <_fstat>
 8004c9a:	1c43      	adds	r3, r0, #1
 8004c9c:	d102      	bne.n	8004ca4 <_fstat_r+0x1c>
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	b103      	cbz	r3, 8004ca4 <_fstat_r+0x1c>
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	bd38      	pop	{r3, r4, r5, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200002b0 	.word	0x200002b0

08004cac <_free_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4605      	mov	r5, r0
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	d041      	beq.n	8004d38 <_free_r+0x8c>
 8004cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb8:	1f0c      	subs	r4, r1, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bfb8      	it	lt
 8004cbe:	18e4      	addlt	r4, r4, r3
 8004cc0:	f7ff fe36 	bl	8004930 <__malloc_lock>
 8004cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d3c <_free_r+0x90>)
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	b933      	cbnz	r3, 8004cd8 <_free_r+0x2c>
 8004cca:	6063      	str	r3, [r4, #4]
 8004ccc:	6014      	str	r4, [r2, #0]
 8004cce:	4628      	mov	r0, r5
 8004cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cd4:	f7ff be32 	b.w	800493c <__malloc_unlock>
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	d908      	bls.n	8004cee <_free_r+0x42>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	1821      	adds	r1, r4, r0
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf01      	itttt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	1809      	addeq	r1, r1, r0
 8004cea:	6021      	streq	r1, [r4, #0]
 8004cec:	e7ed      	b.n	8004cca <_free_r+0x1e>
 8004cee:	461a      	mov	r2, r3
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b10b      	cbz	r3, 8004cf8 <_free_r+0x4c>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d9fa      	bls.n	8004cee <_free_r+0x42>
 8004cf8:	6811      	ldr	r1, [r2, #0]
 8004cfa:	1850      	adds	r0, r2, r1
 8004cfc:	42a0      	cmp	r0, r4
 8004cfe:	d10b      	bne.n	8004d18 <_free_r+0x6c>
 8004d00:	6820      	ldr	r0, [r4, #0]
 8004d02:	4401      	add	r1, r0
 8004d04:	1850      	adds	r0, r2, r1
 8004d06:	4283      	cmp	r3, r0
 8004d08:	6011      	str	r1, [r2, #0]
 8004d0a:	d1e0      	bne.n	8004cce <_free_r+0x22>
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	6053      	str	r3, [r2, #4]
 8004d12:	4408      	add	r0, r1
 8004d14:	6010      	str	r0, [r2, #0]
 8004d16:	e7da      	b.n	8004cce <_free_r+0x22>
 8004d18:	d902      	bls.n	8004d20 <_free_r+0x74>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	e7d6      	b.n	8004cce <_free_r+0x22>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	1821      	adds	r1, r4, r0
 8004d24:	428b      	cmp	r3, r1
 8004d26:	bf04      	itt	eq
 8004d28:	6819      	ldreq	r1, [r3, #0]
 8004d2a:	685b      	ldreq	r3, [r3, #4]
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	bf04      	itt	eq
 8004d30:	1809      	addeq	r1, r1, r0
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	6054      	str	r4, [r2, #4]
 8004d36:	e7ca      	b.n	8004cce <_free_r+0x22>
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200002ac 	.word	0x200002ac

08004d40 <_init>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	bf00      	nop
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr

08004d4c <_fini>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	bf00      	nop
 8004d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d52:	bc08      	pop	{r3}
 8004d54:	469e      	mov	lr, r3
 8004d56:	4770      	bx	lr
