
weatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003bf8  08003bf8  00004bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c74  08003c74  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c74  08003c74  00004c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c7c  08003c7c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c7c  08003c7c  00004c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c80  08003c80  00004c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003c90  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003c90  00005108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d841  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de9  00000000  00000000  0001287d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00014668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094f  00000000  00000000  00015268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025fb7  00000000  00000000  00015bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e981  00000000  00000000  0003bb6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9dbf  00000000  00000000  0004a4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001342ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003154  00000000  00000000  001342f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00137448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003be0 	.word	0x08003be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003be0 	.word	0x08003be0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <lcd_send_cmd>:
	{0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53},
	{0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27},
	{0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67}};

void lcd_send_cmd(char cmd)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f023 030f 	bic.w	r3, r3, #15
 8000504:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C; //en=1, rs=0
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	f043 030c 	orr.w	r3, r3, #12
 8000512:	b2db      	uxtb	r3, r3
 8000514:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08; //en=0, rs=0
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	f043 0308 	orr.w	r3, r3, #8
 800051c:	b2db      	uxtb	r3, r3
 800051e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C; //en=1, rs=0
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	f043 030c 	orr.w	r3, r3, #12
 8000526:	b2db      	uxtb	r3, r3
 8000528:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08; //en=0, rs=0
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f043 0308 	orr.w	r3, r3, #8
 8000530:	b2db      	uxtb	r3, r3
 8000532:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000534:	f107 0208 	add.w	r2, r7, #8
 8000538:	2364      	movs	r3, #100	@ 0x64
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2304      	movs	r3, #4
 800053e:	214e      	movs	r1, #78	@ 0x4e
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <lcd_send_cmd+0x5c>)
 8000542:	f000 ff15 	bl	8001370 <HAL_I2C_Master_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028

08000554 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f023 030f 	bic.w	r3, r3, #15
 8000564:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D; //en=1, rs=1
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	f043 030d 	orr.w	r3, r3, #13
 8000572:	b2db      	uxtb	r3, r3
 8000574:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09; //en=0, rs=1
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	f043 0309 	orr.w	r3, r3, #9
 800057c:	b2db      	uxtb	r3, r3
 800057e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D; //en=1, rs=1
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09; //en=0, rs=1
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000594:	f107 0208 	add.w	r2, r7, #8
 8000598:	2364      	movs	r3, #100	@ 0x64
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2304      	movs	r3, #4
 800059e:	214e      	movs	r1, #78	@ 0x4e
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <lcd_send_data+0x5c>)
 80005a2:	f000 fee5 	bl	8001370 <HAL_I2C_Master_Transmit>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <lcd_init>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 80005b8:	2032      	movs	r0, #50	@ 0x32
 80005ba:	f000 fb89 	bl	8000cd0 <HAL_Delay>
	lcd_send_cmd(0x30);
 80005be:	2030      	movs	r0, #48	@ 0x30
 80005c0:	f7ff ff98 	bl	80004f4 <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 80005c4:	2005      	movs	r0, #5
 80005c6:	f000 fb83 	bl	8000cd0 <HAL_Delay>
	lcd_send_cmd(0x30);
 80005ca:	2030      	movs	r0, #48	@ 0x30
 80005cc:	f7ff ff92 	bl	80004f4 <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 80005d0:	2001      	movs	r0, #1
 80005d2:	f000 fb7d 	bl	8000cd0 <HAL_Delay>
	lcd_send_cmd(0x30);
 80005d6:	2030      	movs	r0, #48	@ 0x30
 80005d8:	f7ff ff8c 	bl	80004f4 <lcd_send_cmd>
	HAL_Delay(10);
 80005dc:	200a      	movs	r0, #10
 80005de:	f000 fb77 	bl	8000cd0 <HAL_Delay>
	lcd_send_cmd(0x20); // 4bit mode
 80005e2:	2020      	movs	r0, #32
 80005e4:	f7ff ff86 	bl	80004f4 <lcd_send_cmd>
	HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 fb71 	bl	8000cd0 <HAL_Delay>

	// display initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005ee:	2028      	movs	r0, #40	@ 0x28
 80005f0:	f7ff ff80 	bl	80004f4 <lcd_send_cmd>
	HAL_Delay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fb6b 	bl	8000cd0 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005fa:	2008      	movs	r0, #8
 80005fc:	f7ff ff7a 	bl	80004f4 <lcd_send_cmd>
	HAL_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fb65 	bl	8000cd0 <HAL_Delay>
	lcd_send_cmd(0x01); // clear display
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ff74 	bl	80004f4 <lcd_send_cmd>
	HAL_Delay(2);
 800060c:	2002      	movs	r0, #2
 800060e:	f000 fb5f 	bl	8000cd0 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000612:	2006      	movs	r0, #6
 8000614:	f7ff ff6e 	bl	80004f4 <lcd_send_cmd>
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fb59 	bl	8000cd0 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800061e:	200c      	movs	r0, #12
 8000620:	f7ff ff68 	bl	80004f4 <lcd_send_cmd>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <lcd_send_string>:

void lcd_send_string(const char *str)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	uint8_t rep = 195;
 8000630:	23c3      	movs	r3, #195	@ 0xc3
 8000632:	77bb      	strb	r3, [r7, #30]
//	const uint8_t rep_auml = 164;
//	const uint8_t rep_ouml = 182;
//	const uint8_t rep_uuml = 188;
//	const uint8_t rep_sz = 159;
	char *auml = "\xE1";
 8000634:	4b48      	ldr	r3, [pc, #288]	@ (8000758 <lcd_send_string+0x130>)
 8000636:	61bb      	str	r3, [r7, #24]
	char *ouml = "\xEF";
 8000638:	4b48      	ldr	r3, [pc, #288]	@ (800075c <lcd_send_string+0x134>)
 800063a:	617b      	str	r3, [r7, #20]
	char *uuml = "\xF5";
 800063c:	4b48      	ldr	r3, [pc, #288]	@ (8000760 <lcd_send_string+0x138>)
 800063e:	613b      	str	r3, [r7, #16]
	char *sz = "\xE2";
 8000640:	4b48      	ldr	r3, [pc, #288]	@ (8000764 <lcd_send_string+0x13c>)
 8000642:	60fb      	str	r3, [r7, #12]
	bool is_cmd = false;
 8000644:	2300      	movs	r3, #0
 8000646:	77fb      	strb	r3, [r7, #31]

	while (*str)
 8000648:	e07b      	b.n	8000742 <lcd_send_string+0x11a>
		if (*str != '\0')
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d077      	beq.n	8000742 <lcd_send_string+0x11a>
		{
			if (is_cmd)
 8000652:	7ffb      	ldrb	r3, [r7, #31]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d062      	beq.n	800071e <lcd_send_string+0xf6>
			{
				switch (*str)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3b9f      	subs	r3, #159	@ 0x9f
 800065e:	2b1d      	cmp	r3, #29
 8000660:	d856      	bhi.n	8000710 <lcd_send_string+0xe8>
 8000662:	a201      	add	r2, pc, #4	@ (adr r2, 8000668 <lcd_send_string+0x40>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	08000705 	.word	0x08000705
 800066c:	08000711 	.word	0x08000711
 8000670:	08000711 	.word	0x08000711
 8000674:	08000711 	.word	0x08000711
 8000678:	08000711 	.word	0x08000711
 800067c:	080006e1 	.word	0x080006e1
 8000680:	08000711 	.word	0x08000711
 8000684:	08000711 	.word	0x08000711
 8000688:	08000711 	.word	0x08000711
 800068c:	08000711 	.word	0x08000711
 8000690:	08000711 	.word	0x08000711
 8000694:	08000711 	.word	0x08000711
 8000698:	08000711 	.word	0x08000711
 800069c:	08000711 	.word	0x08000711
 80006a0:	08000711 	.word	0x08000711
 80006a4:	08000711 	.word	0x08000711
 80006a8:	08000711 	.word	0x08000711
 80006ac:	08000711 	.word	0x08000711
 80006b0:	08000711 	.word	0x08000711
 80006b4:	08000711 	.word	0x08000711
 80006b8:	08000711 	.word	0x08000711
 80006bc:	08000711 	.word	0x08000711
 80006c0:	08000711 	.word	0x08000711
 80006c4:	080006ed 	.word	0x080006ed
 80006c8:	08000711 	.word	0x08000711
 80006cc:	08000711 	.word	0x08000711
 80006d0:	08000711 	.word	0x08000711
 80006d4:	08000711 	.word	0x08000711
 80006d8:	08000711 	.word	0x08000711
 80006dc:	080006f9 	.word	0x080006f9
				{
				case rep_auml:
					lcd_send_data(*auml);
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff35 	bl	8000554 <lcd_send_data>
					break;
 80006ea:	e012      	b.n	8000712 <lcd_send_string+0xea>
				case rep_ouml:
					lcd_send_data(*ouml);
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff2f 	bl	8000554 <lcd_send_data>
					break;
 80006f6:	e00c      	b.n	8000712 <lcd_send_string+0xea>
				case rep_uuml:
					lcd_send_data(*uuml);
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff29 	bl	8000554 <lcd_send_data>
					break;
 8000702:	e006      	b.n	8000712 <lcd_send_string+0xea>
				case rep_sz:
					lcd_send_data(*sz);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff23 	bl	8000554 <lcd_send_data>
					break;
 800070e:	e000      	b.n	8000712 <lcd_send_string+0xea>
				default:
					break;
 8000710:	bf00      	nop
				}
				*str++;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3301      	adds	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
				is_cmd = false;
 8000718:	2300      	movs	r3, #0
 800071a:	77fb      	strb	r3, [r7, #31]
				continue;
 800071c:	e011      	b.n	8000742 <lcd_send_string+0x11a>
			}
			if (*str == rep)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	7fba      	ldrb	r2, [r7, #30]
 8000724:	429a      	cmp	r2, r3
 8000726:	d105      	bne.n	8000734 <lcd_send_string+0x10c>
			{
				*str++;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3301      	adds	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
				is_cmd = true;
 800072e:	2301      	movs	r3, #1
 8000730:	77fb      	strb	r3, [r7, #31]
				continue;
 8000732:	e006      	b.n	8000742 <lcd_send_string+0x11a>
			}
			lcd_send_data(*str++);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	607a      	str	r2, [r7, #4]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff09 	bl	8000554 <lcd_send_data>
	while (*str)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	f47f af7f 	bne.w	800064a <lcd_send_string+0x22>
		}
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	08003bf8 	.word	0x08003bf8
 800075c:	08003bfc 	.word	0x08003bfc
 8000760:	08003c00 	.word	0x08003c00
 8000764:	08003c04 	.word	0x08003c04

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fa3b 	bl	8000be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f810 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f000 f8c4 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000778:	f000 f892 	bl	80008a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800077c:	f000 f850 	bl	8000820 <MX_I2C1_Init>
  lcd_init();
 8000780:	f7ff ff18 	bl	80005b4 <lcd_init>
  /* USER CODE BEGIN 2 */

  lcd_send_string("Temperature: 79F\nAir Quality: N/A");
 8000784:	4802      	ldr	r0, [pc, #8]	@ (8000790 <main+0x28>)
 8000786:	f7ff ff4f 	bl	8000628 <lcd_send_string>

  while (1);                              // stop here
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <main+0x22>
 800078e:	bf00      	nop
 8000790:	08003c08 	.word	0x08003c08

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b096      	sub	sp, #88	@ 0x58
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2244      	movs	r2, #68	@ 0x44
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 f9ef 	bl	8003b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ba:	f001 f9b1 	bl	8001b20 <HAL_PWREx_ControlVoltageScaling>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c4:	f000 f8c0 	bl	8000948 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007c8:	2310      	movs	r3, #16
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d4:	2360      	movs	r3, #96	@ 0x60
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d8:	2300      	movs	r3, #0
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 f9f3 	bl	8001bcc <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007ec:	f000 f8ac 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fdbb 	bl	8002384 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000814:	f000 f898 	bl	8000948 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3758      	adds	r7, #88	@ 0x58
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_I2C1_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_I2C1_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_I2C1_Init+0x74>)
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <MX_I2C1_Init+0x7c>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_I2C1_Init+0x74>)
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_I2C1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085a:	480e      	ldr	r0, [pc, #56]	@ (8000894 <MX_I2C1_Init+0x74>)
 800085c:	f000 fcec 	bl	8001238 <HAL_I2C_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000866:	f000 f86f 	bl	8000948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4809      	ldr	r0, [pc, #36]	@ (8000894 <MX_I2C1_Init+0x74>)
 800086e:	f001 f8b1 	bl	80019d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000878:	f000 f866 	bl	8000948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_I2C1_Init+0x74>)
 8000880:	f001 f8f3 	bl	8001a6a <HAL_I2CEx_ConfigDigitalFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f85d 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000028 	.word	0x20000028
 8000898:	40005400 	.word	0x40005400
 800089c:	00100d14 	.word	0x00100d14

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008a6:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <MX_USART2_UART_Init+0x5c>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_USART2_UART_Init+0x58>)
 80008e4:	f002 fc2e 	bl	8003144 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 f82b 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000007c 	.word	0x2000007c
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_GPIO_Init+0x44>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <MX_GPIO_Init+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_GPIO_Init+0x44>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_GPIO_Init+0x44>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <MX_GPIO_Init+0x44>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_GPIO_Init+0x44>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <HAL_MspInit+0x44>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6613      	str	r3, [r2, #96]	@ 0x60
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_MspInit+0x44>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6593      	str	r3, [r2, #88]	@ 0x58
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0ac      	sub	sp, #176	@ 0xb0
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2288      	movs	r2, #136	@ 0x88
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f8e2 	bl	8003b86 <memset>
  if(hi2c->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a21      	ldr	r2, [pc, #132]	@ (8000a4c <HAL_I2C_MspInit+0xb0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d13a      	bne.n	8000a42 <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fef7 	bl	80027cc <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009e4:	f7ff ffb0 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <HAL_I2C_MspInit+0xb4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	4a18      	ldr	r2, [pc, #96]	@ (8000a50 <HAL_I2C_MspInit+0xb4>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f4:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <HAL_I2C_MspInit+0xb4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a00:	23c0      	movs	r3, #192	@ 0xc0
 8000a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a06:	2312      	movs	r3, #18
 8000a08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <HAL_I2C_MspInit+0xb8>)
 8000a26:	f000 fa5d 	bl	8000ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_I2C_MspInit+0xb4>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_I2C_MspInit+0xb4>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_I2C_MspInit+0xb4>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a42:	bf00      	nop
 8000a44:	37b0      	adds	r7, #176	@ 0xb0
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000400 	.word	0x48000400

08000a58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2288      	movs	r2, #136	@ 0x88
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 f884 	bl	8003b86 <memset>
  if(huart->Instance==USART2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a21      	ldr	r2, [pc, #132]	@ (8000b08 <HAL_UART_MspInit+0xb0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d13b      	bne.n	8000b00 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fe99 	bl	80027cc <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa0:	f7ff ff52 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_UART_MspInit+0xb4>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa8:	4a18      	ldr	r2, [pc, #96]	@ (8000b0c <HAL_UART_MspInit+0xb4>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <HAL_UART_MspInit+0xb4>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <HAL_UART_MspInit+0xb4>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <HAL_UART_MspInit+0xb4>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac8:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <HAL_UART_MspInit+0xb4>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aec:	2307      	movs	r3, #7
 8000aee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afc:	f000 f9f2 	bl	8000ee4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b00:	bf00      	nop
 8000b02:	37b0      	adds	r7, #176	@ 0xb0
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <MemManage_Handler+0x4>

08000b28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 f893 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f002 ffe9 	bl	8003b98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fdcf 	bl	8000768 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd8:	08003c84 	.word	0x08003c84
  ldr r2, =_sbss
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be0:	20000108 	.word	0x20000108

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>

08000be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f943 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f80e 	bl	8000c18 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c08:	f7ff fea4 	bl	8000954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f941 	bl	8000eca <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 f919 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000104 	.word	0x20000104

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000104 	.word	0x20000104

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e17f      	b.n	80011f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8171 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_Init+0x40>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d118      	bne.n	8000fc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ac 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <HAL_GPIO_Init+0x330>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a5e      	ldr	r2, [pc, #376]	@ (8001214 <HAL_GPIO_Init+0x330>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001214 <HAL_GPIO_Init+0x330>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001218 <HAL_GPIO_Init+0x334>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x242>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001220 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x22a>
 800110a:	2306      	movs	r3, #6
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800110e:	2307      	movs	r3, #7
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001126:	2300      	movs	r3, #0
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001138:	4937      	ldr	r1, [pc, #220]	@ (8001218 <HAL_GPIO_Init+0x334>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001146:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae78 	bne.w	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	48001000 	.word	0x48001000
 800122c:	48001400 	.word	0x48001400
 8001230:	48001800 	.word	0x48001800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e08d      	b.n	8001366 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fb9c 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2224      	movs	r2, #36	@ 0x24
 8001268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e006      	b.n	80012c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80012be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d108      	bne.n	80012da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	e007      	b.n	80012ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800130c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69d9      	ldr	r1, [r3, #28]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af02      	add	r7, sp, #8
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	461a      	mov	r2, r3
 800137c:	460b      	mov	r3, r1
 800137e:	817b      	strh	r3, [r7, #10]
 8001380:	4613      	mov	r3, r2
 8001382:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b20      	cmp	r3, #32
 800138e:	f040 80fd 	bne.w	800158c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_I2C_Master_Transmit+0x30>
 800139c:	2302      	movs	r3, #2
 800139e:	e0f6      	b.n	800158e <HAL_I2C_Master_Transmit+0x21e>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013a8:	f7ff fc86 	bl	8000cb8 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2319      	movs	r3, #25
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f914 	bl	80015e8 <I2C_WaitOnFlagUntilTimeout>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0e1      	b.n	800158e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2221      	movs	r2, #33	@ 0x21
 80013ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2210      	movs	r2, #16
 80013d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	893a      	ldrh	r2, [r7, #8]
 80013ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	2bff      	cmp	r3, #255	@ 0xff
 80013fa:	d906      	bls.n	800140a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	22ff      	movs	r2, #255	@ 0xff
 8001400:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	e007      	b.n	800141a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001414:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001418:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800141e:	2b00      	cmp	r3, #0
 8001420:	d024      	beq.n	800146c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800143c:	b29b      	uxth	r3, r3
 800143e:	3b01      	subs	r3, #1
 8001440:	b29a      	uxth	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001456:	b2db      	uxtb	r3, r3
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	8979      	ldrh	r1, [r7, #10]
 800145e:	4b4e      	ldr	r3, [pc, #312]	@ (8001598 <HAL_I2C_Master_Transmit+0x228>)
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 fa83 	bl	8001970 <I2C_TransferConfig>
 800146a:	e066      	b.n	800153a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001470:	b2da      	uxtb	r2, r3
 8001472:	8979      	ldrh	r1, [r7, #10]
 8001474:	4b48      	ldr	r3, [pc, #288]	@ (8001598 <HAL_I2C_Master_Transmit+0x228>)
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 fa78 	bl	8001970 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001480:	e05b      	b.n	800153a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	6a39      	ldr	r1, [r7, #32]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f907 	bl	800169a <I2C_WaitOnTXISFlagUntilTimeout>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07b      	b.n	800158e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014be:	3b01      	subs	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d034      	beq.n	800153a <HAL_I2C_Master_Transmit+0x1ca>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d130      	bne.n	800153a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	2200      	movs	r2, #0
 80014e0:	2180      	movs	r1, #128	@ 0x80
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f880 	bl	80015e8 <I2C_WaitOnFlagUntilTimeout>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e04d      	b.n	800158e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	2bff      	cmp	r3, #255	@ 0xff
 80014fa:	d90e      	bls.n	800151a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	22ff      	movs	r2, #255	@ 0xff
 8001500:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001506:	b2da      	uxtb	r2, r3
 8001508:	8979      	ldrh	r1, [r7, #10]
 800150a:	2300      	movs	r3, #0
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 fa2c 	bl	8001970 <I2C_TransferConfig>
 8001518:	e00f      	b.n	800153a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001528:	b2da      	uxtb	r2, r3
 800152a:	8979      	ldrh	r1, [r7, #10]
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 fa1b 	bl	8001970 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800153e:	b29b      	uxth	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d19e      	bne.n	8001482 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	6a39      	ldr	r1, [r7, #32]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f8ed 	bl	8001728 <I2C_WaitOnSTOPFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e01a      	b.n	800158e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2220      	movs	r2, #32
 800155e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6859      	ldr	r1, [r3, #4]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_I2C_Master_Transmit+0x22c>)
 800156c:	400b      	ands	r3, r1
 800156e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2220      	movs	r2, #32
 8001574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	e000      	b.n	800158e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800158c:	2302      	movs	r3, #2
  }
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	80002000 	.word	0x80002000
 800159c:	fe00e800 	.word	0xfe00e800

080015a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d103      	bne.n	80015be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d007      	beq.n	80015dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	619a      	str	r2, [r3, #24]
  }
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015f8:	e03b      	b.n	8001672 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f8d6 	bl	80017b0 <I2C_IsErrorOccurred>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e041      	b.n	8001692 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001614:	d02d      	beq.n	8001672 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001616:	f7ff fb4f 	bl	8000cb8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d302      	bcc.n	800162c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d122      	bne.n	8001672 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4013      	ands	r3, r2
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	429a      	cmp	r2, r3
 8001648:	d113      	bne.n	8001672 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f043 0220 	orr.w	r2, r3, #32
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2220      	movs	r2, #32
 800165a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4013      	ands	r3, r2
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	429a      	cmp	r2, r3
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	429a      	cmp	r2, r3
 800168e:	d0b4      	beq.n	80015fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016a6:	e033      	b.n	8001710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f87f 	bl	80017b0 <I2C_IsErrorOccurred>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e031      	b.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016c2:	d025      	beq.n	8001710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c4:	f7ff faf8 	bl	8000cb8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d302      	bcc.n	80016da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11a      	bne.n	8001710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d013      	beq.n	8001710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2220      	movs	r2, #32
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e007      	b.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b02      	cmp	r3, #2
 800171c:	d1c4      	bne.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001734:	e02f      	b.n	8001796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f838 	bl	80017b0 <I2C_IsErrorOccurred>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e02d      	b.n	80017a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7ff fab5 	bl	8000cb8 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11a      	bne.n	8001796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b20      	cmp	r3, #32
 800176c:	d013      	beq.n	8001796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f043 0220 	orr.w	r2, r3, #32
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e007      	b.n	80017a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d1c8      	bne.n	8001736 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d068      	beq.n	80018ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2210      	movs	r2, #16
 80017e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017e4:	e049      	b.n	800187a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ec:	d045      	beq.n	800187a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017ee:	f7ff fa63 	bl	8000cb8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d302      	bcc.n	8001804 <I2C_IsErrorOccurred+0x54>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d13a      	bne.n	800187a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001816:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001826:	d121      	bne.n	800186c <I2C_IsErrorOccurred+0xbc>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800182e:	d01d      	beq.n	800186c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001830:	7cfb      	ldrb	r3, [r7, #19]
 8001832:	2b20      	cmp	r3, #32
 8001834:	d01a      	beq.n	800186c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001844:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001846:	f7ff fa37 	bl	8000cb8 <HAL_GetTick>
 800184a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800184c:	e00e      	b.n	800186c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800184e:	f7ff fa33 	bl	8000cb8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b19      	cmp	r3, #25
 800185a:	d907      	bls.n	800186c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f043 0320 	orr.w	r3, r3, #32
 8001862:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800186a:	e006      	b.n	800187a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	2b20      	cmp	r3, #32
 8001878:	d1e9      	bne.n	800184e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b20      	cmp	r3, #32
 8001886:	d003      	beq.n	8001890 <I2C_IsErrorOccurred+0xe0>
 8001888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0aa      	beq.n	80017e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2220      	movs	r2, #32
 800189e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00b      	beq.n	80018d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00b      	beq.n	800191c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001914:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800191c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01c      	beq.n	800195e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff fe3b 	bl	80015a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <I2C_IsErrorOccurred+0x1bc>)
 8001936:	400b      	ands	r3, r1
 8001938:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800195e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001962:	4618      	mov	r0, r3
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	fe00e800 	.word	0xfe00e800

08001970 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	4613      	mov	r3, r2
 8001980:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001988:	7a7b      	ldrb	r3, [r7, #9]
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001990:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	4313      	orrs	r3, r2
 800199a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800199e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	0d5b      	lsrs	r3, r3, #21
 80019aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <I2C_TransferConfig+0x60>)
 80019b0:	430b      	orrs	r3, r1
 80019b2:	43db      	mvns	r3, r3
 80019b4:	ea02 0103 	and.w	r1, r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	03ff63ff 	.word	0x03ff63ff

080019d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d138      	bne.n	8001a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e032      	b.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	@ 0x24
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e000      	b.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d139      	bne.n	8001af4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e033      	b.n	8001af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2224      	movs	r2, #36	@ 0x24
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001abc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40007000 	.word	0x40007000

08001b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b2e:	d130      	bne.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b30:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b3c:	d038      	beq.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b46:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2232      	movs	r2, #50	@ 0x32
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b64:	e002      	b.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6c:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b78:	d102      	bne.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f2      	bne.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b8c:	d110      	bne.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e00f      	b.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9e:	d007      	beq.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ba0:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ba8:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	431bde83 	.word	0x431bde83

08001bcc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e3ca      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bde:	4b97      	ldr	r3, [pc, #604]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be8:	4b94      	ldr	r3, [pc, #592]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80e4 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4a>
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	f040 808b 	bne.w	8001d24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	f040 8087 	bne.w	8001d24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c16:	4b89      	ldr	r3, [pc, #548]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x62>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e3a2      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1a      	ldr	r2, [r3, #32]
 8001c32:	4b82      	ldr	r3, [pc, #520]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <HAL_RCC_OscConfig+0x7c>
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c46:	e005      	b.n	8001c54 <HAL_RCC_OscConfig+0x88>
 8001c48:	4b7c      	ldr	r3, [pc, #496]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d223      	bcs.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fd55 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e383      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6c:	4b73      	ldr	r3, [pc, #460]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a72      	ldr	r2, [pc, #456]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b70      	ldr	r3, [pc, #448]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	496d      	ldr	r1, [pc, #436]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	4968      	ldr	r1, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
 8001c9e:	e025      	b.n	8001cec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca0:	4b66      	ldr	r3, [pc, #408]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a65      	ldr	r2, [pc, #404]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b63      	ldr	r3, [pc, #396]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4960      	ldr	r1, [pc, #384]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	495b      	ldr	r1, [pc, #364]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fd15 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e343      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cec:	f000 fc4a 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b52      	ldr	r3, [pc, #328]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	4950      	ldr	r1, [pc, #320]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	4a4e      	ldr	r2, [pc, #312]	@ (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe ff81 	bl	8000c18 <HAL_InitTick>
 8001d16:	4603      	mov	r3, r0
 8001d18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d052      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	e327      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d032      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d2c:	4b43      	ldr	r3, [pc, #268]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a42      	ldr	r2, [pc, #264]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d38:	f7fe ffbe 	bl	8000cb8 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d40:	f7fe ffba 	bl	8000cb8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e310      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d52:	4b3a      	ldr	r3, [pc, #232]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5e:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a36      	ldr	r2, [pc, #216]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4931      	ldr	r1, [pc, #196]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	492c      	ldr	r1, [pc, #176]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	e01a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d92:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a29      	ldr	r2, [pc, #164]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff8b 	bl	8000cb8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da6:	f7fe ff87 	bl	8000cb8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e2dd      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x1da>
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d074      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d005      	beq.n	8001de6 <HAL_RCC_OscConfig+0x21a>
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d10e      	bne.n	8001dfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d10b      	bne.n	8001dfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d064      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d160      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e2ba      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x24a>
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e026      	b.n	8001e64 <HAL_RCC_OscConfig+0x298>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e1e:	d115      	bne.n	8001e4c <HAL_RCC_OscConfig+0x280>
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a02      	ldr	r2, [pc, #8]	@ (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x298>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08003c2c 	.word	0x08003c2c
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	4ba0      	ldr	r3, [pc, #640]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a9f      	ldr	r2, [pc, #636]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b9d      	ldr	r3, [pc, #628]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a9c      	ldr	r2, [pc, #624]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ff24 	bl	8000cb8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7fe ff20 	bl	8000cb8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	@ 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e276      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e86:	4b92      	ldr	r3, [pc, #584]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x2a8>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7fe ff10 	bl	8000cb8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7fe ff0c 	bl	8000cb8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	@ 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e262      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eae:	4b88      	ldr	r3, [pc, #544]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2d0>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d060      	beq.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_OscConfig+0x310>
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d119      	bne.n	8001f0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d116      	bne.n	8001f0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001edc:	4b7c      	ldr	r3, [pc, #496]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x328>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e23f      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b76      	ldr	r3, [pc, #472]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	4973      	ldr	r1, [pc, #460]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f08:	e040      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d023      	beq.n	8001f5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f12:	4b6f      	ldr	r3, [pc, #444]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6e      	ldr	r2, [pc, #440]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fecb 	bl	8000cb8 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7fe fec7 	bl	8000cb8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e21d      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f38:	4b65      	ldr	r3, [pc, #404]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b62      	ldr	r3, [pc, #392]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	495f      	ldr	r1, [pc, #380]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	e018      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a5c      	ldr	r2, [pc, #368]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe fea7 	bl	8000cb8 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7fe fea3 	bl	8000cb8 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1f9      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f80:	4b53      	ldr	r3, [pc, #332]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03c      	beq.n	8002012 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01c      	beq.n	8001fda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa6:	4a4a      	ldr	r2, [pc, #296]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fe82 	bl	8000cb8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7fe fe7e 	bl	8000cb8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1d4      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fca:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ef      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x3ec>
 8001fd8:	e01b      	b.n	8002012 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fda:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7fe fe65 	bl	8000cb8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7fe fe61 	bl	8000cb8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1b7      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002004:	4b32      	ldr	r3, [pc, #200]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ef      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a6 	beq.w	800216c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002024:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203a:	6593      	str	r3, [r2, #88]	@ 0x58
 800203c:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002048:	2301      	movs	r3, #1
 800204a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204c:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <HAL_RCC_OscConfig+0x508>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d118      	bne.n	800208a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_RCC_OscConfig+0x508>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_RCC_OscConfig+0x508>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002064:	f7fe fe28 	bl	8000cb8 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7fe fe24 	bl	8000cb8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e17a      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_RCC_OscConfig+0x508>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4d8>
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002098:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020a2:	e029      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d115      	bne.n	80020d8 <HAL_RCC_OscConfig+0x50c>
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b2:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	4a03      	ldr	r2, [pc, #12]	@ (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020cc:	e014      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
 80020d8:	4b9c      	ldr	r3, [pc, #624]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	4a9b      	ldr	r2, [pc, #620]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020e8:	4b98      	ldr	r3, [pc, #608]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	4a97      	ldr	r2, [pc, #604]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d016      	beq.n	800212e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7fe fdda 	bl	8000cb8 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	e00a      	b.n	800211e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7fe fdd6 	bl	8000cb8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e12a      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	4b8b      	ldr	r3, [pc, #556]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ed      	beq.n	8002108 <HAL_RCC_OscConfig+0x53c>
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe fdc3 	bl	8000cb8 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fdbf 	bl	8000cb8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e113      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800214c:	4b7f      	ldr	r3, [pc, #508]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ed      	bne.n	8002136 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215a:	7ffb      	ldrb	r3, [r7, #31]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002160:	4b7a      	ldr	r3, [pc, #488]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	4a79      	ldr	r2, [pc, #484]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800216a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80fe 	beq.w	8002372 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	2b02      	cmp	r3, #2
 800217c:	f040 80d0 	bne.w	8002320 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002180:	4b72      	ldr	r3, [pc, #456]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	429a      	cmp	r2, r3
 8002192:	d130      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	3b01      	subs	r3, #1
 80021a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d127      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d11f      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021c0:	2a07      	cmp	r2, #7
 80021c2:	bf14      	ite	ne
 80021c4:	2201      	movne	r2, #1
 80021c6:	2200      	moveq	r2, #0
 80021c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d113      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	3b01      	subs	r3, #1
 80021dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	3b01      	subs	r3, #1
 80021f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d06e      	beq.n	80022d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d069      	beq.n	80022d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021fc:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002208:	4b50      	ldr	r3, [pc, #320]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0ad      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002218:	4b4c      	ldr	r3, [pc, #304]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a4b      	ldr	r2, [pc, #300]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 800221e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002222:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002224:	f7fe fd48 	bl	8000cb8 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fd44 	bl	8000cb8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e09a      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223e:	4b43      	ldr	r3, [pc, #268]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224a:	4b40      	ldr	r3, [pc, #256]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	4b40      	ldr	r3, [pc, #256]	@ (8002350 <HAL_RCC_OscConfig+0x784>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800225a:	3a01      	subs	r2, #1
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002264:	0212      	lsls	r2, r2, #8
 8002266:	4311      	orrs	r1, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800226c:	0852      	lsrs	r2, r2, #1
 800226e:	3a01      	subs	r2, #1
 8002270:	0552      	lsls	r2, r2, #21
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002278:	0852      	lsrs	r2, r2, #1
 800227a:	3a01      	subs	r2, #1
 800227c:	0652      	lsls	r2, r2, #25
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002284:	0912      	lsrs	r2, r2, #4
 8002286:	0452      	lsls	r2, r2, #17
 8002288:	430a      	orrs	r2, r1
 800228a:	4930      	ldr	r1, [pc, #192]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 800228c:	4313      	orrs	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002290:	4b2e      	ldr	r3, [pc, #184]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2d      	ldr	r2, [pc, #180]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800229c:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a8:	f7fe fd06 	bl	8000cb8 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fd02 	bl	8000cb8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e058      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ce:	e050      	b.n	8002372 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e04f      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d4:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d148      	bne.n	8002372 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ec:	4b17      	ldr	r3, [pc, #92]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a16      	ldr	r2, [pc, #88]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022f8:	f7fe fcde 	bl	8000cb8 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002300:	f7fe fcda 	bl	8000cb8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e030      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x734>
 800231e:	e028      	b.n	8002372 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d023      	beq.n	800236e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_RCC_OscConfig+0x780>)
 800232c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe fcc1 	bl	8000cb8 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002338:	e00c      	b.n	8002354 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe fcbd 	bl	8000cb8 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d905      	bls.n	8002354 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e013      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
 800234c:	40021000 	.word	0x40021000
 8002350:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_RCC_OscConfig+0x7b0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ec      	bne.n	800233a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002360:	4b06      	ldr	r3, [pc, #24]	@ (800237c <HAL_RCC_OscConfig+0x7b0>)
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	4905      	ldr	r1, [pc, #20]	@ (800237c <HAL_RCC_OscConfig+0x7b0>)
 8002366:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_RCC_OscConfig+0x7b4>)
 8002368:	4013      	ands	r3, r2
 800236a:	60cb      	str	r3, [r1, #12]
 800236c:	e001      	b.n	8002372 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	feeefffc 	.word	0xfeeefffc

08002384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0e7      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b75      	ldr	r3, [pc, #468]	@ (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d910      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b72      	ldr	r3, [pc, #456]	@ (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4970      	ldr	r1, [pc, #448]	@ (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0cf      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d010      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4b66      	ldr	r3, [pc, #408]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d908      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b63      	ldr	r3, [pc, #396]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4960      	ldr	r1, [pc, #384]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d04c      	beq.n	800249c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240a:	4b5a      	ldr	r3, [pc, #360]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d121      	bne.n	800245a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0a6      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002422:	4b54      	ldr	r3, [pc, #336]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d115      	bne.n	800245a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e09a      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243a:	4b4e      	ldr	r3, [pc, #312]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e08e      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800244a:	4b4a      	ldr	r3, [pc, #296]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e086      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b46      	ldr	r3, [pc, #280]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4943      	ldr	r1, [pc, #268]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246c:	f7fe fc24 	bl	8000cb8 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7fe fc20 	bl	8000cb8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e06e      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b3a      	ldr	r3, [pc, #232]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d010      	beq.n	80024ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	4b31      	ldr	r3, [pc, #196]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d208      	bcs.n	80024ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	492b      	ldr	r1, [pc, #172]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ca:	4b29      	ldr	r3, [pc, #164]	@ (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d210      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d8:	4b25      	ldr	r3, [pc, #148]	@ (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 0207 	bic.w	r2, r3, #7
 80024e0:	4923      	ldr	r1, [pc, #140]	@ (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e8:	4b21      	ldr	r3, [pc, #132]	@ (8002570 <HAL_RCC_ClockConfig+0x1ec>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e036      	b.n	8002568 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002506:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4918      	ldr	r1, [pc, #96]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002524:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4910      	ldr	r1, [pc, #64]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002538:	f000 f824 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <HAL_RCC_ClockConfig+0x1f0>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	490b      	ldr	r1, [pc, #44]	@ (8002578 <HAL_RCC_ClockConfig+0x1f4>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	4a09      	ldr	r2, [pc, #36]	@ (800257c <HAL_RCC_ClockConfig+0x1f8>)
 8002556:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_RCC_ClockConfig+0x1fc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fb5b 	bl	8000c18 <HAL_InitTick>
 8002562:	4603      	mov	r3, r0
 8002564:	72fb      	strb	r3, [r7, #11]

  return status;
 8002566:	7afb      	ldrb	r3, [r7, #11]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40022000 	.word	0x40022000
 8002574:	40021000 	.word	0x40021000
 8002578:	08003c2c 	.word	0x08003c2c
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	@ 0x24
 8002588:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002592:	4b3e      	ldr	r3, [pc, #248]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259c:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x34>
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d121      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d11e      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025b8:	4b34      	ldr	r3, [pc, #208]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025c4:	4b31      	ldr	r3, [pc, #196]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025d4:	4b2d      	ldr	r3, [pc, #180]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d102      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025fc:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x110>)
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e004      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d101      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002608:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x114>)
 800260a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d134      	bne.n	800267c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002612:	4b1e      	ldr	r3, [pc, #120]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d003      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0xa6>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d003      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0xac>
 8002628:	e005      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800262a:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x110>)
 800262c:	617b      	str	r3, [r7, #20]
      break;
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002630:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x114>)
 8002632:	617b      	str	r3, [r7, #20]
      break;
 8002634:	e002      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	617b      	str	r3, [r7, #20]
      break;
 800263a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	3301      	adds	r3, #1
 8002648:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	fb03 f202 	mul.w	r2, r3, r2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002662:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	0e5b      	lsrs	r3, r3, #25
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	3301      	adds	r3, #1
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800267c:	69bb      	ldr	r3, [r7, #24]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	@ 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	08003c44 	.word	0x08003c44
 8002694:	00f42400 	.word	0x00f42400
 8002698:	007a1200 	.word	0x007a1200

0800269c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a0:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026b8:	f7ff fff0 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4904      	ldr	r1, [pc, #16]	@ (80026dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08003c3c 	.word	0x08003c3c

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026e4:	f7ff ffda 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0adb      	lsrs	r3, r3, #11
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4904      	ldr	r1, [pc, #16]	@ (8002708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	08003c3c 	.word	0x08003c3c

0800270c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002718:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002724:	f7ff f9ee 	bl	8001b04 <HAL_PWREx_GetVoltageRange>
 8002728:	6178      	str	r0, [r7, #20]
 800272a:	e014      	b.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b25      	ldr	r3, [pc, #148]	@ (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	4a24      	ldr	r2, [pc, #144]	@ (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	@ 0x58
 8002738:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002744:	f7ff f9de 	bl	8001b04 <HAL_PWREx_GetVoltageRange>
 8002748:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274e:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800275c:	d10b      	bne.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b80      	cmp	r3, #128	@ 0x80
 8002762:	d919      	bls.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2ba0      	cmp	r3, #160	@ 0xa0
 8002768:	d902      	bls.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800276a:	2302      	movs	r3, #2
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e013      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002770:	2301      	movs	r3, #1
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	e010      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b80      	cmp	r3, #128	@ 0x80
 800277a:	d902      	bls.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800277c:	2303      	movs	r3, #3
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	e00a      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b80      	cmp	r3, #128	@ 0x80
 8002786:	d102      	bne.n	800278e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002788:	2302      	movs	r3, #2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e004      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b70      	cmp	r3, #112	@ 0x70
 8002792:	d101      	bne.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002794:	2301      	movs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 0207 	bic.w	r2, r3, #7
 80027a0:	4909      	ldr	r1, [pc, #36]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a8:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40022000 	.word	0x40022000

080027cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027d4:	2300      	movs	r3, #0
 80027d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d8:	2300      	movs	r3, #0
 80027da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d041      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027f0:	d02a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027f6:	d824      	bhi.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027fc:	d008      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002802:	d81e      	bhi.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800280c:	d010      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800280e:	e018      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002810:	4b86      	ldr	r3, [pc, #536]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a85      	ldr	r2, [pc, #532]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800281a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800281c:	e015      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fabb 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800282e:	e00c      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3320      	adds	r3, #32
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fba6 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002840:	e003      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	74fb      	strb	r3, [r7, #19]
      break;
 8002846:	e000      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002850:	4b76      	ldr	r3, [pc, #472]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800285e:	4973      	ldr	r1, [pc, #460]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002866:	e001      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d041      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800287c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002880:	d02a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002882:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002886:	d824      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800288c:	d008      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800288e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002892:	d81e      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800289c:	d010      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800289e:	e018      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a0:	4b62      	ldr	r3, [pc, #392]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a61      	ldr	r2, [pc, #388]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ac:	e015      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fa73 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028be:	e00c      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3320      	adds	r3, #32
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fb5e 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d0:	e003      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	74fb      	strb	r3, [r7, #19]
      break;
 80028d6:	e000      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e0:	4b52      	ldr	r3, [pc, #328]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028ee:	494f      	ldr	r1, [pc, #316]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028f6:	e001      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a0 	beq.w	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800290e:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	4a40      	ldr	r2, [pc, #256]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002930:	4b3e      	ldr	r3, [pc, #248]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293c:	2301      	movs	r3, #1
 800293e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002940:	4b3b      	ldr	r3, [pc, #236]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a3a      	ldr	r2, [pc, #232]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800294c:	f7fe f9b4 	bl	8000cb8 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002952:	e009      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe f9b0 	bl	8000cb8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	74fb      	strb	r3, [r7, #19]
        break;
 8002966:	e005      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002968:	4b31      	ldr	r3, [pc, #196]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d15c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002984:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01f      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	d019      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002998:	4b24      	ldr	r3, [pc, #144]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a4:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	4a20      	ldr	r2, [pc, #128]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	4a1c      	ldr	r2, [pc, #112]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c4:	4a19      	ldr	r2, [pc, #100]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe f96f 	bl	8000cb8 <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029dc:	e00b      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe f96b 	bl	8000cb8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d902      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	74fb      	strb	r3, [r7, #19]
            break;
 80029f4:	e006      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ec      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a1a:	4904      	ldr	r1, [pc, #16]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a22:	e009      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
 8002a28:	e006      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a38:	7c7b      	ldrb	r3, [r7, #17]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b9e      	ldr	r3, [pc, #632]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	4a9d      	ldr	r2, [pc, #628]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a56:	4b98      	ldr	r3, [pc, #608]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5c:	f023 0203 	bic.w	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a64:	4994      	ldr	r1, [pc, #592]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a78:	4b8f      	ldr	r3, [pc, #572]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f023 020c 	bic.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	498c      	ldr	r1, [pc, #560]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9a:	4b87      	ldr	r3, [pc, #540]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	4983      	ldr	r1, [pc, #524]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002abc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	497b      	ldr	r1, [pc, #492]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ade:	4b76      	ldr	r3, [pc, #472]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aec:	4972      	ldr	r1, [pc, #456]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b00:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	496a      	ldr	r1, [pc, #424]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b22:	4b65      	ldr	r3, [pc, #404]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	4961      	ldr	r1, [pc, #388]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b44:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b52:	4959      	ldr	r1, [pc, #356]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b66:	4b54      	ldr	r3, [pc, #336]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b74:	4950      	ldr	r1, [pc, #320]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b88:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b96:	4948      	ldr	r1, [pc, #288]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002baa:	4b43      	ldr	r3, [pc, #268]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	493f      	ldr	r1, [pc, #252]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d028      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bda:	4937      	ldr	r1, [pc, #220]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	4b32      	ldr	r3, [pc, #200]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a31      	ldr	r2, [pc, #196]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf6:	60d3      	str	r3, [r2, #12]
 8002bf8:	e011      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f8c8 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d028      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c2a:	4b23      	ldr	r3, [pc, #140]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	491f      	ldr	r1, [pc, #124]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c54:	60d3      	str	r3, [r2, #12]
 8002c56:	e011      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2101      	movs	r1, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f899 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d02b      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c96:	4908      	ldr	r1, [pc, #32]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a02      	ldr	r2, [pc, #8]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f867 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cdc:	7cfb      	ldrb	r3, [r7, #19]
 8002cde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02f      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cec:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cfa:	4928      	ldr	r1, [pc, #160]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f844 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d014      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	74bb      	strb	r3, [r7, #18]
 8002d26:	e011      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3320      	adds	r3, #32
 8002d36:	2102      	movs	r1, #2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f925 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d58:	4b10      	ldr	r3, [pc, #64]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d66:	490d      	ldr	r1, [pc, #52]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d8a:	4904      	ldr	r1, [pc, #16]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000

08002da0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dae:	4b75      	ldr	r3, [pc, #468]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d018      	beq.n	8002dec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dba:	4b72      	ldr	r3, [pc, #456]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10d      	bne.n	8002de6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
       ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d047      	beq.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e044      	b.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d018      	beq.n	8002e26 <RCCEx_PLLSAI1_Config+0x86>
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d825      	bhi.n	8002e44 <RCCEx_PLLSAI1_Config+0xa4>
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d002      	beq.n	8002e02 <RCCEx_PLLSAI1_Config+0x62>
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d009      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0x74>
 8002e00:	e020      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e02:	4b60      	ldr	r3, [pc, #384]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11d      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e12:	e01a      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e14:	4b5b      	ldr	r3, [pc, #364]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d116      	bne.n	8002e4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e24:	e013      	b.n	8002e4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e26:	4b57      	ldr	r3, [pc, #348]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e32:	4b54      	ldr	r3, [pc, #336]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e42:	e006      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	e004      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	4944      	ldr	r1, [pc, #272]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d17d      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e7c:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a40      	ldr	r2, [pc, #256]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fd ff16 	bl	8000cb8 <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e8e:	e009      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e90:	f7fd ff12 	bl	8000cb8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d902      	bls.n	8002ea4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ea2:	e005      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea4:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ef      	bne.n	8002e90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d160      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ebc:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	0211      	lsls	r1, r2, #8
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	0912      	lsrs	r2, r2, #4
 8002ed4:	0452      	lsls	r2, r2, #17
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	492a      	ldr	r1, [pc, #168]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	610b      	str	r3, [r1, #16]
 8002ede:	e027      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d112      	bne.n	8002f0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee6:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002eee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6892      	ldr	r2, [r2, #8]
 8002ef6:	0211      	lsls	r1, r2, #8
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6912      	ldr	r2, [r2, #16]
 8002efc:	0852      	lsrs	r2, r2, #1
 8002efe:	3a01      	subs	r2, #1
 8002f00:	0552      	lsls	r2, r2, #21
 8002f02:	430a      	orrs	r2, r1
 8002f04:	491f      	ldr	r1, [pc, #124]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	610b      	str	r3, [r1, #16]
 8002f0a:	e011      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6952      	ldr	r2, [r2, #20]
 8002f22:	0852      	lsrs	r2, r2, #1
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0652      	lsls	r2, r2, #25
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4916      	ldr	r1, [pc, #88]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fd febc 	bl	8000cb8 <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f44:	f7fd feb8 	bl	8000cb8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
          break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4904      	ldr	r1, [pc, #16]	@ (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f96:	4b6a      	ldr	r3, [pc, #424]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fa2:	4b67      	ldr	r3, [pc, #412]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d10d      	bne.n	8002fce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fba:	4b61      	ldr	r3, [pc, #388]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d047      	beq.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e044      	b.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d018      	beq.n	800300e <RCCEx_PLLSAI2_Config+0x86>
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d825      	bhi.n	800302c <RCCEx_PLLSAI2_Config+0xa4>
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d002      	beq.n	8002fea <RCCEx_PLLSAI2_Config+0x62>
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d009      	beq.n	8002ffc <RCCEx_PLLSAI2_Config+0x74>
 8002fe8:	e020      	b.n	800302c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fea:	4b55      	ldr	r3, [pc, #340]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11d      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffa:	e01a      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ffc:	4b50      	ldr	r3, [pc, #320]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300c:	e013      	b.n	8003036 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800300e:	4b4c      	ldr	r3, [pc, #304]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301a:	4b49      	ldr	r3, [pc, #292]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302a:	e006      	b.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      break;
 8003030:	e004      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800303a:	bf00      	nop
    }

    if(status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003042:	4b3f      	ldr	r3, [pc, #252]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	430b      	orrs	r3, r1
 8003058:	4939      	ldr	r1, [pc, #228]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d167      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003064:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a35      	ldr	r2, [pc, #212]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fd fe22 	bl	8000cb8 <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003076:	e009      	b.n	800308c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003078:	f7fd fe1e 	bl	8000cb8 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	73fb      	strb	r3, [r7, #15]
        break;
 800308a:	e005      	b.n	8003098 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800308c:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ef      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d14a      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030a4:	4b26      	ldr	r3, [pc, #152]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	0211      	lsls	r1, r2, #8
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	0912      	lsrs	r2, r2, #4
 80030bc:	0452      	lsls	r2, r2, #17
 80030be:	430a      	orrs	r2, r1
 80030c0:	491f      	ldr	r1, [pc, #124]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	614b      	str	r3, [r1, #20]
 80030c6:	e011      	b.n	80030ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6892      	ldr	r2, [r2, #8]
 80030d8:	0211      	lsls	r1, r2, #8
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6912      	ldr	r2, [r2, #16]
 80030de:	0852      	lsrs	r2, r2, #1
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0652      	lsls	r2, r2, #25
 80030e4:	430a      	orrs	r2, r1
 80030e6:	4916      	ldr	r1, [pc, #88]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030ec:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fd fdde 	bl	8000cb8 <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030fe:	e009      	b.n	8003114 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003100:	f7fd fdda 	bl	8000cb8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	73fb      	strb	r3, [r7, #15]
          break;
 8003112:	e005      	b.n	8003120 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003114:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ef      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003126:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4904      	ldr	r1, [pc, #16]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e040      	b.n	80031d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fc76 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	@ 0x24
 8003170:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fae0 	bl	8003750 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f825 	bl	80031e0 <UART_SetConfig>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e01b      	b.n	80031d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fb5f 	bl	8003894 <UART_CheckIdleState>
 80031d6:	4603      	mov	r3, r0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e4:	b08a      	sub	sp, #40	@ 0x28
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	431a      	orrs	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4313      	orrs	r3, r2
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4ba4      	ldr	r3, [pc, #656]	@ (80034a0 <UART_SetConfig+0x2c0>)
 8003210:	4013      	ands	r3, r2
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003218:	430b      	orrs	r3, r1
 800321a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a99      	ldr	r2, [pc, #612]	@ (80034a4 <UART_SetConfig+0x2c4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	4313      	orrs	r3, r2
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a90      	ldr	r2, [pc, #576]	@ (80034a8 <UART_SetConfig+0x2c8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d126      	bne.n	80032b8 <UART_SetConfig+0xd8>
 800326a:	4b90      	ldr	r3, [pc, #576]	@ (80034ac <UART_SetConfig+0x2cc>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b03      	cmp	r3, #3
 8003276:	d81b      	bhi.n	80032b0 <UART_SetConfig+0xd0>
 8003278:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <UART_SetConfig+0xa0>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	08003291 	.word	0x08003291
 8003284:	080032a1 	.word	0x080032a1
 8003288:	08003299 	.word	0x08003299
 800328c:	080032a9 	.word	0x080032a9
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003296:	e116      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003298:	2302      	movs	r3, #2
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329e:	e112      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80032a0:	2304      	movs	r3, #4
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a6:	e10e      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80032a8:	2308      	movs	r3, #8
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ae:	e10a      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80032b0:	2310      	movs	r3, #16
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b6:	e106      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a7c      	ldr	r2, [pc, #496]	@ (80034b0 <UART_SetConfig+0x2d0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d138      	bne.n	8003334 <UART_SetConfig+0x154>
 80032c2:	4b7a      	ldr	r3, [pc, #488]	@ (80034ac <UART_SetConfig+0x2cc>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d82d      	bhi.n	800332c <UART_SetConfig+0x14c>
 80032d0:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <UART_SetConfig+0xf8>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	0800330d 	.word	0x0800330d
 80032dc:	0800332d 	.word	0x0800332d
 80032e0:	0800332d 	.word	0x0800332d
 80032e4:	0800332d 	.word	0x0800332d
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	0800332d 	.word	0x0800332d
 80032f0:	0800332d 	.word	0x0800332d
 80032f4:	0800332d 	.word	0x0800332d
 80032f8:	08003315 	.word	0x08003315
 80032fc:	0800332d 	.word	0x0800332d
 8003300:	0800332d 	.word	0x0800332d
 8003304:	0800332d 	.word	0x0800332d
 8003308:	08003325 	.word	0x08003325
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003312:	e0d8      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003314:	2302      	movs	r3, #2
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800331a:	e0d4      	b.n	80034c6 <UART_SetConfig+0x2e6>
 800331c:	2304      	movs	r3, #4
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003322:	e0d0      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003324:	2308      	movs	r3, #8
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800332a:	e0cc      	b.n	80034c6 <UART_SetConfig+0x2e6>
 800332c:	2310      	movs	r3, #16
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003332:	e0c8      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5e      	ldr	r2, [pc, #376]	@ (80034b4 <UART_SetConfig+0x2d4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d125      	bne.n	800338a <UART_SetConfig+0x1aa>
 800333e:	4b5b      	ldr	r3, [pc, #364]	@ (80034ac <UART_SetConfig+0x2cc>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003344:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003348:	2b30      	cmp	r3, #48	@ 0x30
 800334a:	d016      	beq.n	800337a <UART_SetConfig+0x19a>
 800334c:	2b30      	cmp	r3, #48	@ 0x30
 800334e:	d818      	bhi.n	8003382 <UART_SetConfig+0x1a2>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d00a      	beq.n	800336a <UART_SetConfig+0x18a>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d814      	bhi.n	8003382 <UART_SetConfig+0x1a2>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <UART_SetConfig+0x182>
 800335c:	2b10      	cmp	r3, #16
 800335e:	d008      	beq.n	8003372 <UART_SetConfig+0x192>
 8003360:	e00f      	b.n	8003382 <UART_SetConfig+0x1a2>
 8003362:	2300      	movs	r3, #0
 8003364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003368:	e0ad      	b.n	80034c6 <UART_SetConfig+0x2e6>
 800336a:	2302      	movs	r3, #2
 800336c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003370:	e0a9      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003372:	2304      	movs	r3, #4
 8003374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003378:	e0a5      	b.n	80034c6 <UART_SetConfig+0x2e6>
 800337a:	2308      	movs	r3, #8
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003380:	e0a1      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003382:	2310      	movs	r3, #16
 8003384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003388:	e09d      	b.n	80034c6 <UART_SetConfig+0x2e6>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4a      	ldr	r2, [pc, #296]	@ (80034b8 <UART_SetConfig+0x2d8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d125      	bne.n	80033e0 <UART_SetConfig+0x200>
 8003394:	4b45      	ldr	r3, [pc, #276]	@ (80034ac <UART_SetConfig+0x2cc>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800339e:	2bc0      	cmp	r3, #192	@ 0xc0
 80033a0:	d016      	beq.n	80033d0 <UART_SetConfig+0x1f0>
 80033a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80033a4:	d818      	bhi.n	80033d8 <UART_SetConfig+0x1f8>
 80033a6:	2b80      	cmp	r3, #128	@ 0x80
 80033a8:	d00a      	beq.n	80033c0 <UART_SetConfig+0x1e0>
 80033aa:	2b80      	cmp	r3, #128	@ 0x80
 80033ac:	d814      	bhi.n	80033d8 <UART_SetConfig+0x1f8>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <UART_SetConfig+0x1d8>
 80033b2:	2b40      	cmp	r3, #64	@ 0x40
 80033b4:	d008      	beq.n	80033c8 <UART_SetConfig+0x1e8>
 80033b6:	e00f      	b.n	80033d8 <UART_SetConfig+0x1f8>
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033be:	e082      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80033c0:	2302      	movs	r3, #2
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033c6:	e07e      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80033c8:	2304      	movs	r3, #4
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ce:	e07a      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80033d0:	2308      	movs	r3, #8
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d6:	e076      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80033d8:	2310      	movs	r3, #16
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033de:	e072      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a35      	ldr	r2, [pc, #212]	@ (80034bc <UART_SetConfig+0x2dc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12a      	bne.n	8003440 <UART_SetConfig+0x260>
 80033ea:	4b30      	ldr	r3, [pc, #192]	@ (80034ac <UART_SetConfig+0x2cc>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033f8:	d01a      	beq.n	8003430 <UART_SetConfig+0x250>
 80033fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033fe:	d81b      	bhi.n	8003438 <UART_SetConfig+0x258>
 8003400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003404:	d00c      	beq.n	8003420 <UART_SetConfig+0x240>
 8003406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800340a:	d815      	bhi.n	8003438 <UART_SetConfig+0x258>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <UART_SetConfig+0x238>
 8003410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003414:	d008      	beq.n	8003428 <UART_SetConfig+0x248>
 8003416:	e00f      	b.n	8003438 <UART_SetConfig+0x258>
 8003418:	2300      	movs	r3, #0
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341e:	e052      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003420:	2302      	movs	r3, #2
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003426:	e04e      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003428:	2304      	movs	r3, #4
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342e:	e04a      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003430:	2308      	movs	r3, #8
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003436:	e046      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003438:	2310      	movs	r3, #16
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343e:	e042      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <UART_SetConfig+0x2c4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d13a      	bne.n	80034c0 <UART_SetConfig+0x2e0>
 800344a:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <UART_SetConfig+0x2cc>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003450:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003454:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003458:	d01a      	beq.n	8003490 <UART_SetConfig+0x2b0>
 800345a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800345e:	d81b      	bhi.n	8003498 <UART_SetConfig+0x2b8>
 8003460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003464:	d00c      	beq.n	8003480 <UART_SetConfig+0x2a0>
 8003466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800346a:	d815      	bhi.n	8003498 <UART_SetConfig+0x2b8>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <UART_SetConfig+0x298>
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003474:	d008      	beq.n	8003488 <UART_SetConfig+0x2a8>
 8003476:	e00f      	b.n	8003498 <UART_SetConfig+0x2b8>
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347e:	e022      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003480:	2302      	movs	r3, #2
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003486:	e01e      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003488:	2304      	movs	r3, #4
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348e:	e01a      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003490:	2308      	movs	r3, #8
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003496:	e016      	b.n	80034c6 <UART_SetConfig+0x2e6>
 8003498:	2310      	movs	r3, #16
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349e:	e012      	b.n	80034c6 <UART_SetConfig+0x2e6>
 80034a0:	efff69f3 	.word	0xefff69f3
 80034a4:	40008000 	.word	0x40008000
 80034a8:	40013800 	.word	0x40013800
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40004400 	.word	0x40004400
 80034b4:	40004800 	.word	0x40004800
 80034b8:	40004c00 	.word	0x40004c00
 80034bc:	40005000 	.word	0x40005000
 80034c0:	2310      	movs	r3, #16
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a9f      	ldr	r2, [pc, #636]	@ (8003748 <UART_SetConfig+0x568>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d17a      	bne.n	80035c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d824      	bhi.n	8003522 <UART_SetConfig+0x342>
 80034d8:	a201      	add	r2, pc, #4	@ (adr r2, 80034e0 <UART_SetConfig+0x300>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003505 	.word	0x08003505
 80034e4:	08003523 	.word	0x08003523
 80034e8:	0800350d 	.word	0x0800350d
 80034ec:	08003523 	.word	0x08003523
 80034f0:	08003513 	.word	0x08003513
 80034f4:	08003523 	.word	0x08003523
 80034f8:	08003523 	.word	0x08003523
 80034fc:	08003523 	.word	0x08003523
 8003500:	0800351b 	.word	0x0800351b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003504:	f7ff f8d6 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003508:	61f8      	str	r0, [r7, #28]
        break;
 800350a:	e010      	b.n	800352e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800350c:	4b8f      	ldr	r3, [pc, #572]	@ (800374c <UART_SetConfig+0x56c>)
 800350e:	61fb      	str	r3, [r7, #28]
        break;
 8003510:	e00d      	b.n	800352e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003512:	f7ff f837 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8003516:	61f8      	str	r0, [r7, #28]
        break;
 8003518:	e009      	b.n	800352e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800351e:	61fb      	str	r3, [r7, #28]
        break;
 8003520:	e005      	b.n	800352e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800352c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80fb 	beq.w	800372c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	429a      	cmp	r2, r3
 8003544:	d305      	bcc.n	8003552 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	429a      	cmp	r2, r3
 8003550:	d903      	bls.n	800355a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003558:	e0e8      	b.n	800372c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	2200      	movs	r2, #0
 800355e:	461c      	mov	r4, r3
 8003560:	4615      	mov	r5, r2
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	022b      	lsls	r3, r5, #8
 800356c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003570:	0222      	lsls	r2, r4, #8
 8003572:	68f9      	ldr	r1, [r7, #12]
 8003574:	6849      	ldr	r1, [r1, #4]
 8003576:	0849      	lsrs	r1, r1, #1
 8003578:	2000      	movs	r0, #0
 800357a:	4688      	mov	r8, r1
 800357c:	4681      	mov	r9, r0
 800357e:	eb12 0a08 	adds.w	sl, r2, r8
 8003582:	eb43 0b09 	adc.w	fp, r3, r9
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003594:	4650      	mov	r0, sl
 8003596:	4659      	mov	r1, fp
 8003598:	f7fc fe16 	bl	80001c8 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035aa:	d308      	bcc.n	80035be <UART_SetConfig+0x3de>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035b2:	d204      	bcs.n	80035be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	e0b6      	b.n	800372c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035c4:	e0b2      	b.n	800372c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ce:	d15e      	bne.n	800368e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d828      	bhi.n	800362a <UART_SetConfig+0x44a>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <UART_SetConfig+0x400>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003605 	.word	0x08003605
 80035e4:	0800360d 	.word	0x0800360d
 80035e8:	08003615 	.word	0x08003615
 80035ec:	0800362b 	.word	0x0800362b
 80035f0:	0800361b 	.word	0x0800361b
 80035f4:	0800362b 	.word	0x0800362b
 80035f8:	0800362b 	.word	0x0800362b
 80035fc:	0800362b 	.word	0x0800362b
 8003600:	08003623 	.word	0x08003623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7ff f856 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003608:	61f8      	str	r0, [r7, #28]
        break;
 800360a:	e014      	b.n	8003636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7ff f868 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8003610:	61f8      	str	r0, [r7, #28]
        break;
 8003612:	e010      	b.n	8003636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003614:	4b4d      	ldr	r3, [pc, #308]	@ (800374c <UART_SetConfig+0x56c>)
 8003616:	61fb      	str	r3, [r7, #28]
        break;
 8003618:	e00d      	b.n	8003636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361a:	f7fe ffb3 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800361e:	61f8      	str	r0, [r7, #28]
        break;
 8003620:	e009      	b.n	8003636 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003626:	61fb      	str	r3, [r7, #28]
        break;
 8003628:	e005      	b.n	8003636 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d077      	beq.n	800372c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005a      	lsls	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	441a      	add	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b0f      	cmp	r3, #15
 8003656:	d916      	bls.n	8003686 <UART_SetConfig+0x4a6>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365e:	d212      	bcs.n	8003686 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f023 030f 	bic.w	r3, r3, #15
 8003668:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	b29a      	uxth	r2, r3
 8003676:	8afb      	ldrh	r3, [r7, #22]
 8003678:	4313      	orrs	r3, r2
 800367a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	8afa      	ldrh	r2, [r7, #22]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	e052      	b.n	800372c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800368c:	e04e      	b.n	800372c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800368e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003692:	2b08      	cmp	r3, #8
 8003694:	d827      	bhi.n	80036e6 <UART_SetConfig+0x506>
 8003696:	a201      	add	r2, pc, #4	@ (adr r2, 800369c <UART_SetConfig+0x4bc>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036c9 	.word	0x080036c9
 80036a4:	080036d1 	.word	0x080036d1
 80036a8:	080036e7 	.word	0x080036e7
 80036ac:	080036d7 	.word	0x080036d7
 80036b0:	080036e7 	.word	0x080036e7
 80036b4:	080036e7 	.word	0x080036e7
 80036b8:	080036e7 	.word	0x080036e7
 80036bc:	080036df 	.word	0x080036df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7fe fff8 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 80036c4:	61f8      	str	r0, [r7, #28]
        break;
 80036c6:	e014      	b.n	80036f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c8:	f7ff f80a 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 80036cc:	61f8      	str	r0, [r7, #28]
        break;
 80036ce:	e010      	b.n	80036f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d0:	4b1e      	ldr	r3, [pc, #120]	@ (800374c <UART_SetConfig+0x56c>)
 80036d2:	61fb      	str	r3, [r7, #28]
        break;
 80036d4:	e00d      	b.n	80036f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d6:	f7fe ff55 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 80036da:	61f8      	str	r0, [r7, #28]
        break;
 80036dc:	e009      	b.n	80036f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e2:	61fb      	str	r3, [r7, #28]
        break;
 80036e4:	e005      	b.n	80036f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036f0:	bf00      	nop
    }

    if (pclk != 0U)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d019      	beq.n	800372c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	085a      	lsrs	r2, r3, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	441a      	add	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b0f      	cmp	r3, #15
 8003710:	d909      	bls.n	8003726 <UART_SetConfig+0x546>
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003718:	d205      	bcs.n	8003726 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60da      	str	r2, [r3, #12]
 8003724:	e002      	b.n	800372c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003738:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800373c:	4618      	mov	r0, r3
 800373e:	3728      	adds	r7, #40	@ 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop
 8003748:	40008000 	.word	0x40008000
 800374c:	00f42400 	.word	0x00f42400

08003750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01a      	beq.n	8003866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800384e:	d10a      	bne.n	8003866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b098      	sub	sp, #96	@ 0x60
 8003898:	af02      	add	r7, sp, #8
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038a4:	f7fd fa08 	bl	8000cb8 <HAL_GetTick>
 80038a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d12e      	bne.n	8003916 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c0:	2200      	movs	r2, #0
 80038c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f88c 	bl	80039e4 <UART_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d021      	beq.n	8003916 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e6      	bne.n	80038d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e062      	b.n	80039dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d149      	bne.n	80039b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003924:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392c:	2200      	movs	r2, #0
 800392e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f856 	bl	80039e4 <UART_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d03c      	beq.n	80039b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	623b      	str	r3, [r7, #32]
   return(result);
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800395c:	633b      	str	r3, [r7, #48]	@ 0x30
 800395e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e6      	bne.n	800393e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3308      	adds	r3, #8
 8003976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3308      	adds	r3, #8
 800398e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003990:	61fa      	str	r2, [r7, #28]
 8003992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	69b9      	ldr	r1, [r7, #24]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	617b      	str	r3, [r7, #20]
   return(result);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e5      	bne.n	8003970 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e011      	b.n	80039dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3758      	adds	r7, #88	@ 0x58
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f4:	e04f      	b.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fc:	d04b      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fd f95b 	bl	8000cb8 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e04e      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d037      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d034      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d031      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d110      	bne.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2208      	movs	r2, #8
 8003a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f838 	bl	8003abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2208      	movs	r2, #8
 8003a52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e029      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a70:	d111      	bne.n	8003a96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f81e 	bl	8003abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e00f      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2301      	moveq	r3, #1
 8003aa8:	2300      	movne	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d0a0      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b095      	sub	sp, #84	@ 0x54
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ae6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e6      	bne.n	8003ac6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3308      	adds	r3, #8
 8003b16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e5      	bne.n	8003af8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d118      	bne.n	8003b66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f023 0310 	bic.w	r3, r3, #16
 8003b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e6      	bne.n	8003b34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b7a:	bf00      	nop
 8003b7c:	3754      	adds	r7, #84	@ 0x54
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <memset>:
 8003b86:	4402      	add	r2, r0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d100      	bne.n	8003b90 <memset+0xa>
 8003b8e:	4770      	bx	lr
 8003b90:	f803 1b01 	strb.w	r1, [r3], #1
 8003b94:	e7f9      	b.n	8003b8a <memset+0x4>
	...

08003b98 <__libc_init_array>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8003bd0 <__libc_init_array+0x38>)
 8003b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8003bd4 <__libc_init_array+0x3c>)
 8003b9e:	1b64      	subs	r4, r4, r5
 8003ba0:	10a4      	asrs	r4, r4, #2
 8003ba2:	2600      	movs	r6, #0
 8003ba4:	42a6      	cmp	r6, r4
 8003ba6:	d109      	bne.n	8003bbc <__libc_init_array+0x24>
 8003ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8003bd8 <__libc_init_array+0x40>)
 8003baa:	4c0c      	ldr	r4, [pc, #48]	@ (8003bdc <__libc_init_array+0x44>)
 8003bac:	f000 f818 	bl	8003be0 <_init>
 8003bb0:	1b64      	subs	r4, r4, r5
 8003bb2:	10a4      	asrs	r4, r4, #2
 8003bb4:	2600      	movs	r6, #0
 8003bb6:	42a6      	cmp	r6, r4
 8003bb8:	d105      	bne.n	8003bc6 <__libc_init_array+0x2e>
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc0:	4798      	blx	r3
 8003bc2:	3601      	adds	r6, #1
 8003bc4:	e7ee      	b.n	8003ba4 <__libc_init_array+0xc>
 8003bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bca:	4798      	blx	r3
 8003bcc:	3601      	adds	r6, #1
 8003bce:	e7f2      	b.n	8003bb6 <__libc_init_array+0x1e>
 8003bd0:	08003c7c 	.word	0x08003c7c
 8003bd4:	08003c7c 	.word	0x08003c7c
 8003bd8:	08003c7c 	.word	0x08003c7c
 8003bdc:	08003c80 	.word	0x08003c80

08003be0 <_init>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr

08003bec <_fini>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr
